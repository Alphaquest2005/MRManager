#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CashSummaryManager
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CashSummary")]
	public partial class CashSummaryDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserLog(UserLog instance);
    partial void UpdateUserLog(UserLog instance);
    partial void DeleteUserLog(UserLog instance);
    partial void InsertUserPermission(UserPermission instance);
    partial void UpdateUserPermission(UserPermission instance);
    partial void DeleteUserPermission(UserPermission instance);
    partial void InsertCashComponent(CashComponent instance);
    partial void UpdateCashComponent(CashComponent instance);
    partial void DeleteCashComponent(CashComponent instance);
    partial void InsertCashType(CashType instance);
    partial void UpdateCashType(CashType instance);
    partial void DeleteCashType(CashType instance);
    partial void InsertCashTypeComponent(CashTypeComponent instance);
    partial void UpdateCashTypeComponent(CashTypeComponent instance);
    partial void DeleteCashTypeComponent(CashTypeComponent instance);
    partial void InsertDrawerCashDetail(DrawerCashDetail instance);
    partial void UpdateDrawerCashDetail(DrawerCashDetail instance);
    partial void DeleteDrawerCashDetail(DrawerCashDetail instance);
    partial void InsertDrawerSessionStatus(DrawerSessionStatus instance);
    partial void UpdateDrawerSessionStatus(DrawerSessionStatus instance);
    partial void DeleteDrawerSessionStatus(DrawerSessionStatus instance);
    #endregion
		
		public CashSummaryDBDataContext() : 
				base(global::CashSummaryManager.Properties.Settings.Default.CashSummaryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CashSummaryDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CashSummaryDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CashSummaryDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CashSummaryDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserLog> UserLogs
		{
			get
			{
				return this.GetTable<UserLog>();
			}
		}
		
		public System.Data.Linq.Table<UserPermission> UserPermissions
		{
			get
			{
				return this.GetTable<UserPermission>();
			}
		}
		
		public System.Data.Linq.Table<Cashier> Cashiers
		{
			get
			{
				return this.GetTable<Cashier>();
			}
		}
		
		public System.Data.Linq.Table<Drawer> Drawers
		{
			get
			{
				return this.GetTable<Drawer>();
			}
		}
		
		public System.Data.Linq.Table<PayCode> PayCodes
		{
			get
			{
				return this.GetTable<PayCode>();
			}
		}
		
		public System.Data.Linq.Table<Store> Stores
		{
			get
			{
				return this.GetTable<Store>();
			}
		}
		
		public System.Data.Linq.Table<Supervisor> Supervisors
		{
			get
			{
				return this.GetTable<Supervisor>();
			}
		}
		
		public System.Data.Linq.Table<CashComponent> CashComponents
		{
			get
			{
				return this.GetTable<CashComponent>();
			}
		}
		
		public System.Data.Linq.Table<CashType> CashTypes
		{
			get
			{
				return this.GetTable<CashType>();
			}
		}
		
		public System.Data.Linq.Table<CashTypeComponent> CashTypeComponents
		{
			get
			{
				return this.GetTable<CashTypeComponent>();
			}
		}
		
		public System.Data.Linq.Table<DrawerCashDetail> DrawerCashDetails
		{
			get
			{
				return this.GetTable<DrawerCashDetail>();
			}
		}
		
		public System.Data.Linq.Table<DrawSessionDetail> DrawSessionDetails
		{
			get
			{
				return this.GetTable<DrawSessionDetail>();
			}
		}
		
		public System.Data.Linq.Table<DrawerSessionStatus> DrawerSessionStatus
		{
			get
			{
				return this.GetTable<DrawerSessionStatus>();
			}
		}
		
		public System.Data.Linq.Table<DrawerSession> DrawerSessions
		{
			get
			{
				return this.GetTable<DrawerSession>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<UserPermission> _UserPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Permission()
		{
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_UserPermission", Storage="_UserPermissions", ThisKey="Id", OtherKey="PermissionId")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Password;
		
		private string _Signature;
		
		private string _LoginName;
		
		private EntitySet<UserLog> _UserLogs;
		
		private EntitySet<UserPermission> _UserPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSignatureChanging(string value);
    partial void OnSignatureChanged();
    partial void OnLoginNameChanging(string value);
    partial void OnLoginNameChanged();
    #endregion
		
		public User()
		{
			this._UserLogs = new EntitySet<UserLog>(new Action<UserLog>(this.attach_UserLogs), new Action<UserLog>(this.detach_UserLogs));
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signature", DbType="VarChar(255)")]
		public string Signature
		{
			get
			{
				return this._Signature;
			}
			set
			{
				if ((this._Signature != value))
				{
					this.OnSignatureChanging(value);
					this.SendPropertyChanging();
					this._Signature = value;
					this.SendPropertyChanged("Signature");
					this.OnSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginName", DbType="VarChar(50)")]
		public string LoginName
		{
			get
			{
				return this._LoginName;
			}
			set
			{
				if ((this._LoginName != value))
				{
					this.OnLoginNameChanging(value);
					this.SendPropertyChanging();
					this._LoginName = value;
					this.SendPropertyChanged("LoginName");
					this.OnLoginNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLog", Storage="_UserLogs", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserLog> UserLogs
		{
			get
			{
				return this._UserLogs;
			}
			set
			{
				this._UserLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPermission", Storage="_UserPermissions", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserLogs(UserLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLogs(UserLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLogs")]
	public partial class UserLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserLogId;
		
		private string _MachineName;
		
		private System.DateTime _LoginTime;
		
		private System.Nullable<System.DateTime> _LogoutTime;
		
		private string _Status;
		
		private int _UserId;
		
		private System.Data.Linq.Binary _EntryTimeStamp;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserLogIdChanging(int value);
    partial void OnUserLogIdChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnLoginTimeChanging(System.DateTime value);
    partial void OnLoginTimeChanged();
    partial void OnLogoutTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLogoutTimeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEntryTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnEntryTimeStampChanged();
    #endregion
		
		public UserLog()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UserLogId
		{
			get
			{
				return this._UserLogId;
			}
			set
			{
				if ((this._UserLogId != value))
				{
					this.OnUserLogIdChanging(value);
					this.SendPropertyChanging();
					this._UserLogId = value;
					this.SendPropertyChanged("UserLogId");
					this.OnUserLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LoginTime
		{
			get
			{
				return this._LoginTime;
			}
			set
			{
				if ((this._LoginTime != value))
				{
					this.OnLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LoginTime = value;
					this.SendPropertyChanged("LoginTime");
					this.OnLoginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoutTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LogoutTime
		{
			get
			{
				return this._LogoutTime;
			}
			set
			{
				if ((this._LogoutTime != value))
				{
					this.OnLogoutTimeChanging(value);
					this.SendPropertyChanging();
					this._LogoutTime = value;
					this.SendPropertyChanged("LogoutTime");
					this.OnLogoutTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryTimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary EntryTimeStamp
		{
			get
			{
				return this._EntryTimeStamp;
			}
			set
			{
				if ((this._EntryTimeStamp != value))
				{
					this.OnEntryTimeStampChanging(value);
					this.SendPropertyChanging();
					this._EntryTimeStamp = value;
					this.SendPropertyChanged("EntryTimeStamp");
					this.OnEntryTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLog", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLogs.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPermissions")]
	public partial class UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _PermissionId;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPermissionIdChanging(int value);
    partial void OnPermissionIdChanged();
    #endregion
		
		public UserPermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionId", DbType="Int NOT NULL")]
		public int PermissionId
		{
			get
			{
				return this._PermissionId;
			}
			set
			{
				if ((this._PermissionId != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionId = value;
					this.SendPropertyChanged("PermissionId");
					this.OnPermissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_UserPermission", Storage="_Permission", ThisKey="PermissionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._PermissionId = value.Id;
					}
					else
					{
						this._PermissionId = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPermission", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cashiers")]
	public partial class Cashier
	{
		
		private string _UserId;
		
		private string _Name;
		
		private string _Password;
		
		private string _WorkGroupId;
		
		public Cashier()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(40)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(32)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkGroupId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string WorkGroupId
		{
			get
			{
				return this._WorkGroupId;
			}
			set
			{
				if ((this._WorkGroupId != value))
				{
					this._WorkGroupId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drawers")]
	public partial class Drawer
	{
		
		private string _StoreId;
		
		private string _DrawerId;
		
		private string _Name;
		
		public Drawer()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawerId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string DrawerId
		{
			get
			{
				return this._DrawerId;
			}
			set
			{
				if ((this._DrawerId != value))
				{
					this._DrawerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayCodes")]
	public partial class PayCode
	{
		
		private string _StoreId;
		
		private string _PayCode1;
		
		public PayCode()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PayCode", Storage="_PayCode1", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string PayCode1
		{
			get
			{
				return this._PayCode1;
			}
			set
			{
				if ((this._PayCode1 != value))
				{
					this._PayCode1 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stores")]
	public partial class Store
	{
		
		private string _StoreId;
		
		private string _Name;
		
		public Store()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supervisors")]
	public partial class Supervisor
	{
		
		private string _UserId;
		
		private string _Name;
		
		private string _Password;
		
		private string _WorkGroupId;
		
		public Supervisor()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(40)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(32)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkGroupId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string WorkGroupId
		{
			get
			{
				return this._WorkGroupId;
			}
			set
			{
				if ((this._WorkGroupId != value))
				{
					this._WorkGroupId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashComponent")]
	public partial class CashComponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private double _UnitValue;
		
		private EntitySet<CashTypeComponent> _CashTypeComponents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitValueChanging(double value);
    partial void OnUnitValueChanged();
    #endregion
		
		public CashComponent()
		{
			this._CashTypeComponents = new EntitySet<CashTypeComponent>(new Action<CashTypeComponent>(this.attach_CashTypeComponents), new Action<CashTypeComponent>(this.detach_CashTypeComponents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitValue", DbType="Float NOT NULL")]
		public double UnitValue
		{
			get
			{
				return this._UnitValue;
			}
			set
			{
				if ((this._UnitValue != value))
				{
					this.OnUnitValueChanging(value);
					this.SendPropertyChanging();
					this._UnitValue = value;
					this.SendPropertyChanged("UnitValue");
					this.OnUnitValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashComponent_CashTypeComponent", Storage="_CashTypeComponents", ThisKey="Id", OtherKey="CashComponentId")]
		public EntitySet<CashTypeComponent> CashTypeComponents
		{
			get
			{
				return this._CashTypeComponents;
			}
			set
			{
				this._CashTypeComponents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CashTypeComponents(CashTypeComponent entity)
		{
			this.SendPropertyChanging();
			entity.CashComponent = this;
		}
		
		private void detach_CashTypeComponents(CashTypeComponent entity)
		{
			this.SendPropertyChanging();
			entity.CashComponent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashType")]
	public partial class CashType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<CashTypeComponent> _CashTypeComponents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CashType()
		{
			this._CashTypeComponents = new EntitySet<CashTypeComponent>(new Action<CashTypeComponent>(this.attach_CashTypeComponents), new Action<CashTypeComponent>(this.detach_CashTypeComponents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashType_CashTypeComponent", Storage="_CashTypeComponents", ThisKey="Id", OtherKey="CashTypeId")]
		public EntitySet<CashTypeComponent> CashTypeComponents
		{
			get
			{
				return this._CashTypeComponents;
			}
			set
			{
				this._CashTypeComponents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CashTypeComponents(CashTypeComponent entity)
		{
			this.SendPropertyChanging();
			entity.CashType = this;
		}
		
		private void detach_CashTypeComponents(CashTypeComponent entity)
		{
			this.SendPropertyChanging();
			entity.CashType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CashTypeComponent")]
	public partial class CashTypeComponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CashTypeId;
		
		private int _CashComponentId;
		
		private EntitySet<DrawerCashDetail> _DrawerCashDetails;
		
		private EntityRef<CashComponent> _CashComponent;
		
		private EntityRef<CashType> _CashType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCashTypeIdChanging(int value);
    partial void OnCashTypeIdChanged();
    partial void OnCashComponentIdChanging(int value);
    partial void OnCashComponentIdChanged();
    #endregion
		
		public CashTypeComponent()
		{
			this._DrawerCashDetails = new EntitySet<DrawerCashDetail>(new Action<DrawerCashDetail>(this.attach_DrawerCashDetails), new Action<DrawerCashDetail>(this.detach_DrawerCashDetails));
			this._CashComponent = default(EntityRef<CashComponent>);
			this._CashType = default(EntityRef<CashType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashTypeId", DbType="Int NOT NULL")]
		public int CashTypeId
		{
			get
			{
				return this._CashTypeId;
			}
			set
			{
				if ((this._CashTypeId != value))
				{
					if (this._CashType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCashTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CashTypeId = value;
					this.SendPropertyChanged("CashTypeId");
					this.OnCashTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashComponentId", DbType="Int NOT NULL")]
		public int CashComponentId
		{
			get
			{
				return this._CashComponentId;
			}
			set
			{
				if ((this._CashComponentId != value))
				{
					if (this._CashComponent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCashComponentIdChanging(value);
					this.SendPropertyChanging();
					this._CashComponentId = value;
					this.SendPropertyChanged("CashComponentId");
					this.OnCashComponentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashTypeComponent_DrawerCashDetail", Storage="_DrawerCashDetails", ThisKey="Id", OtherKey="CashTypeCompoentId")]
		public EntitySet<DrawerCashDetail> DrawerCashDetails
		{
			get
			{
				return this._DrawerCashDetails;
			}
			set
			{
				this._DrawerCashDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashComponent_CashTypeComponent", Storage="_CashComponent", ThisKey="CashComponentId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CashComponent CashComponent
		{
			get
			{
				return this._CashComponent.Entity;
			}
			set
			{
				CashComponent previousValue = this._CashComponent.Entity;
				if (((previousValue != value) 
							|| (this._CashComponent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashComponent.Entity = null;
						previousValue.CashTypeComponents.Remove(this);
					}
					this._CashComponent.Entity = value;
					if ((value != null))
					{
						value.CashTypeComponents.Add(this);
						this._CashComponentId = value.Id;
					}
					else
					{
						this._CashComponentId = default(int);
					}
					this.SendPropertyChanged("CashComponent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashType_CashTypeComponent", Storage="_CashType", ThisKey="CashTypeId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CashType CashType
		{
			get
			{
				return this._CashType.Entity;
			}
			set
			{
				CashType previousValue = this._CashType.Entity;
				if (((previousValue != value) 
							|| (this._CashType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashType.Entity = null;
						previousValue.CashTypeComponents.Remove(this);
					}
					this._CashType.Entity = value;
					if ((value != null))
					{
						value.CashTypeComponents.Add(this);
						this._CashTypeId = value.Id;
					}
					else
					{
						this._CashTypeId = default(int);
					}
					this.SendPropertyChanged("CashType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DrawerCashDetails(DrawerCashDetail entity)
		{
			this.SendPropertyChanging();
			entity.CashTypeComponent = this;
		}
		
		private void detach_DrawerCashDetails(DrawerCashDetail entity)
		{
			this.SendPropertyChanging();
			entity.CashTypeComponent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrawerCashDetails")]
	public partial class DrawerCashDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DrawSessionId;
		
		private int _CashTypeCompoentId;
		
		private double _Quantity;
		
		private string _Comments;
		
		private EntityRef<CashTypeComponent> _CashTypeComponent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDrawSessionIdChanging(string value);
    partial void OnDrawSessionIdChanged();
    partial void OnCashTypeCompoentIdChanging(int value);
    partial void OnCashTypeCompoentIdChanged();
    partial void OnQuantityChanging(double value);
    partial void OnQuantityChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public DrawerCashDetail()
		{
			this._CashTypeComponent = default(EntityRef<CashTypeComponent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawSessionId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DrawSessionId
		{
			get
			{
				return this._DrawSessionId;
			}
			set
			{
				if ((this._DrawSessionId != value))
				{
					this.OnDrawSessionIdChanging(value);
					this.SendPropertyChanging();
					this._DrawSessionId = value;
					this.SendPropertyChanged("DrawSessionId");
					this.OnDrawSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashTypeCompoentId", DbType="Int NOT NULL")]
		public int CashTypeCompoentId
		{
			get
			{
				return this._CashTypeCompoentId;
			}
			set
			{
				if ((this._CashTypeCompoentId != value))
				{
					if (this._CashTypeComponent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCashTypeCompoentIdChanging(value);
					this.SendPropertyChanging();
					this._CashTypeCompoentId = value;
					this.SendPropertyChanged("CashTypeCompoentId");
					this.OnCashTypeCompoentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Float NOT NULL")]
		public double Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(255)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CashTypeComponent_DrawerCashDetail", Storage="_CashTypeComponent", ThisKey="CashTypeCompoentId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CashTypeComponent CashTypeComponent
		{
			get
			{
				return this._CashTypeComponent.Entity;
			}
			set
			{
				CashTypeComponent previousValue = this._CashTypeComponent.Entity;
				if (((previousValue != value) 
							|| (this._CashTypeComponent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CashTypeComponent.Entity = null;
						previousValue.DrawerCashDetails.Remove(this);
					}
					this._CashTypeComponent.Entity = value;
					if ((value != null))
					{
						value.DrawerCashDetails.Add(this);
						this._CashTypeCompoentId = value.Id;
					}
					else
					{
						this._CashTypeCompoentId = default(int);
					}
					this.SendPropertyChanged("CashTypeComponent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrawSessionDetails")]
	public partial class DrawSessionDetail
	{
		
		private string _StoreId;
		
		private string _DrawId;
		
		private string _PayCode;
		
		private long _DrawSessionId;
		
		private System.Nullable<double> _Amount;
		
		private double _ActualAmount;
		
		private System.Nullable<double> _Difference;
		
		public DrawSessionDetail()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string DrawId
		{
			get
			{
				return this._DrawId;
			}
			set
			{
				if ((this._DrawId != value))
				{
					this._DrawId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayCode", DbType="VarChar(10)")]
		public string PayCode
		{
			get
			{
				return this._PayCode;
			}
			set
			{
				if ((this._PayCode != value))
				{
					this._PayCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawSessionId", DbType="BigInt NOT NULL")]
		public long DrawSessionId
		{
			get
			{
				return this._DrawSessionId;
			}
			set
			{
				if ((this._DrawSessionId != value))
				{
					this._DrawSessionId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualAmount", DbType="Float NOT NULL")]
		public double ActualAmount
		{
			get
			{
				return this._ActualAmount;
			}
			set
			{
				if ((this._ActualAmount != value))
				{
					this._ActualAmount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Difference", DbType="Float")]
		public System.Nullable<double> Difference
		{
			get
			{
				return this._Difference;
			}
			set
			{
				if ((this._Difference != value))
				{
					this._Difference = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrawerSessionStatus")]
	public partial class DrawerSessionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DrawSessionId;
		
		private string _Status;
		
		private int _UserId;
		
		private System.DateTime _EntryDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDrawSessionIdChanging(string value);
    partial void OnDrawSessionIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEntryDateTimeChanging(System.DateTime value);
    partial void OnEntryDateTimeChanged();
    #endregion
		
		public DrawerSessionStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawSessionId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DrawSessionId
		{
			get
			{
				return this._DrawSessionId;
			}
			set
			{
				if ((this._DrawSessionId != value))
				{
					this.OnDrawSessionIdChanging(value);
					this.SendPropertyChanging();
					this._DrawSessionId = value;
					this.SendPropertyChanged("DrawSessionId");
					this.OnDrawSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime EntryDateTime
		{
			get
			{
				return this._EntryDateTime;
			}
			set
			{
				if ((this._EntryDateTime != value))
				{
					this.OnEntryDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EntryDateTime = value;
					this.SendPropertyChanged("EntryDateTime");
					this.OnEntryDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrawerSessions")]
	public partial class DrawerSession
	{
		
		private System.DateTime _TradeDate;
		
		private string _StoreId;
		
		private string _DrawId;
		
		private long _DrawSessionId;
		
		private System.DateTime _OpenDateTime;
		
		private System.DateTime _CloseDateTime;
		
		private string _Supervisor;
		
		private string _Cashier;
		
		private string _SupervisorId;
		
		private string _CashierId;
		
		private string _Drawer;
		
		private string _Status;
		
		private string _StoreName;
		
		private string _DebitAccountNumber;
		
		private string _DebitAccountDescription;
		
		private string _CreditAccountNumber;
		
		private string _CreditAccountDescription;
		
		public DrawerSession()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeDate", DbType="DateTime NOT NULL")]
		public System.DateTime TradeDate
		{
			get
			{
				return this._TradeDate;
			}
			set
			{
				if ((this._TradeDate != value))
				{
					this._TradeDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string DrawId
		{
			get
			{
				return this._DrawId;
			}
			set
			{
				if ((this._DrawId != value))
				{
					this._DrawId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawSessionId", DbType="BigInt NOT NULL")]
		public long DrawSessionId
		{
			get
			{
				return this._DrawSessionId;
			}
			set
			{
				if ((this._DrawSessionId != value))
				{
					this._DrawSessionId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime OpenDateTime
		{
			get
			{
				return this._OpenDateTime;
			}
			set
			{
				if ((this._OpenDateTime != value))
				{
					this._OpenDateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CloseDateTime
		{
			get
			{
				return this._CloseDateTime;
			}
			set
			{
				if ((this._CloseDateTime != value))
				{
					this._CloseDateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supervisor", DbType="VarChar(40)")]
		public string Supervisor
		{
			get
			{
				return this._Supervisor;
			}
			set
			{
				if ((this._Supervisor != value))
				{
					this._Supervisor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cashier", DbType="VarChar(40)")]
		public string Cashier
		{
			get
			{
				return this._Cashier;
			}
			set
			{
				if ((this._Cashier != value))
				{
					this._Cashier = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupervisorId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SupervisorId
		{
			get
			{
				return this._SupervisorId;
			}
			set
			{
				if ((this._SupervisorId != value))
				{
					this._SupervisorId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashierId", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CashierId
		{
			get
			{
				return this._CashierId;
			}
			set
			{
				if ((this._CashierId != value))
				{
					this._CashierId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drawer", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Drawer
		{
			get
			{
				return this._Drawer;
			}
			set
			{
				if ((this._Drawer != value))
				{
					this._Drawer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StoreName
		{
			get
			{
				return this._StoreName;
			}
			set
			{
				if ((this._StoreName != value))
				{
					this._StoreName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebitAccountNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DebitAccountNumber
		{
			get
			{
				return this._DebitAccountNumber;
			}
			set
			{
				if ((this._DebitAccountNumber != value))
				{
					this._DebitAccountNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebitAccountDescription", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string DebitAccountDescription
		{
			get
			{
				return this._DebitAccountDescription;
			}
			set
			{
				if ((this._DebitAccountDescription != value))
				{
					this._DebitAccountDescription = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditAccountNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CreditAccountNumber
		{
			get
			{
				return this._CreditAccountNumber;
			}
			set
			{
				if ((this._CreditAccountNumber != value))
				{
					this._CreditAccountNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditAccountDescription", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CreditAccountDescription
		{
			get
			{
				return this._CreditAccountDescription;
			}
			set
			{
				if ((this._CreditAccountDescription != value))
				{
					this._CreditAccountDescription = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
