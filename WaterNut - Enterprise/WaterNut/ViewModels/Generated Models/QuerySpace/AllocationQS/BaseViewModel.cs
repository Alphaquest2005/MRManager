// <autogenerated>
//   This file was generated by T4 code generator AllQuerySpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using AllocationQS.Client.Entities;
using AllocationQS.Client.Repositories;
//using WaterNut.Client.Repositories;
using AllocationQS.Client.Entities;



namespace WaterNut.QuerySpace.AllocationQS.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // ViewModelBase<BaseViewModel>
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class AllocationQSOnCreated: BaseViewModel
        {
           // Load Repository
                public AllocationQSOnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaSalesAllocationsExIDChanged, OnCurrentAsycudaSalesAllocationsExIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<AsycudaSalesAllocationsEx>(MessageToken.CurrentAsycudaSalesAllocationsExChanged, OnCurrentAsycudaSalesAllocationsExChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentAsycudaSalesAllocationsExIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaSalesAllocationsExRepository ctx = new AsycudaSalesAllocationsExRepository())
                            {
                                CurrentAsycudaSalesAllocationsEx = await ctx.GetAsycudaSalesAllocationsEx(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaSalesAllocationsEx);
                        }

                        private  string _currentAsycudaSalesAllocationsExID = "";
                        public string CurrentAsycudaSalesAllocationsExID
                        {
                            get
                            {
                                return _currentAsycudaSalesAllocationsExID;
                            }
                            set
                            {
                                if (_currentAsycudaSalesAllocationsExID != value)
                                {
                                    _currentAsycudaSalesAllocationsExID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaSalesAllocationsExID)) BeginSendMessage(MessageToken.CurrentAsycudaSalesAllocationsExIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaSalesAllocationsExIDChanged, _currentAsycudaSalesAllocationsExID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaSalesAllocationsExID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentAsycudaSalesAllocationsExChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaSalesAllocationsEx> e)
        {
            //CurrentAsycudaSalesAllocationsEx = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaSalesAllocationsEx);
        }

        private  AsycudaSalesAllocationsEx _currentAsycudaSalesAllocationsEx;
        public AsycudaSalesAllocationsEx CurrentAsycudaSalesAllocationsEx
        {
            get
            {
                return _currentAsycudaSalesAllocationsEx;
            }
            set
            {
                if (_currentAsycudaSalesAllocationsEx != value)
                {
                    _currentAsycudaSalesAllocationsEx = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaSalesAllocationsExChanged,
                                                     new NotificationEventArgs<AsycudaSalesAllocationsEx>(MessageToken.CurrentAsycudaSalesAllocationsExChanged, _currentAsycudaSalesAllocationsEx)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaSalesAllocationsEx);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<AsycudaSalesAllocationsEx> _vcurrentAsycudaSalesAllocationsEx;
        public VirtualListItem<AsycudaSalesAllocationsEx> VCurrentAsycudaSalesAllocationsEx
        {
            get
            {
                return _vcurrentAsycudaSalesAllocationsEx;
            }
            set
            {
                if (_vcurrentAsycudaSalesAllocationsEx != value)
                {
                    _vcurrentAsycudaSalesAllocationsEx = value;
					if(_vcurrentAsycudaSalesAllocationsEx != null) CurrentAsycudaSalesAllocationsEx = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaSalesAllocationsEx);                    
                }
            }
        }






        static AllocationQSOnCreated newAllocationQSOnCreated = new AllocationQSOnCreated();
    }		
}
