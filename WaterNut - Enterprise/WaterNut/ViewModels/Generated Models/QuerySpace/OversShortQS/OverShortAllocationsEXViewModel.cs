// <autogenerated>
//   This file was generated by T4 code generator AllQuerySpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OversShortQS.Client.Entities;
using OversShortQS.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.OversShortQS.ViewModels
{
    
	public partial class OverShortAllocationsEXViewModel_AutoGen : ViewModelBase<OverShortAllocationsEXViewModel_AutoGen>
	{

       private static readonly OverShortAllocationsEXViewModel_AutoGen instance;
       static OverShortAllocationsEXViewModel_AutoGen()
        {
            instance = new OverShortAllocationsEXViewModel_AutoGen();
        }

       public static OverShortAllocationsEXViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public OverShortAllocationsEXViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<OverShortAllocationsEX>(MessageToken.CurrentOverShortAllocationsEXChanged, OnCurrentOverShortAllocationsEXChanged);
            RegisterToReceiveMessages(MessageToken.OverShortAllocationsEXesChanged, OnOverShortAllocationsEXesChanged);
			RegisterToReceiveMessages(MessageToken.OverShortAllocationsEXesFilterExpressionChanged, OnOverShortAllocationsEXesFilterExpressionChanged);

 
			RegisterToReceiveMessages<OverShortDetailAllocation>(MessageToken.CurrentOverShortDetailAllocationChanged, OnCurrentOverShortDetailAllocationChanged);
 
			RegisterToReceiveMessages<OverShortDetailsEX>(MessageToken.CurrentOverShortDetailsEXChanged, OnCurrentOverShortDetailsEXChanged);
 
			RegisterToReceiveMessages<AsycudaDocumentItem>(MessageToken.CurrentAsycudaDocumentItemChanged, OnCurrentAsycudaDocumentItemChanged);

 			// Recieve messages for Core Current Entities Changed
 

			OverShortAllocationsEXes = new VirtualList<OverShortAllocationsEX>(vloader);
			OverShortAllocationsEXes.LoadingStateChanged += OverShortAllocationsEXes_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(OverShortAllocationsEXes, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<OverShortAllocationsEX> _OverShortAllocationsEXes = null;
        public VirtualList<OverShortAllocationsEX> OverShortAllocationsEXes
        {
            get
            {
                return _OverShortAllocationsEXes;
            }
            set
            {
                _OverShortAllocationsEXes = value;
            }
        }

		 private void OnOverShortAllocationsEXesFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			OverShortAllocationsEXes.Refresh();
            SelectedOverShortAllocationsEXes.Clear();
            NotifyPropertyChanged(x => SelectedOverShortAllocationsEXes);
            BeginSendMessage(MessageToken.SelectedOverShortAllocationsEXesChanged, new NotificationEventArgs(MessageToken.SelectedOverShortAllocationsEXesChanged));
        }

		void OverShortAllocationsEXes_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (OverShortAllocationsEXes.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => OverShortAllocationsEXes);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("OverShortAllocationsEXes | Error occured..." + OverShortAllocationsEXes.LastLoadingError.Message);
                    NotifyPropertyChanged(x => OverShortAllocationsEXes);
                    break;
            }
           
        }

		
		public readonly OverShortAllocationsEXVirturalListLoader vloader = new OverShortAllocationsEXVirturalListLoader();

		private ObservableCollection<OverShortAllocationsEX> _selectedOverShortAllocationsEXes = new ObservableCollection<OverShortAllocationsEX>();
        public ObservableCollection<OverShortAllocationsEX> SelectedOverShortAllocationsEXes
        {
            get
            {
                return _selectedOverShortAllocationsEXes;
            }
            set
            {
                _selectedOverShortAllocationsEXes = value;
				BeginSendMessage(MessageToken.SelectedOverShortAllocationsEXesChanged,
                                    new NotificationEventArgs(MessageToken.SelectedOverShortAllocationsEXesChanged));
				 NotifyPropertyChanged(x => SelectedOverShortAllocationsEXes);
            }
        }

        internal void OnCurrentOverShortAllocationsEXChanged(object sender, NotificationEventArgs<OverShortAllocationsEX> e)
        {
            if(BaseViewModel.Instance.CurrentOverShortAllocationsEX != null) BaseViewModel.Instance.CurrentOverShortAllocationsEX.PropertyChanged += CurrentOverShortAllocationsEX__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentOverShortAllocationsEX);
        }   

            void CurrentOverShortAllocationsEX__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                    //if (e.PropertyName == "AddOverShortDetailAllocation")
                   // {
                   //    if(OverShortDetailAllocations.Contains(CurrentOverShortAllocationsEX.OverShortDetailAllocation) == false) OverShortDetailAllocations.Add(CurrentOverShortAllocationsEX.OverShortDetailAllocation);
                    //}
                    //if (e.PropertyName == "AddOverShortDetailsEX")
                   // {
                   //    if(OverShortDetailsEX.Contains(CurrentOverShortAllocationsEX.OverShortDetailsEX) == false) OverShortDetailsEX.Add(CurrentOverShortAllocationsEX.OverShortDetailsEX);
                    //}
                    //if (e.PropertyName == "AddAsycudaDocumentItem")
                   // {
                   //    if(AsycudaDocumentItems.Contains(CurrentOverShortAllocationsEX.AsycudaDocumentItem) == false) AsycudaDocumentItems.Add(CurrentOverShortAllocationsEX.AsycudaDocumentItem);
                    //}
                 } 
        internal void OnOverShortAllocationsEXesChanged(object sender, NotificationEventArgs e)
        {
            _OverShortAllocationsEXes.Refresh();
			NotifyPropertyChanged(x => this.OverShortAllocationsEXes);
        }   


 	
		 internal void OnCurrentOverShortDetailAllocationChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OverShortDetailAllocation> e)
			{
			if(ViewCurrentOverShortDetailAllocation == false) return;
			if (e.Data == null || e.Data.OverShortAllocationId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("OverShortAllocationId == {0}", e.Data.OverShortAllocationId.ToString());
                 }

				OverShortAllocationsEXes.Refresh();
				NotifyPropertyChanged(x => this.OverShortAllocationsEXes);
                // SendMessage(MessageToken.OverShortAllocationsEXesChanged, new NotificationEventArgs(MessageToken.OverShortAllocationsEXesChanged));
                                          
                BaseViewModel.Instance.CurrentOverShortAllocationsEX = null;
			}
	
		 internal void OnCurrentOverShortDetailsEXChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OverShortDetailsEX> e)
			{
			if(ViewCurrentOverShortDetailsEX == false) return;
			if (e.Data == null || e.Data.OverShortDetailId == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("OverShortDetailId == {0}", e.Data.OverShortDetailId.ToString());
                 }

				OverShortAllocationsEXes.Refresh();
				NotifyPropertyChanged(x => this.OverShortAllocationsEXes);
                // SendMessage(MessageToken.OverShortAllocationsEXesChanged, new NotificationEventArgs(MessageToken.OverShortAllocationsEXesChanged));
                                          
                BaseViewModel.Instance.CurrentOverShortAllocationsEX = null;
			}
	
		 internal void OnCurrentAsycudaDocumentItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItem> e)
			{
			if(ViewCurrentAsycudaDocumentItem == false) return;
			if (e.Data == null || e.Data.Item_Id == null)
                {
                    vloader.FilterExpression = "None";
                }
                else
                {
				vloader.FilterExpression = string.Format("Item_Id == {0}", e.Data.Item_Id.ToString());
                 }

				OverShortAllocationsEXes.Refresh();
				NotifyPropertyChanged(x => this.OverShortAllocationsEXes);
                // SendMessage(MessageToken.OverShortAllocationsEXesChanged, new NotificationEventArgs(MessageToken.OverShortAllocationsEXesChanged));
                                          
                BaseViewModel.Instance.CurrentOverShortAllocationsEX = null;
			}

  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
 	
		 bool _viewCurrentOverShortDetailAllocation = false;
         public bool ViewCurrentOverShortDetailAllocation
         {
             get
             {
                 return _viewCurrentOverShortDetailAllocation;
             }
             set
             {
                 _viewCurrentOverShortDetailAllocation = value;
                 NotifyPropertyChanged(x => x.ViewCurrentOverShortDetailAllocation);
             }
         }
 	
		 bool _viewCurrentOverShortDetailsEX = false;
         public bool ViewCurrentOverShortDetailsEX
         {
             get
             {
                 return _viewCurrentOverShortDetailsEX;
             }
             set
             {
                 _viewCurrentOverShortDetailsEX = value;
                 NotifyPropertyChanged(x => x.ViewCurrentOverShortDetailsEX);
             }
         }
 	
		 bool _viewCurrentAsycudaDocumentItem = false;
         public bool ViewCurrentAsycudaDocumentItem
         {
             get
             {
                 return _viewCurrentAsycudaDocumentItem;
             }
             set
             {
                 _viewCurrentAsycudaDocumentItem = value;
                 NotifyPropertyChanged(x => x.ViewCurrentAsycudaDocumentItem);
             }
         }
		public void ViewAll()
        {
			vloader.FilterExpression = "All";
			vloader.ClearNavigationExpression();
			_OverShortAllocationsEXes.Refresh();
			NotifyPropertyChanged(x => this.OverShortAllocationsEXes);
		}

		public async Task SelectAll()
        {
            IEnumerable<OverShortAllocationsEX> lst = null;
            using (var ctx = new OverShortAllocationsEXRepository())
            {
                lst = await ctx.GetOverShortAllocationsEXesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedOverShortAllocationsEXes = new ObservableCollection<OverShortAllocationsEX>(lst);
        }

 

		private Double? _receivedQtyFilter;
        public Double? ReceivedQtyFilter
        {
            get
            {
                return _receivedQtyFilter;
            }
            set
            {
                _receivedQtyFilter = value;
				NotifyPropertyChanged(x => ReceivedQtyFilter);
                FilterData();
                
            }
        }	

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _itemDescriptionFilter;
        public string ItemDescriptionFilter
        {
            get
            {
                return _itemDescriptionFilter;
            }
            set
            {
                _itemDescriptionFilter = value;
				NotifyPropertyChanged(x => ItemDescriptionFilter);
                FilterData();
                
            }
        }	

 

		private Double? _costFilter;
        public Double? CostFilter
        {
            get
            {
                return _costFilter;
            }
            set
            {
                _costFilter = value;
				NotifyPropertyChanged(x => CostFilter);
                FilterData();
                
            }
        }	

 

		private Double? _invoiceQtyFilter;
        public Double? InvoiceQtyFilter
        {
            get
            {
                return _invoiceQtyFilter;
            }
            set
            {
                _invoiceQtyFilter = value;
				NotifyPropertyChanged(x => InvoiceQtyFilter);
                FilterData();
                
            }
        }	

 

		private string _invoiceNoFilter;
        public string InvoiceNoFilter
        {
            get
            {
                return _invoiceNoFilter;
            }
            set
            {
                _invoiceNoFilter = value;
				NotifyPropertyChanged(x => InvoiceNoFilter);
                FilterData();
                
            }
        }	

 
		private DateTime? _startInvoiceDateFilter = DateTime.Parse(string.Format("{0}/1/{1}", DateTime.Now.Month ,DateTime.Now.Year));
        public DateTime? StartInvoiceDateFilter
        {
            get
            {
                return _startInvoiceDateFilter;
            }
            set
            {
                _startInvoiceDateFilter = value;
				NotifyPropertyChanged(x => StartInvoiceDateFilter);
                FilterData();
                
            }
        }	

		private DateTime? _endInvoiceDateFilter = DateTime.Parse(string.Format("{1}/{0}/{2}", DateTime.DaysInMonth( DateTime.Now.Year,DateTime.Now.Month), DateTime.Now.Month, DateTime.Now.Year));
        public DateTime? EndInvoiceDateFilter
        {
            get
            {
                return _endInvoiceDateFilter;
            }
            set
            {
                _endInvoiceDateFilter = value;
				NotifyPropertyChanged(x => EndInvoiceDateFilter);
                FilterData();
                
            }
        }
 

		private DateTime? _invoiceDateFilter;
        public DateTime? InvoiceDateFilter
        {
            get
            {
                return _invoiceDateFilter;
            }
            set
            {
                _invoiceDateFilter = value;
				NotifyPropertyChanged(x => InvoiceDateFilter);
                FilterData();
                
            }
        }	

 

		private string _cNumberFilter;
        public string CNumberFilter
        {
            get
            {
                return _cNumberFilter;
            }
            set
            {
                _cNumberFilter = value;
				NotifyPropertyChanged(x => CNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _registrationDateFilter;
        public string RegistrationDateFilter
        {
            get
            {
                return _registrationDateFilter;
            }
            set
            {
                _registrationDateFilter = value;
				NotifyPropertyChanged(x => RegistrationDateFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _durationFilter;
        public Int32? DurationFilter
        {
            get
            {
                return _durationFilter;
            }
            set
            {
                _durationFilter = value;
				NotifyPropertyChanged(x => DurationFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _invoiceMonthFilter;
        public Int32? InvoiceMonthFilter
        {
            get
            {
                return _invoiceMonthFilter;
            }
            set
            {
                _invoiceMonthFilter = value;
				NotifyPropertyChanged(x => InvoiceMonthFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _asycudaMonthFilter;
        public Int32? AsycudaMonthFilter
        {
            get
            {
                return _asycudaMonthFilter;
            }
            set
            {
                _asycudaMonthFilter = value;
				NotifyPropertyChanged(x => AsycudaMonthFilter);
                FilterData();
                
            }
        }	

 

		private Double? _allocatedValueFilter;
        public Double? AllocatedValueFilter
        {
            get
            {
                return _allocatedValueFilter;
            }
            set
            {
                _allocatedValueFilter = value;
				NotifyPropertyChanged(x => AllocatedValueFilter);
                FilterData();
                
            }
        }	

 

		private Double? _receivedValueFilter;
        public Double? ReceivedValueFilter
        {
            get
            {
                return _receivedValueFilter;
            }
            set
            {
                _receivedValueFilter = value;
				NotifyPropertyChanged(x => ReceivedValueFilter);
                FilterData();
                
            }
        }	

 

		private Double? _invoiceValueFilter;
        public Double? InvoiceValueFilter
        {
            get
            {
                return _invoiceValueFilter;
            }
            set
            {
                _invoiceValueFilter = value;
				NotifyPropertyChanged(x => InvoiceValueFilter);
                FilterData();
                
            }
        }	

 

		private Int32? _lineNumberFilter;
        public Int32? LineNumberFilter
        {
            get
            {
                return _lineNumberFilter;
            }
            set
            {
                _lineNumberFilter = value;
				NotifyPropertyChanged(x => LineNumberFilter);
                FilterData();
                
            }
        }	

 

		private Double? _piQuantityFilter;
        public Double? PiQuantityFilter
        {
            get
            {
                return _piQuantityFilter;
            }
            set
            {
                _piQuantityFilter = value;
				NotifyPropertyChanged(x => PiQuantityFilter);
                FilterData();
                
            }
        }	

 

		private string _overShortDetailStatusFilter;
        public string OverShortDetailStatusFilter
        {
            get
            {
                return _overShortDetailStatusFilter;
            }
            set
            {
                _overShortDetailStatusFilter = value;
				NotifyPropertyChanged(x => OverShortDetailStatusFilter);
                FilterData();
                
            }
        }	

 

		private Double? _qtyAllocatedFilter;
        public Double? QtyAllocatedFilter
        {
            get
            {
                return _qtyAllocatedFilter;
            }
            set
            {
                _qtyAllocatedFilter = value;
				NotifyPropertyChanged(x => QtyAllocatedFilter);
                FilterData();
                
            }
        }	

 

		private string _allocationStatusFilter;
        public string AllocationStatusFilter
        {
            get
            {
                return _allocationStatusFilter;
            }
            set
            {
                _allocationStatusFilter = value;
				NotifyPropertyChanged(x => AllocationStatusFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			OverShortAllocationsEXes.Refresh();
			NotifyPropertyChanged(x => this.OverShortAllocationsEXes);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

					if(ReceivedQtyFilter.HasValue)
						res.Append(" && " + string.Format("ReceivedQty == {0}",  ReceivedQtyFilter.ToString()));				 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(ItemDescriptionFilter) == false)
						res.Append(" && " + string.Format("ItemDescription.Contains(\"{0}\")",  ItemDescriptionFilter));						
 

					if(CostFilter.HasValue)
						res.Append(" && " + string.Format("Cost == {0}",  CostFilter.ToString()));				 

					if(InvoiceQtyFilter.HasValue)
						res.Append(" && " + string.Format("InvoiceQty == {0}",  InvoiceQtyFilter.ToString()));				 

									if(string.IsNullOrEmpty(InvoiceNoFilter) == false)
						res.Append(" && " + string.Format("InvoiceNo.Contains(\"{0}\")",  InvoiceNoFilter));						
 

 

				if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue) res.Append(" && (");

					if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue)
						{
							if(StartInvoiceDateFilter.HasValue)
								res.Append(
                                            (Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue?"":" && ") +
                                            string.Format("InvoiceDate >= \"{0}\"",  Convert.ToDateTime(StartInvoiceDateFilter).Date.ToString("MM/dd/yyyy")));
						}

					if (Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue)
						{
							if(EndInvoiceDateFilter.HasValue)
								res.Append(" && " + string.Format("InvoiceDate <= \"{0}\"",  Convert.ToDateTime(EndInvoiceDateFilter).Date.AddHours(23).ToString("MM/dd/yyyy")));
						}

				if (Convert.ToDateTime(StartInvoiceDateFilter).Date != DateTime.MinValue &&
		        Convert.ToDateTime(EndInvoiceDateFilter).Date != DateTime.MinValue) res.Append(" )");

					if (Convert.ToDateTime(_invoiceDateFilter).Date != DateTime.MinValue)
						{
							if(InvoiceDateFilter.HasValue)
								res.Append(" && " + string.Format("InvoiceDate == \"{0}\"",  Convert.ToDateTime(InvoiceDateFilter).Date.ToString("MM/dd/yyyy")));
						}
				 

									if(string.IsNullOrEmpty(CNumberFilter) == false)
						res.Append(" && " + string.Format("CNumber.Contains(\"{0}\")",  CNumberFilter));						
 

									if(string.IsNullOrEmpty(RegistrationDateFilter) == false)
						res.Append(" && " + string.Format("RegistrationDate.Contains(\"{0}\")",  RegistrationDateFilter));						
 

					if(DurationFilter.HasValue)
						res.Append(" && " + string.Format("Duration == {0}",  DurationFilter.ToString()));				 

					if(InvoiceMonthFilter.HasValue)
						res.Append(" && " + string.Format("InvoiceMonth == {0}",  InvoiceMonthFilter.ToString()));				 

					if(AsycudaMonthFilter.HasValue)
						res.Append(" && " + string.Format("AsycudaMonth == {0}",  AsycudaMonthFilter.ToString()));				 

					if(AllocatedValueFilter.HasValue)
						res.Append(" && " + string.Format("AllocatedValue == {0}",  AllocatedValueFilter.ToString()));				 

					if(ReceivedValueFilter.HasValue)
						res.Append(" && " + string.Format("ReceivedValue == {0}",  ReceivedValueFilter.ToString()));				 

					if(InvoiceValueFilter.HasValue)
						res.Append(" && " + string.Format("InvoiceValue == {0}",  InvoiceValueFilter.ToString()));				 

					if(LineNumberFilter.HasValue)
						res.Append(" && " + string.Format("LineNumber == {0}",  LineNumberFilter.ToString()));				 

					if(PiQuantityFilter.HasValue)
						res.Append(" && " + string.Format("PiQuantity == {0}",  PiQuantityFilter.ToString()));				 

									if(string.IsNullOrEmpty(OverShortDetailStatusFilter) == false)
						res.Append(" && " + string.Format("OverShortDetailStatus.Contains(\"{0}\")",  OverShortDetailStatusFilter));						
 

					if(QtyAllocatedFilter.HasValue)
						res.Append(" && " + string.Format("QtyAllocated == {0}",  QtyAllocatedFilter.ToString()));				 

									if(string.IsNullOrEmpty(AllocationStatusFilter) == false)
						res.Append(" && " + string.Format("AllocationStatus.Contains(\"{0}\")",  AllocationStatusFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<OverShortAllocationsEX> lst = null;
            using (var ctx = new OverShortAllocationsEXRepository())
            {
                lst = await ctx.GetOverShortAllocationsEXesByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToExcel<OverShortAllocationsEXExcelLine, List<OverShortAllocationsEXExcelLine>>
            {
                dataToPrint = lst.Select(x => new OverShortAllocationsEXExcelLine
                {
 
                    ReceivedQty = x.ReceivedQty ,
                    
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    ItemDescription = x.ItemDescription ,
                    
 
                    Cost = x.Cost ,
                    
 
                    InvoiceQty = x.InvoiceQty ,
                    
 
                    InvoiceNo = x.InvoiceNo ,
                    
 
                    InvoiceDate = x.InvoiceDate ,
                    
 
                    CNumber = x.CNumber ,
                    
 
                    RegistrationDate = x.RegistrationDate ,
                    
 
                    Duration = x.Duration ,
                    
 
                    InvoiceMonth = x.InvoiceMonth ,
                    
 
                    AsycudaMonth = x.AsycudaMonth ,
                    
 
                    AllocatedValue = x.AllocatedValue ,
                    
 
                    ReceivedValue = x.ReceivedValue ,
                    
 
                    InvoiceValue = x.InvoiceValue ,
                    
 
                    LineNumber = x.LineNumber ,
                    
 
                    PiQuantity = x.PiQuantity ,
                    
 
                    OverShortDetailStatus = x.OverShortDetailStatus ,
                    
 
                    QtyAllocated = x.QtyAllocated ,
                    
 
                    AllocationStatus = x.AllocationStatus 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
                await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class OverShortAllocationsEXExcelLine
        {
		 
                    public Nullable<double> ReceivedQty { get; set; } 
                    
 
                    public string ItemNumber { get; set; } 
                    
 
                    public string ItemDescription { get; set; } 
                    
 
                    public Nullable<double> Cost { get; set; } 
                    
 
                    public Nullable<double> InvoiceQty { get; set; } 
                    
 
                    public string InvoiceNo { get; set; } 
                    
 
                    public System.DateTime InvoiceDate { get; set; } 
                    
 
                    public string CNumber { get; set; } 
                    
 
                    public string RegistrationDate { get; set; } 
                    
 
                    public Nullable<int> Duration { get; set; } 
                    
 
                    public Nullable<int> InvoiceMonth { get; set; } 
                    
 
                    public Nullable<int> AsycudaMonth { get; set; } 
                    
 
                    public Nullable<double> AllocatedValue { get; set; } 
                    
 
                    public Nullable<double> ReceivedValue { get; set; } 
                    
 
                    public Nullable<double> InvoiceValue { get; set; } 
                    
 
                    public int LineNumber { get; set; } 
                    
 
                    public Nullable<double> PiQuantity { get; set; } 
                    
 
                    public string OverShortDetailStatus { get; set; } 
                    
 
                    public double QtyAllocated { get; set; } 
                    
 
                    public string AllocationStatus { get; set; } 
                    
        }

		
    }
}
		
