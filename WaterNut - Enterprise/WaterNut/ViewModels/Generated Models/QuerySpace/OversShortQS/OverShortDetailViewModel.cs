// <autogenerated>
//   This file was generated by T4 code generator AllQuerySpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Schedulers;
using SimpleMvvmToolkit;
using System;
using System.Windows;
using System.Windows.Data;
using System.Text;
using Core.Common.UI.DataVirtualization;
using System.Collections.Generic;
using Core.Common.UI;
using Core.Common.Converters;

using OversShortQS.Client.Entities;
using OversShortQS.Client.Repositories;
//using WaterNut.Client.Repositories;


namespace WaterNut.QuerySpace.OversShortQS.ViewModels
{
    
	public partial class OverShortDetailViewModel_AutoGen : ViewModelBase<OverShortDetailViewModel_AutoGen>
	{

       private static readonly OverShortDetailViewModel_AutoGen instance;
       static OverShortDetailViewModel_AutoGen()
        {
            instance = new OverShortDetailViewModel_AutoGen();
        }

       public static OverShortDetailViewModel_AutoGen Instance
        {
            get { return instance; }
        }

       private readonly object lockObject = new object();
  
  

        public OverShortDetailViewModel_AutoGen()
        {
          
            RegisterToReceiveMessages<OverShortDetail>(MessageToken.CurrentOverShortDetailChanged, OnCurrentOverShortDetailChanged);
            RegisterToReceiveMessages(MessageToken.OverShortDetailsChanged, OnOverShortDetailsChanged);
			RegisterToReceiveMessages(MessageToken.OverShortDetailsFilterExpressionChanged, OnOverShortDetailsFilterExpressionChanged);


 			// Recieve messages for Core Current Entities Changed
 

			OverShortDetails = new VirtualList<OverShortDetail>(vloader);
			OverShortDetails.LoadingStateChanged += OverShortDetails_LoadingStateChanged;
            BindingOperations.EnableCollectionSynchronization(OverShortDetails, lockObject);
			
            OnCreated();        
            OnTotals();
        }

        partial void OnCreated();
        partial void OnTotals();

		private VirtualList<OverShortDetail> _OverShortDetails = null;
        public VirtualList<OverShortDetail> OverShortDetails
        {
            get
            {
                return _OverShortDetails;
            }
            set
            {
                _OverShortDetails = value;
            }
        }

		 private void OnOverShortDetailsFilterExpressionChanged(object sender, NotificationEventArgs e)
        {
			OverShortDetails.Refresh();
            SelectedOverShortDetails.Clear();
            NotifyPropertyChanged(x => SelectedOverShortDetails);
            BeginSendMessage(MessageToken.SelectedOverShortDetailsChanged, new NotificationEventArgs(MessageToken.SelectedOverShortDetailsChanged));
        }

		void OverShortDetails_LoadingStateChanged(object sender, EventArgs e)
        {
            switch (OverShortDetails.LoadingState)
            {
                case QueuedBackgroundWorkerState.Processing:
                    StatusModel.Timer("Getting Data...");
                    break;
                case QueuedBackgroundWorkerState.Standby: 
                    StatusModel.StopStatusUpdate();
                    NotifyPropertyChanged(x => OverShortDetails);
                    break;
                case QueuedBackgroundWorkerState.StoppedByError:
                    StatusModel.Error("OverShortDetails | Error occured..." + OverShortDetails.LastLoadingError.Message);
                    NotifyPropertyChanged(x => OverShortDetails);
                    break;
            }
           
        }

		
		public readonly OverShortDetailVirturalListLoader vloader = new OverShortDetailVirturalListLoader();

		private ObservableCollection<OverShortDetail> _selectedOverShortDetails = new ObservableCollection<OverShortDetail>();
        public ObservableCollection<OverShortDetail> SelectedOverShortDetails
        {
            get
            {
                return _selectedOverShortDetails;
            }
            set
            {
                _selectedOverShortDetails = value;
				BeginSendMessage(MessageToken.SelectedOverShortDetailsChanged,
                                    new NotificationEventArgs(MessageToken.SelectedOverShortDetailsChanged));
				 NotifyPropertyChanged(x => SelectedOverShortDetails);
            }
        }

        internal void OnCurrentOverShortDetailChanged(object sender, NotificationEventArgs<OverShortDetail> e)
        {
            if(BaseViewModel.Instance.CurrentOverShortDetail != null) BaseViewModel.Instance.CurrentOverShortDetail.PropertyChanged += CurrentOverShortDetail__propertyChanged;
           // NotifyPropertyChanged(x => this.CurrentOverShortDetail);
        }   

            void CurrentOverShortDetail__propertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
                {
                 } 
        internal void OnOverShortDetailsChanged(object sender, NotificationEventArgs e)
        {
            _OverShortDetails.Refresh();
			NotifyPropertyChanged(x => this.OverShortDetails);
        }   


 
  			// Core Current Entities Changed
			// theorticall don't need this cuz i am inheriting from core entities baseview model so changes should flow up to here
  
// Filtering Each Field except IDs
		public void ViewAll()
        {
			vloader.FilterExpression = "All";
			vloader.ClearNavigationExpression();
			_OverShortDetails.Refresh();
			NotifyPropertyChanged(x => this.OverShortDetails);
		}

		public async Task SelectAll()
        {
            IEnumerable<OverShortDetail> lst = null;
            using (var ctx = new OverShortDetailRepository())
            {
                lst = await ctx.GetOverShortDetailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
            SelectedOverShortDetails = new ObservableCollection<OverShortDetail>(lst);
        }

 

		private Double? _receivedQtyFilter;
        public Double? ReceivedQtyFilter
        {
            get
            {
                return _receivedQtyFilter;
            }
            set
            {
                _receivedQtyFilter = value;
				NotifyPropertyChanged(x => ReceivedQtyFilter);
                FilterData();
                
            }
        }	

 

		private string _itemNumberFilter;
        public string ItemNumberFilter
        {
            get
            {
                return _itemNumberFilter;
            }
            set
            {
                _itemNumberFilter = value;
				NotifyPropertyChanged(x => ItemNumberFilter);
                FilterData();
                
            }
        }	

 

		private string _itemDescriptionFilter;
        public string ItemDescriptionFilter
        {
            get
            {
                return _itemDescriptionFilter;
            }
            set
            {
                _itemDescriptionFilter = value;
				NotifyPropertyChanged(x => ItemDescriptionFilter);
                FilterData();
                
            }
        }	

 

		private Double? _costFilter;
        public Double? CostFilter
        {
            get
            {
                return _costFilter;
            }
            set
            {
                _costFilter = value;
				NotifyPropertyChanged(x => CostFilter);
                FilterData();
                
            }
        }	

 

		private Double? _invoiceQtyFilter;
        public Double? InvoiceQtyFilter
        {
            get
            {
                return _invoiceQtyFilter;
            }
            set
            {
                _invoiceQtyFilter = value;
				NotifyPropertyChanged(x => InvoiceQtyFilter);
                FilterData();
                
            }
        }	

 

		private string _statusFilter;
        public string StatusFilter
        {
            get
            {
                return _statusFilter;
            }
            set
            {
                _statusFilter = value;
				NotifyPropertyChanged(x => StatusFilter);
                FilterData();
                
            }
        }	

 
		internal bool DisableBaseFilterData = false;
        public virtual void FilterData()
	    {
	        FilterData(null);
	    }
		public void FilterData(StringBuilder res = null)
		{
		    if (DisableBaseFilterData) return;
			if(res == null) res = GetAutoPropertyFilterString();
			if (res.Length == 0 && vloader.NavigationExpression.Count != 0) res.Append("&& All");					
			if (res.Length > 0)
            {
                vloader.FilterExpression = res.ToString().Trim().Substring(2).Trim();
            }
            else
            {
                 if (vloader.FilterExpression != "All") vloader.FilterExpression = null;
            }

			OverShortDetails.Refresh();
			NotifyPropertyChanged(x => this.OverShortDetails);
		}		  



		internal virtual StringBuilder GetAutoPropertyFilterString()
		{
		var res = new StringBuilder();
 

					if(ReceivedQtyFilter.HasValue)
						res.Append(" && " + string.Format("ReceivedQty == {0}",  ReceivedQtyFilter.ToString()));				 

									if(string.IsNullOrEmpty(ItemNumberFilter) == false)
						res.Append(" && " + string.Format("ItemNumber.Contains(\"{0}\")",  ItemNumberFilter));						
 

									if(string.IsNullOrEmpty(ItemDescriptionFilter) == false)
						res.Append(" && " + string.Format("ItemDescription.Contains(\"{0}\")",  ItemDescriptionFilter));						
 

					if(CostFilter.HasValue)
						res.Append(" && " + string.Format("Cost == {0}",  CostFilter.ToString()));				 

					if(InvoiceQtyFilter.HasValue)
						res.Append(" && " + string.Format("InvoiceQty == {0}",  InvoiceQtyFilter.ToString()));				 

									if(string.IsNullOrEmpty(StatusFilter) == false)
						res.Append(" && " + string.Format("Status.Contains(\"{0}\")",  StatusFilter));						
			return res.ToString().StartsWith(" &&") || res.Length == 0 ? res:  res.Insert(0," && ");		
		}

// Send to Excel Implementation


        public async Task Send2Excel()
        {
			IEnumerable<OverShortDetail> lst = null;
            using (var ctx = new OverShortDetailRepository())
            {
                lst = await ctx.GetOverShortDetailsByExpressionNav(vloader.FilterExpression, vloader.NavigationExpression).ConfigureAwait(continueOnCapturedContext: false);
            }
             if (lst == null || !lst.Any()) 
              {
                   MessageBox.Show("No Data to Send to Excel");
                   return;
               }
            var s = new ExportToExcel<OverShortDetailExcelLine, List<OverShortDetailExcelLine>>
            {
                dataToPrint = lst.Select(x => new OverShortDetailExcelLine
                {
 
                    ReceivedQty = x.ReceivedQty ,
                    
 
                    ItemNumber = x.ItemNumber ,
                    
 
                    ItemDescription = x.ItemDescription ,
                    
 
                    Cost = x.Cost ,
                    
 
                    InvoiceQty = x.InvoiceQty ,
                    
 
                    Status = x.Status 
                    
                }).ToList()
            };
            using (var sta = new StaTaskScheduler(numberOfThreads: 1))
            {
                await Task.Factory.StartNew(s.GenerateReport, CancellationToken.None, TaskCreationOptions.None, sta).ConfigureAwait(false);
            }
        }

        public class OverShortDetailExcelLine
        {
		 
                    public Nullable<double> ReceivedQty { get; set; } 
                    
 
                    public string ItemNumber { get; set; } 
                    
 
                    public string ItemDescription { get; set; } 
                    
 
                    public Nullable<double> Cost { get; set; } 
                    
 
                    public Nullable<double> InvoiceQty { get; set; } 
                    
 
                    public string Status { get; set; } 
                    
        }

		
    }
}
		
