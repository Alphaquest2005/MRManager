// <autogenerated>
//   This file was generated by T4 code generator AllQuerySpaceViewModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Collections.Generic;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Linq;
using SimpleMvvmToolkit;
using System;
using System.ComponentModel;
using Core.Common.Data;
using Core.Common.UI.DataVirtualization;
using OversShortQS.Client.Entities;
using OversShortQS.Client.Repositories;
//using WaterNut.Client.Repositories;
using OversShortQS.Client.Entities;



namespace WaterNut.QuerySpace.OversShortQS.ViewModels
{
	 public partial class BaseViewModel : ViewModelBase<BaseViewModel> // ViewModelBase<BaseViewModel>
	{
         private static readonly BaseViewModel _instance;
         static BaseViewModel()
        {
            _instance = new BaseViewModel();
             Initialization = InitializationAsync();
        }

        public static BaseViewModel Instance
        {
            get { return _instance; }
        }

        public static Task Initialization {get; private set; }
        private static async Task InitializationAsync()
        {
                    }

 

        
        class OversShortQSOnCreated: BaseViewModel
        {
           // Load Repository
                public OversShortQSOnCreated()
                    {
                        try
                            {
                                 if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
 

                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentIDChanged, OnCurrentAsycudaDocumentIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentAsycudaDocumentItemIDChanged, OnCurrentAsycudaDocumentItemIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentInventoryItemIDChanged, OnCurrentInventoryItemIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentOverShortAllocationsEXIDChanged, OnCurrentOverShortAllocationsEXIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentOverShortDetailIDChanged, OnCurrentOverShortDetailIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentOverShortDetailAllocationIDChanged, OnCurrentOverShortDetailAllocationIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentOverShortDetailsEXIDChanged, OnCurrentOverShortDetailsEXIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentOverShortSuggestedDocumentIDChanged, OnCurrentOverShortSuggestedDocumentIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentOversShortIDChanged, OnCurrentOversShortIDChanged);
                        RegisterToReceiveMessages<string>(MessageToken.CurrentOversShortEXIDChanged, OnCurrentOversShortEXIDChanged);
       

			// Recieve messages for Current Object Changed
                        RegisterToReceiveMessages<AsycudaDocument>(MessageToken.CurrentAsycudaDocumentChanged, OnCurrentAsycudaDocumentChanged);
                        RegisterToReceiveMessages<AsycudaDocumentItem>(MessageToken.CurrentAsycudaDocumentItemChanged, OnCurrentAsycudaDocumentItemChanged);
                        RegisterToReceiveMessages<InventoryItem>(MessageToken.CurrentInventoryItemChanged, OnCurrentInventoryItemChanged);
                        RegisterToReceiveMessages<OverShortAllocationsEX>(MessageToken.CurrentOverShortAllocationsEXChanged, OnCurrentOverShortAllocationsEXChanged);
                        RegisterToReceiveMessages<OverShortDetail>(MessageToken.CurrentOverShortDetailChanged, OnCurrentOverShortDetailChanged);
                        RegisterToReceiveMessages<OverShortDetailAllocation>(MessageToken.CurrentOverShortDetailAllocationChanged, OnCurrentOverShortDetailAllocationChanged);
                        RegisterToReceiveMessages<OverShortDetailsEX>(MessageToken.CurrentOverShortDetailsEXChanged, OnCurrentOverShortDetailsEXChanged);
                        RegisterToReceiveMessages<OverShortSuggestedDocument>(MessageToken.CurrentOverShortSuggestedDocumentChanged, OnCurrentOverShortSuggestedDocumentChanged);
                        RegisterToReceiveMessages<OversShort>(MessageToken.CurrentOversShortChanged, OnCurrentOversShortChanged);
                        RegisterToReceiveMessages<OversShortEX>(MessageToken.CurrentOversShortEXChanged, OnCurrentOversShortEXChanged);
    
                // Receive messages for cached collections for purpose of refreshing cache
             

              }
            catch (Exception)
            {
                throw;
            }  
            }

        }







                        internal async void OnCurrentAsycudaDocumentIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentRepository ctx = new AsycudaDocumentRepository())
                            {
                                CurrentAsycudaDocument = await ctx.GetAsycudaDocument(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocument);
                        }

                        private  string _currentAsycudaDocumentID = "";
                        public string CurrentAsycudaDocumentID
                        {
                            get
                            {
                                return _currentAsycudaDocumentID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentID != value)
                                {
                                    _currentAsycudaDocumentID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentIDChanged, _currentAsycudaDocumentID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentID);  
                                }
                            }
                        }
                        internal async void OnCurrentAsycudaDocumentItemIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (AsycudaDocumentItemRepository ctx = new AsycudaDocumentItemRepository())
                            {
                                CurrentAsycudaDocumentItem = await ctx.GetAsycudaDocumentItem(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentAsycudaDocumentItem);
                        }

                        private  string _currentAsycudaDocumentItemID = "";
                        public string CurrentAsycudaDocumentItemID
                        {
                            get
                            {
                                return _currentAsycudaDocumentItemID;
                            }
                            set
                            {
                                if (_currentAsycudaDocumentItemID != value)
                                {
                                    _currentAsycudaDocumentItemID = value;
                                    if (!string.IsNullOrEmpty(_currentAsycudaDocumentItemID)) BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentAsycudaDocumentItemIDChanged, _currentAsycudaDocumentItemID));
                                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItemID);  
                                }
                            }
                        }
                        internal async void OnCurrentInventoryItemIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (InventoryItemRepository ctx = new InventoryItemRepository())
                            {
                                CurrentInventoryItem = await ctx.GetInventoryItem(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentInventoryItem);
                        }

                        private  string _currentInventoryItemID = "";
                        public string CurrentInventoryItemID
                        {
                            get
                            {
                                return _currentInventoryItemID;
                            }
                            set
                            {
                                if (_currentInventoryItemID != value)
                                {
                                    _currentInventoryItemID = value;
                                    if (!string.IsNullOrEmpty(_currentInventoryItemID)) BeginSendMessage(MessageToken.CurrentInventoryItemIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentInventoryItemIDChanged, _currentInventoryItemID));
                                    NotifyPropertyChanged(x => this.CurrentInventoryItemID);  
                                }
                            }
                        }
                        internal async void OnCurrentOverShortAllocationsEXIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (OverShortAllocationsEXRepository ctx = new OverShortAllocationsEXRepository())
                            {
                                CurrentOverShortAllocationsEX = await ctx.GetOverShortAllocationsEX(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentOverShortAllocationsEX);
                        }

                        private  string _currentOverShortAllocationsEXID = "";
                        public string CurrentOverShortAllocationsEXID
                        {
                            get
                            {
                                return _currentOverShortAllocationsEXID;
                            }
                            set
                            {
                                if (_currentOverShortAllocationsEXID != value)
                                {
                                    _currentOverShortAllocationsEXID = value;
                                    if (!string.IsNullOrEmpty(_currentOverShortAllocationsEXID)) BeginSendMessage(MessageToken.CurrentOverShortAllocationsEXIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentOverShortAllocationsEXIDChanged, _currentOverShortAllocationsEXID));
                                    NotifyPropertyChanged(x => this.CurrentOverShortAllocationsEXID);  
                                }
                            }
                        }
                        internal async void OnCurrentOverShortDetailIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (OverShortDetailRepository ctx = new OverShortDetailRepository())
                            {
                                CurrentOverShortDetail = await ctx.GetOverShortDetail(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentOverShortDetail);
                        }

                        private  string _currentOverShortDetailID = "";
                        public string CurrentOverShortDetailID
                        {
                            get
                            {
                                return _currentOverShortDetailID;
                            }
                            set
                            {
                                if (_currentOverShortDetailID != value)
                                {
                                    _currentOverShortDetailID = value;
                                    if (!string.IsNullOrEmpty(_currentOverShortDetailID)) BeginSendMessage(MessageToken.CurrentOverShortDetailIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentOverShortDetailIDChanged, _currentOverShortDetailID));
                                    NotifyPropertyChanged(x => this.CurrentOverShortDetailID);  
                                }
                            }
                        }
                        internal async void OnCurrentOverShortDetailAllocationIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (OverShortDetailAllocationRepository ctx = new OverShortDetailAllocationRepository())
                            {
                                CurrentOverShortDetailAllocation = await ctx.GetOverShortDetailAllocation(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentOverShortDetailAllocation);
                        }

                        private  string _currentOverShortDetailAllocationID = "";
                        public string CurrentOverShortDetailAllocationID
                        {
                            get
                            {
                                return _currentOverShortDetailAllocationID;
                            }
                            set
                            {
                                if (_currentOverShortDetailAllocationID != value)
                                {
                                    _currentOverShortDetailAllocationID = value;
                                    if (!string.IsNullOrEmpty(_currentOverShortDetailAllocationID)) BeginSendMessage(MessageToken.CurrentOverShortDetailAllocationIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentOverShortDetailAllocationIDChanged, _currentOverShortDetailAllocationID));
                                    NotifyPropertyChanged(x => this.CurrentOverShortDetailAllocationID);  
                                }
                            }
                        }
                        internal async void OnCurrentOverShortDetailsEXIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (OverShortDetailsEXRepository ctx = new OverShortDetailsEXRepository())
                            {
                                CurrentOverShortDetailsEX = await ctx.GetOverShortDetailsEX(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentOverShortDetailsEX);
                        }

                        private  string _currentOverShortDetailsEXID = "";
                        public string CurrentOverShortDetailsEXID
                        {
                            get
                            {
                                return _currentOverShortDetailsEXID;
                            }
                            set
                            {
                                if (_currentOverShortDetailsEXID != value)
                                {
                                    _currentOverShortDetailsEXID = value;
                                    if (!string.IsNullOrEmpty(_currentOverShortDetailsEXID)) BeginSendMessage(MessageToken.CurrentOverShortDetailsEXIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentOverShortDetailsEXIDChanged, _currentOverShortDetailsEXID));
                                    NotifyPropertyChanged(x => this.CurrentOverShortDetailsEXID);  
                                }
                            }
                        }
                        internal async void OnCurrentOverShortSuggestedDocumentIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (OverShortSuggestedDocumentRepository ctx = new OverShortSuggestedDocumentRepository())
                            {
                                CurrentOverShortSuggestedDocument = await ctx.GetOverShortSuggestedDocument(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentOverShortSuggestedDocument);
                        }

                        private  string _currentOverShortSuggestedDocumentID = "";
                        public string CurrentOverShortSuggestedDocumentID
                        {
                            get
                            {
                                return _currentOverShortSuggestedDocumentID;
                            }
                            set
                            {
                                if (_currentOverShortSuggestedDocumentID != value)
                                {
                                    _currentOverShortSuggestedDocumentID = value;
                                    if (!string.IsNullOrEmpty(_currentOverShortSuggestedDocumentID)) BeginSendMessage(MessageToken.CurrentOverShortSuggestedDocumentIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentOverShortSuggestedDocumentIDChanged, _currentOverShortSuggestedDocumentID));
                                    NotifyPropertyChanged(x => this.CurrentOverShortSuggestedDocumentID);  
                                }
                            }
                        }
                        internal async void OnCurrentOversShortIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (OversShortRepository ctx = new OversShortRepository())
                            {
                                CurrentOversShort = await ctx.GetOversShort(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentOversShort);
                        }

                        private  string _currentOversShortID = "";
                        public string CurrentOversShortID
                        {
                            get
                            {
                                return _currentOversShortID;
                            }
                            set
                            {
                                if (_currentOversShortID != value)
                                {
                                    _currentOversShortID = value;
                                    if (!string.IsNullOrEmpty(_currentOversShortID)) BeginSendMessage(MessageToken.CurrentOversShortIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentOversShortIDChanged, _currentOversShortID));
                                    NotifyPropertyChanged(x => this.CurrentOversShortID);  
                                }
                            }
                        }
                        internal async void OnCurrentOversShortEXIDChanged(object sender, NotificationEventArgs<string> e)
                        {
                            using (OversShortEXRepository ctx = new OversShortEXRepository())
                            {
                                CurrentOversShortEX = await ctx.GetOversShortEX(e.Data).ConfigureAwait(continueOnCapturedContext: false);
                            }
                            NotifyPropertyChanged(m => CurrentOversShortEX);
                        }

                        private  string _currentOversShortEXID = "";
                        public string CurrentOversShortEXID
                        {
                            get
                            {
                                return _currentOversShortEXID;
                            }
                            set
                            {
                                if (_currentOversShortEXID != value)
                                {
                                    _currentOversShortEXID = value;
                                    if (!string.IsNullOrEmpty(_currentOversShortEXID)) BeginSendMessage(MessageToken.CurrentOversShortEXIDChanged,
                                                     new NotificationEventArgs<string>(MessageToken.CurrentOversShortEXIDChanged, _currentOversShortEXID));
                                    NotifyPropertyChanged(x => this.CurrentOversShortEXID);  
                                }
                            }
                        }
 



                     
       

        internal void OnCurrentAsycudaDocumentChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocument> e)
        {
            //CurrentAsycudaDocument = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocument);
        }

        private  AsycudaDocument _currentAsycudaDocument;
        public AsycudaDocument CurrentAsycudaDocument
        {
            get
            {
                return _currentAsycudaDocument;
            }
            set
            {
                if (_currentAsycudaDocument != value)
                {
                    _currentAsycudaDocument = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentChanged,
                                                     new NotificationEventArgs<AsycudaDocument>(MessageToken.CurrentAsycudaDocumentChanged, _currentAsycudaDocument)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocument);    
                    // all current navigation properties = null
                 CurrentAsycudaDocumentItem = null;
   
                }
            }
        }

		VirtualListItem<AsycudaDocument> _vcurrentAsycudaDocument;
        public VirtualListItem<AsycudaDocument> VCurrentAsycudaDocument
        {
            get
            {
                return _vcurrentAsycudaDocument;
            }
            set
            {
                if (_vcurrentAsycudaDocument != value)
                {
                    _vcurrentAsycudaDocument = value;
					if(_vcurrentAsycudaDocument != null) CurrentAsycudaDocument = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocument);                    
                }
            }
        }



                     
       

        internal void OnCurrentAsycudaDocumentItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<AsycudaDocumentItem> e)
        {
            //CurrentAsycudaDocumentItem = e.Data;
            NotifyPropertyChanged(m => this.CurrentAsycudaDocumentItem);
        }

        private  AsycudaDocumentItem _currentAsycudaDocumentItem;
        public AsycudaDocumentItem CurrentAsycudaDocumentItem
        {
            get
            {
                return _currentAsycudaDocumentItem;
            }
            set
            {
                if (_currentAsycudaDocumentItem != value)
                {
                    _currentAsycudaDocumentItem = value;
                    BeginSendMessage(MessageToken.CurrentAsycudaDocumentItemChanged,
                                                     new NotificationEventArgs<AsycudaDocumentItem>(MessageToken.CurrentAsycudaDocumentItemChanged, _currentAsycudaDocumentItem)); 
                    NotifyPropertyChanged(x => this.CurrentAsycudaDocumentItem);    
                    // all current navigation properties = null
                 CurrentOverShortAllocationsEX = null;
   
                }
            }
        }

		VirtualListItem<AsycudaDocumentItem> _vcurrentAsycudaDocumentItem;
        public VirtualListItem<AsycudaDocumentItem> VCurrentAsycudaDocumentItem
        {
            get
            {
                return _vcurrentAsycudaDocumentItem;
            }
            set
            {
                if (_vcurrentAsycudaDocumentItem != value)
                {
                    _vcurrentAsycudaDocumentItem = value;
					if(_vcurrentAsycudaDocumentItem != null) CurrentAsycudaDocumentItem = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentAsycudaDocumentItem);                    
                }
            }
        }



                     
       

        internal void OnCurrentInventoryItemChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<InventoryItem> e)
        {
            //CurrentInventoryItem = e.Data;
            NotifyPropertyChanged(m => this.CurrentInventoryItem);
        }

        private  InventoryItem _currentInventoryItem;
        public InventoryItem CurrentInventoryItem
        {
            get
            {
                return _currentInventoryItem;
            }
            set
            {
                if (_currentInventoryItem != value)
                {
                    _currentInventoryItem = value;
                    BeginSendMessage(MessageToken.CurrentInventoryItemChanged,
                                                     new NotificationEventArgs<InventoryItem>(MessageToken.CurrentInventoryItemChanged, _currentInventoryItem)); 
                    NotifyPropertyChanged(x => this.CurrentInventoryItem);    
                    // all current navigation properties = null
                 CurrentOverShortDetailsEX = null;
   
                }
            }
        }

		VirtualListItem<InventoryItem> _vcurrentInventoryItem;
        public VirtualListItem<InventoryItem> VCurrentInventoryItem
        {
            get
            {
                return _vcurrentInventoryItem;
            }
            set
            {
                if (_vcurrentInventoryItem != value)
                {
                    _vcurrentInventoryItem = value;
					if(_vcurrentInventoryItem != null) CurrentInventoryItem = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentInventoryItem);                    
                }
            }
        }



                     
       

        internal void OnCurrentOverShortAllocationsEXChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OverShortAllocationsEX> e)
        {
            //CurrentOverShortAllocationsEX = e.Data;
            NotifyPropertyChanged(m => this.CurrentOverShortAllocationsEX);
        }

        private  OverShortAllocationsEX _currentOverShortAllocationsEX;
        public OverShortAllocationsEX CurrentOverShortAllocationsEX
        {
            get
            {
                return _currentOverShortAllocationsEX;
            }
            set
            {
                if (_currentOverShortAllocationsEX != value)
                {
                    _currentOverShortAllocationsEX = value;
                    BeginSendMessage(MessageToken.CurrentOverShortAllocationsEXChanged,
                                                     new NotificationEventArgs<OverShortAllocationsEX>(MessageToken.CurrentOverShortAllocationsEXChanged, _currentOverShortAllocationsEX)); 
                    NotifyPropertyChanged(x => this.CurrentOverShortAllocationsEX);    
                    // all current navigation properties = null
                 CurrentOverShortDetailAllocation = null;
   
                }
            }
        }

		VirtualListItem<OverShortAllocationsEX> _vcurrentOverShortAllocationsEX;
        public VirtualListItem<OverShortAllocationsEX> VCurrentOverShortAllocationsEX
        {
            get
            {
                return _vcurrentOverShortAllocationsEX;
            }
            set
            {
                if (_vcurrentOverShortAllocationsEX != value)
                {
                    _vcurrentOverShortAllocationsEX = value;
					if(_vcurrentOverShortAllocationsEX != null) CurrentOverShortAllocationsEX = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentOverShortAllocationsEX);                    
                }
            }
        }



                     
       

        internal void OnCurrentOverShortDetailChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OverShortDetail> e)
        {
            //CurrentOverShortDetail = e.Data;
            NotifyPropertyChanged(m => this.CurrentOverShortDetail);
        }

        private  OverShortDetail _currentOverShortDetail;
        public OverShortDetail CurrentOverShortDetail
        {
            get
            {
                return _currentOverShortDetail;
            }
            set
            {
                if (_currentOverShortDetail != value)
                {
                    _currentOverShortDetail = value;
                    BeginSendMessage(MessageToken.CurrentOverShortDetailChanged,
                                                     new NotificationEventArgs<OverShortDetail>(MessageToken.CurrentOverShortDetailChanged, _currentOverShortDetail)); 
                    NotifyPropertyChanged(x => this.CurrentOverShortDetail);    
                    // all current navigation properties = null
                 CurrentOverShortDetailAllocation = null;
   
                }
            }
        }

		VirtualListItem<OverShortDetail> _vcurrentOverShortDetail;
        public VirtualListItem<OverShortDetail> VCurrentOverShortDetail
        {
            get
            {
                return _vcurrentOverShortDetail;
            }
            set
            {
                if (_vcurrentOverShortDetail != value)
                {
                    _vcurrentOverShortDetail = value;
					if(_vcurrentOverShortDetail != null) CurrentOverShortDetail = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentOverShortDetail);                    
                }
            }
        }



                     
       

        internal void OnCurrentOverShortDetailAllocationChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OverShortDetailAllocation> e)
        {
            //CurrentOverShortDetailAllocation = e.Data;
            NotifyPropertyChanged(m => this.CurrentOverShortDetailAllocation);
        }

        private  OverShortDetailAllocation _currentOverShortDetailAllocation;
        public OverShortDetailAllocation CurrentOverShortDetailAllocation
        {
            get
            {
                return _currentOverShortDetailAllocation;
            }
            set
            {
                if (_currentOverShortDetailAllocation != value)
                {
                    _currentOverShortDetailAllocation = value;
                    BeginSendMessage(MessageToken.CurrentOverShortDetailAllocationChanged,
                                                     new NotificationEventArgs<OverShortDetailAllocation>(MessageToken.CurrentOverShortDetailAllocationChanged, _currentOverShortDetailAllocation)); 
                    NotifyPropertyChanged(x => this.CurrentOverShortDetailAllocation);    
                    // all current navigation properties = null
                 CurrentOverShortAllocationsEX = null;
   
                }
            }
        }

		VirtualListItem<OverShortDetailAllocation> _vcurrentOverShortDetailAllocation;
        public VirtualListItem<OverShortDetailAllocation> VCurrentOverShortDetailAllocation
        {
            get
            {
                return _vcurrentOverShortDetailAllocation;
            }
            set
            {
                if (_vcurrentOverShortDetailAllocation != value)
                {
                    _vcurrentOverShortDetailAllocation = value;
					if(_vcurrentOverShortDetailAllocation != null) CurrentOverShortDetailAllocation = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentOverShortDetailAllocation);                    
                }
            }
        }



                     
       

        internal void OnCurrentOverShortDetailsEXChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OverShortDetailsEX> e)
        {
            //CurrentOverShortDetailsEX = e.Data;
            NotifyPropertyChanged(m => this.CurrentOverShortDetailsEX);
        }

        private  OverShortDetailsEX _currentOverShortDetailsEX;
        public OverShortDetailsEX CurrentOverShortDetailsEX
        {
            get
            {
                return _currentOverShortDetailsEX;
            }
            set
            {
                if (_currentOverShortDetailsEX != value)
                {
                    _currentOverShortDetailsEX = value;
                    BeginSendMessage(MessageToken.CurrentOverShortDetailsEXChanged,
                                                     new NotificationEventArgs<OverShortDetailsEX>(MessageToken.CurrentOverShortDetailsEXChanged, _currentOverShortDetailsEX)); 
                    NotifyPropertyChanged(x => this.CurrentOverShortDetailsEX);    
                    // all current navigation properties = null
             
                    CurrentOverShortDetail = _currentOverShortDetailsEX;
                 CurrentOverShortAllocationsEX = null;
   
                }
            }
        }

		VirtualListItem<OverShortDetailsEX> _vcurrentOverShortDetailsEX;
        public VirtualListItem<OverShortDetailsEX> VCurrentOverShortDetailsEX
        {
            get
            {
                return _vcurrentOverShortDetailsEX;
            }
            set
            {
                if (_vcurrentOverShortDetailsEX != value)
                {
                    _vcurrentOverShortDetailsEX = value;
					if(_vcurrentOverShortDetailsEX != null) CurrentOverShortDetailsEX = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentOverShortDetailsEX);                    
                }
            }
        }



                     
       

        internal void OnCurrentOverShortSuggestedDocumentChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OverShortSuggestedDocument> e)
        {
            //CurrentOverShortSuggestedDocument = e.Data;
            NotifyPropertyChanged(m => this.CurrentOverShortSuggestedDocument);
        }

        private  OverShortSuggestedDocument _currentOverShortSuggestedDocument;
        public OverShortSuggestedDocument CurrentOverShortSuggestedDocument
        {
            get
            {
                return _currentOverShortSuggestedDocument;
            }
            set
            {
                if (_currentOverShortSuggestedDocument != value)
                {
                    _currentOverShortSuggestedDocument = value;
                    BeginSendMessage(MessageToken.CurrentOverShortSuggestedDocumentChanged,
                                                     new NotificationEventArgs<OverShortSuggestedDocument>(MessageToken.CurrentOverShortSuggestedDocumentChanged, _currentOverShortSuggestedDocument)); 
                    NotifyPropertyChanged(x => this.CurrentOverShortSuggestedDocument);    
                    // all current navigation properties = null
                 CurrentOversShortEX = null;
   
                }
            }
        }

		VirtualListItem<OverShortSuggestedDocument> _vcurrentOverShortSuggestedDocument;
        public VirtualListItem<OverShortSuggestedDocument> VCurrentOverShortSuggestedDocument
        {
            get
            {
                return _vcurrentOverShortSuggestedDocument;
            }
            set
            {
                if (_vcurrentOverShortSuggestedDocument != value)
                {
                    _vcurrentOverShortSuggestedDocument = value;
					if(_vcurrentOverShortSuggestedDocument != null) CurrentOverShortSuggestedDocument = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentOverShortSuggestedDocument);                    
                }
            }
        }



                     
       

        internal void OnCurrentOversShortChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OversShort> e)
        {
            //CurrentOversShort = e.Data;
            NotifyPropertyChanged(m => this.CurrentOversShort);
        }

        private  OversShort _currentOversShort;
        public OversShort CurrentOversShort
        {
            get
            {
                return _currentOversShort;
            }
            set
            {
                if (_currentOversShort != value)
                {
                    _currentOversShort = value;
                    BeginSendMessage(MessageToken.CurrentOversShortChanged,
                                                     new NotificationEventArgs<OversShort>(MessageToken.CurrentOversShortChanged, _currentOversShort)); 
                    NotifyPropertyChanged(x => this.CurrentOversShort);    
                    // all current navigation properties = null
   
                }
            }
        }

		VirtualListItem<OversShort> _vcurrentOversShort;
        public VirtualListItem<OversShort> VCurrentOversShort
        {
            get
            {
                return _vcurrentOversShort;
            }
            set
            {
                if (_vcurrentOversShort != value)
                {
                    _vcurrentOversShort = value;
					if(_vcurrentOversShort != null) CurrentOversShort = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentOversShort);                    
                }
            }
        }



                     
       

        internal void OnCurrentOversShortEXChanged(object sender, SimpleMvvmToolkit.NotificationEventArgs<OversShortEX> e)
        {
            //CurrentOversShortEX = e.Data;
            NotifyPropertyChanged(m => this.CurrentOversShortEX);
        }

        private  OversShortEX _currentOversShortEX;
        public OversShortEX CurrentOversShortEX
        {
            get
            {
                return _currentOversShortEX;
            }
            set
            {
                if (_currentOversShortEX != value)
                {
                    _currentOversShortEX = value;
                    BeginSendMessage(MessageToken.CurrentOversShortEXChanged,
                                                     new NotificationEventArgs<OversShortEX>(MessageToken.CurrentOversShortEXChanged, _currentOversShortEX)); 
                    NotifyPropertyChanged(x => this.CurrentOversShortEX);    
                    // all current navigation properties = null
             
                    CurrentOversShort = _currentOversShortEX;
                 CurrentOverShortDetailsEX = null;
                 CurrentOverShortSuggestedDocument = null;
   
                }
            }
        }

		VirtualListItem<OversShortEX> _vcurrentOversShortEX;
        public VirtualListItem<OversShortEX> VCurrentOversShortEX
        {
            get
            {
                return _vcurrentOversShortEX;
            }
            set
            {
                if (_vcurrentOversShortEX != value)
                {
                    _vcurrentOversShortEX = value;
					if(_vcurrentOversShortEX != null) CurrentOversShortEX = value.Data;
                    NotifyPropertyChanged(x => this.VCurrentOversShortEX);                    
                }
            }
        }






        static OversShortQSOnCreated newOversShortQSOnCreated = new OversShortQSOnCreated();
    }		
}
