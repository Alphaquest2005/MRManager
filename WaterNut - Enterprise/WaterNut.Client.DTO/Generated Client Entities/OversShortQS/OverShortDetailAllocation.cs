// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;
using TrackableEntities;
using TrackableEntities.Client;
using Core.Common.Client.DTO;

namespace OversShortQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class OverShortDetailAllocation : BaseEntity<OverShortDetailAllocation> , ITrackable, IEquatable<OverShortDetailAllocation>
    {
        [DataMember]
        public int OverShortDetailId
		{ 
		    get { return _OverShortDetailId; }
			set
			{
			    if (value == _OverShortDetailId) return;
				_OverShortDetailId = value;
				NotifyPropertyChanged();//m => this.OverShortDetailId
			}
		}
        private int _OverShortDetailId;

        [DataMember]
        public int Item_Id
		{ 
		    get { return _Item_Id; }
			set
			{
			    if (value == _Item_Id) return;
				_Item_Id = value;
				NotifyPropertyChanged();//m => this.Item_Id
			}
		}
        private int _Item_Id;

        [DataMember]
        public double QtyAllocated
		{ 
		    get { return _QtyAllocated; }
			set
			{
			    if (value == _QtyAllocated) return;
				_QtyAllocated = value;
				NotifyPropertyChanged();//m => this.QtyAllocated
			}
		}
        private double _QtyAllocated;

        [DataMember]
        public string Status
		{ 
		    get { return _Status; }
			set
			{
			    if (value == _Status) return;
				_Status = value;
				NotifyPropertyChanged();//m => this.Status
			}
		}
        private string _Status;

        [DataMember]
        public int OverShortAllocationId
		{ 
		    get { return _OverShortAllocationId; }
			set
			{
			    if (value == _OverShortAllocationId) return;
				_OverShortAllocationId = value;
				NotifyPropertyChanged();//m => this.OverShortAllocationId
			}
		}
        private int _OverShortAllocationId;

       
        [DataMember]
        public OverShortAllocationsEX EX
		{
		    get { return _EX; }
			set
			{
			    if (value == _EX) return;
				_EX = value;
                EXChangeTracker = _EX == null ? null
                    : new ChangeTrackingCollection<OverShortAllocationsEX> { _EX };
				NotifyPropertyChanged();//m => this.EX
			}
		}
        private OverShortAllocationsEX _EX;
        private ChangeTrackingCollection<OverShortAllocationsEX> EXChangeTracker { get; set; }

        [DataMember]
        public OverShortDetail OverShortDetail
		{
		    get { return _OverShortDetail; }
			set
			{
			    if (value == _OverShortDetail) return;
				_OverShortDetail = value;
                OverShortDetailChangeTracker = _OverShortDetail == null ? null
                    : new ChangeTrackingCollection<OverShortDetail> { _OverShortDetail };
				NotifyPropertyChanged();//m => this.OverShortDetail
			}
		}
        private OverShortDetail _OverShortDetail;
        private ChangeTrackingCollection<OverShortDetail> OverShortDetailChangeTracker { get; set; }

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<OverShortDetailAllocation>.Equals(OverShortDetailAllocation other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}



