// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;
using TrackableEntities;
using TrackableEntities.Client;
using Core.Common.Client.DTO;

namespace OversShortQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class OverShortDetailsEX : OverShortDetail
    {
        [DataMember]
        public Nullable<double> ReceivedValue
		{ 
		    get { return _ReceivedValue; }
			set
			{
			    if (value == _ReceivedValue) return;
				_ReceivedValue = value;
				NotifyPropertyChanged();//m => this.ReceivedValue
			}
		}
        private Nullable<double> _ReceivedValue;

        [DataMember]
        public Nullable<double> InvoiceValue
		{ 
		    get { return _InvoiceValue; }
			set
			{
			    if (value == _InvoiceValue) return;
				_InvoiceValue = value;
				NotifyPropertyChanged();//m => this.InvoiceValue
			}
		}
        private Nullable<double> _InvoiceValue;

       
        [DataMember]
        public OversShortEX OversShortEX
		{
		    get { return _OversShortEX; }
			set
			{
			    if (value == _OversShortEX) return;
				_OversShortEX = value;
                OversShortEXChangeTracker = _OversShortEX == null ? null
                    : new ChangeTrackingCollection<OversShortEX> { _OversShortEX };
				NotifyPropertyChanged();//m => this.OversShortEX
			}
		}
        private OversShortEX _OversShortEX;
        private ChangeTrackingCollection<OversShortEX> OversShortEXChangeTracker { get; set; }

        [DataMember]
        public InventoryItem InventoryItem
		{
		    get { return _InventoryItem; }
			set
			{
			    if (value == _InventoryItem) return;
				_InventoryItem = value;
                InventoryItemChangeTracker = _InventoryItem == null ? null
                    : new ChangeTrackingCollection<InventoryItem> { _InventoryItem };
				NotifyPropertyChanged();//m => this.InventoryItem
			}
		}
        private InventoryItem _InventoryItem;
        private ChangeTrackingCollection<InventoryItem> InventoryItemChangeTracker { get; set; }

        [DataMember]
        public ChangeTrackingCollection<OverShortAllocationsEX> OverShortAllocationsEXes
		{
		    get { return _OverShortAllocationsEXes; }
			set
			{
			    if (Equals(value, _OverShortAllocationsEXes)) return;
				_OverShortAllocationsEXes = value;
				NotifyPropertyChanged();//m => this.OverShortAllocationsEXes
			}
		}
        private ChangeTrackingCollection<OverShortAllocationsEX> _OverShortAllocationsEXes = new ChangeTrackingCollection<OverShortAllocationsEX>();

    }
}



