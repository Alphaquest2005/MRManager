// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;
using TrackableEntities;
using TrackableEntities.Client;
using Core.Common.Client.DTO;

namespace OversShortQS.Client.DTO
{

   // [JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class OverShortDetail : BaseEntity<OverShortDetail> , ITrackable, IEquatable<OverShortDetail>
    {
        [DataMember]
        public int OverShortDetailId
		{ 
		    get { return _OverShortDetailId; }
			set
			{
			    if (value == _OverShortDetailId) return;
				_OverShortDetailId = value;
				NotifyPropertyChanged();//m => this.OverShortDetailId
			}
		}
        private int _OverShortDetailId;

        [DataMember]
        public int OversShortsId
		{ 
		    get { return _OversShortsId; }
			set
			{
			    if (value == _OversShortsId) return;
				_OversShortsId = value;
				NotifyPropertyChanged();//m => this.OversShortsId
			}
		}
        private int _OversShortsId;

        [DataMember]
        public Nullable<double> ReceivedQty
		{ 
		    get { return _ReceivedQty; }
			set
			{
			    if (value == _ReceivedQty) return;
				_ReceivedQty = value;
				NotifyPropertyChanged();//m => this.ReceivedQty
			}
		}
        private Nullable<double> _ReceivedQty;

        [DataMember]
        public string ItemNumber
		{ 
		    get { return _ItemNumber; }
			set
			{
			    if (value == _ItemNumber) return;
				_ItemNumber = value;
				NotifyPropertyChanged();//m => this.ItemNumber
			}
		}
        private string _ItemNumber;

        [DataMember]
        public string ItemDescription
		{ 
		    get { return _ItemDescription; }
			set
			{
			    if (value == _ItemDescription) return;
				_ItemDescription = value;
				NotifyPropertyChanged();//m => this.ItemDescription
			}
		}
        private string _ItemDescription;

        [DataMember]
        public Nullable<double> Cost
		{ 
		    get { return _Cost; }
			set
			{
			    if (value == _Cost) return;
				_Cost = value;
				NotifyPropertyChanged();//m => this.Cost
			}
		}
        private Nullable<double> _Cost;

        [DataMember]
        public Nullable<double> InvoiceQty
		{ 
		    get { return _InvoiceQty; }
			set
			{
			    if (value == _InvoiceQty) return;
				_InvoiceQty = value;
				NotifyPropertyChanged();//m => this.InvoiceQty
			}
		}
        private Nullable<double> _InvoiceQty;

        [DataMember]
        public string Status
		{ 
		    get { return _Status; }
			set
			{
			    if (value == _Status) return;
				_Status = value;
				NotifyPropertyChanged();//m => this.Status
			}
		}
        private string _Status;

       
        [DataMember]
        public ChangeTrackingCollection<OverShortDetailAllocation> OverShortDetailAllocations
		{
		    get { return _OverShortDetailAllocations; }
			set
			{
			    if (Equals(value, _OverShortDetailAllocations)) return;
				_OverShortDetailAllocations = value;
				NotifyPropertyChanged();//m => this.OverShortDetailAllocations
			}
		}
        private ChangeTrackingCollection<OverShortDetailAllocation> _OverShortDetailAllocations = new ChangeTrackingCollection<OverShortDetailAllocation>();

   //     [DataMember]
   //     public TrackingState TrackingState { get; set; }

   //     [DataMember]
   //     public ICollection<string> ModifiedProperties { get; set; }
        
    //  [DataMember]//JsonProperty, 
    //	private Guid EntityIdentifier { get; set; }
    
    //	[DataMember]//JsonProperty, 
    //	private Guid _entityIdentity = default(Guid);
    
    	bool IEquatable<OverShortDetail>.Equals(OverShortDetail other)
    	{
    		if (EntityIdentifier != default(Guid))
    			return EntityIdentifier == other.EntityIdentifier;
    		return false;
    	}
    }
}



