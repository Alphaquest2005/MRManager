// <autogenerated>
//   This file was generated by T4 code generator AllBusinessEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
//using Newtonsoft.Json;
using TrackableEntities;
using Core.Common.Business.Entities;


namespace OversShortQS.Business.Entities
{
    //[JsonObject(IsReference = true)]
    [DataContract(IsReference = true, Namespace="http://www.insight-software.com/WaterNut")]
    public partial class AsycudaDocumentItem : BaseEntity<AsycudaDocumentItem> , ITrackable
    {
        partial void AutoGenStartUp() //AsycudaDocumentItem()
        {
            this.OverShortAllocationsEXes = new List<OverShortAllocationsEX>();
        }

        [DataMember]
        public int Item_Id 
        {
            get
            {
                return _item_id;
            }
            set
            {
                _item_id = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        int _item_id;
        [DataMember]
        public int AsycudaDocumentId 
        {
            get
            {
                return _asycudadocumentid;
            }
            set
            {
                _asycudadocumentid = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        int _asycudadocumentid;
        [DataMember]
        public Nullable<int> EntryDataDetailsId 
        {
            get
            {
                return _entrydatadetailsid;
            }
            set
            {
                _entrydatadetailsid = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<int> _entrydatadetailsid;
        [DataMember]
        public int LineNumber 
        {
            get
            {
                return _linenumber;
            }
            set
            {
                _linenumber = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        int _linenumber;
        [DataMember]
        public Nullable<bool> IsAssessed 
        {
            get
            {
                return _isassessed;
            }
            set
            {
                _isassessed = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<bool> _isassessed;
        [DataMember]
        public Nullable<bool> DoNotAllocate 
        {
            get
            {
                return _donotallocate;
            }
            set
            {
                _donotallocate = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<bool> _donotallocate;
        [DataMember]
        public Nullable<bool> DoNotEX 
        {
            get
            {
                return _donotex;
            }
            set
            {
                _donotex = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<bool> _donotex;
        [DataMember]
        public Nullable<bool> AttributeOnlyAllocation 
        {
            get
            {
                return _attributeonlyallocation;
            }
            set
            {
                _attributeonlyallocation = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<bool> _attributeonlyallocation;
        [DataMember]
        public string Description_of_goods 
        {
            get
            {
                return _description_of_goods;
            }
            set
            {
                _description_of_goods = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _description_of_goods;
        [DataMember]
        public string Commercial_Description 
        {
            get
            {
                return _commercial_description;
            }
            set
            {
                _commercial_description = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _commercial_description;
        [DataMember]
        public double Gross_weight_itm 
        {
            get
            {
                return _gross_weight_itm;
            }
            set
            {
                _gross_weight_itm = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        double _gross_weight_itm;
        [DataMember]
        public Nullable<double> Net_weight_itm 
        {
            get
            {
                return _net_weight_itm;
            }
            set
            {
                _net_weight_itm = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _net_weight_itm;
        [DataMember]
        public Nullable<double> Item_price 
        {
            get
            {
                return _item_price;
            }
            set
            {
                _item_price = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _item_price;
        [DataMember]
        public Nullable<double> ItemQuantity 
        {
            get
            {
                return _itemquantity;
            }
            set
            {
                _itemquantity = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _itemquantity;
        [DataMember]
        public string Suppplementary_unit_code 
        {
            get
            {
                return _suppplementary_unit_code;
            }
            set
            {
                _suppplementary_unit_code = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _suppplementary_unit_code;
        [DataMember]
        public string ItemNumber 
        {
            get
            {
                return _itemnumber;
            }
            set
            {
                _itemnumber = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _itemnumber;
        [DataMember]
        public string TariffCode 
        {
            get
            {
                return _tariffcode;
            }
            set
            {
                _tariffcode = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _tariffcode;
        [DataMember]
        public Nullable<bool> TariffCodeLicenseRequired 
        {
            get
            {
                return _tariffcodelicenserequired;
            }
            set
            {
                _tariffcodelicenserequired = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<bool> _tariffcodelicenserequired;
        [DataMember]
        public Nullable<bool> TariffCategoryLicenseRequired 
        {
            get
            {
                return _tariffcategorylicenserequired;
            }
            set
            {
                _tariffcategorylicenserequired = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<bool> _tariffcategorylicenserequired;
        [DataMember]
        public string TariffCodeDescription 
        {
            get
            {
                return _tariffcodedescription;
            }
            set
            {
                _tariffcodedescription = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        string _tariffcodedescription;
        [DataMember]
        public Nullable<double> DutyLiability 
        {
            get
            {
                return _dutyliability;
            }
            set
            {
                _dutyliability = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _dutyliability;
        [DataMember]
        public Nullable<double> Total_CIF_itm 
        {
            get
            {
                return _total_cif_itm;
            }
            set
            {
                _total_cif_itm = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _total_cif_itm;
        [DataMember]
        public Nullable<double> Freight 
        {
            get
            {
                return _freight;
            }
            set
            {
                _freight = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _freight;
        [DataMember]
        public Nullable<double> Statistical_value 
        {
            get
            {
                return _statistical_value;
            }
            set
            {
                _statistical_value = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _statistical_value;
        [DataMember]
        public double DPQtyAllocated 
        {
            get
            {
                return _dpqtyallocated;
            }
            set
            {
                _dpqtyallocated = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        double _dpqtyallocated;
        [DataMember]
        public double DFQtyAllocated 
        {
            get
            {
                return _dfqtyallocated;
            }
            set
            {
                _dfqtyallocated = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        double _dfqtyallocated;
        [DataMember]
        public Nullable<double> PiQuantity 
        {
            get
            {
                return _piquantity;
            }
            set
            {
                _piquantity = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        Nullable<double> _piquantity;
        [DataMember]
        public bool ImportComplete 
        {
            get
            {
                return _importcomplete;
            }
            set
            {
                _importcomplete = value;
                //if(this.TrackingState == TrackingState.Unchanged) this.TrackingState = TrackingState.Modified;  
                NotifyPropertyChanged();
            }
        }
        bool _importcomplete;
        [DataMember]
        public AsycudaDocument AsycudaDocument { get; set; }
        [DataMember]
        public List<OverShortAllocationsEX> OverShortAllocationsEXes { get; set; }

 //       [DataMember]
 //       public TrackingState TrackingState { get; set; }
 //       [DataMember]
 //       public ICollection<string> ModifiedProperties { get; set; }
//        [DataMember]//JsonProperty,
 //       private Guid EntityIdentifier { get; set; }
    }
}


