//// <autogenerated>
////   This file was generated by T4 code generator AllServices.tt.
////   Any changes made to this file manually will be lost next time the file is regenerated.
//// </autogenerated>


//using System;
//using System.Collections.Generic;
//using System.Collections.Concurrent;
//using System.Data.Entity.Infrastructure;
//using System.Data.Entity.Core;
//using System.Data.SqlClient;
//using System.Diagnostics;
//using System.ServiceModel;
//using System.Threading.Tasks;
////using System.Transactions;
//using TrackableEntities;
//using TrackableEntities.Common;
//using System.Linq.Dynamic;
//using System.ComponentModel.Composition;
//using OversShortQS.Business.Entities;
//using Core.Common.Contracts;
//using Core.Common.Business.Services;
//using TrackableEntities.EF6;
//using System.Data.Entity;
//using System.Linq;

//namespace OversShortQS.Business.Services
//{
//   [Export (typeof(IOversShortEXService))]
//   [Export(typeof(IBusinessService))]
//   [PartCreationPolicy(CreationPolicy.NonShared)]
//   [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall,
//                    ConcurrencyMode = ConcurrencyMode.Multiple)]
   
//    public partial class OversShortEXService : IOversShortEXService, IDisposable
//    {
//        //private readonly OversShortQSContext dbContext;

//        public bool StartTracking { get; set; }

//        public OversShortEXService()
//        {
//            try
//            {
//                // dbContext = new OversShortQSContext(){StartTracking = StartTracking};
//                StartTracking = false;
//             }
//            catch (Exception updateEx)
//            {
//                    System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }

//        public async Task<IEnumerable<OversShortEX>> GetOversShorts(List<string> includesLst = null, bool tracking = true)
//        {
//            try
//            {
//            //using (var scope = new TransactionScope(TransactionScopeOption.Required,
//                                   //new TransactionOptions() {IsolationLevel = IsolationLevel.ReadUncommitted}))
//               // {
//                  using ( var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                  {
//				    var set = AddIncludes(includesLst, dbContext);
//                    IEnumerable<OversShortEX> entities = await set.AsNoTracking().ToListAsync()
//													       .ConfigureAwait(continueOnCapturedContext: false);
//                           //scope.Complete();
//                            if(tracking) entities.AsParallel(new ParallelLinqOptions() {MaxDegreeOfParallelism = Environment.ProcessorCount}).ForAll(x => x.StartTracking());
//                            return entities;
//                   }
//                //}
//             }
//            catch (Exception updateEx)
//            {
//                    System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }


//        public async Task<OversShortEX> GetOversShortEXByKey(string OversShortsId, List<string> includesLst = null, bool tracking = true)
//        {
//            try
//            {
//			   if(string.IsNullOrEmpty(OversShortsId))return null; 
//              using ( var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//              {
//                var i = Convert.ToInt32(OversShortsId);
//				var set = AddIncludes(includesLst, dbContext);
//                OversShortEX entity = await set.AsNoTracking().SingleOrDefaultAsync(x => x.OversShortsId == i).ConfigureAwait(continueOnCapturedContext: false);
//                if(tracking && entity != null) entity.StartTracking();
//                return entity;
//              }
//             }
//            catch (Exception updateEx)
//            {
//                System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }


//		 public async Task<IEnumerable<OversShortEX>> GetOversShortsByExpression(string exp, List<string> includesLst = null, bool tracking = true)
//        {
//            try
//            {
//                using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                {
//					if (string.IsNullOrEmpty(exp) || exp == "None") return new List<OversShortEX>();
//					var set = AddIncludes(includesLst, dbContext);
//                    if (exp == "All")
//                    {
//						var entities = await set.AsNoTracking().ToListAsync()
//											.ConfigureAwait(continueOnCapturedContext: false);

//                        if(tracking) entities.AsParallel(new ParallelLinqOptions() {MaxDegreeOfParallelism = Environment.ProcessorCount}).ForAll(x => x.StartTracking());
//                        return entities; 
//                    }
//					else
//					{
//						var entities = await set.AsNoTracking().Where(exp)
//											.ToListAsync() 
//											.ConfigureAwait(continueOnCapturedContext: false);
//                        if(tracking) entities.AsParallel(new ParallelLinqOptions() {MaxDegreeOfParallelism = Environment.ProcessorCount}).ForAll(x => x.StartTracking());
//                        return entities; 
											
//					}
					
//                }
//            }
//            catch (Exception updateEx)
//            {
//                    System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }

//		 public async Task<IEnumerable<OversShortEX>> GetOversShortsByExpressionLst(List<string> expLst, List<string> includesLst = null, bool tracking = true)
//        {
//            try
//            {
//                using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                {
//					if (expLst.Count == 0 || expLst.FirstOrDefault() == "None") return new List<OversShortEX>();
//					var set = AddIncludes(includesLst, dbContext);
//                    if (expLst.FirstOrDefault() == "All")
//                    {
//						var entities = await set.AsNoTracking().ToListAsync()
//											.ConfigureAwait(continueOnCapturedContext: false); 
//                        if(tracking) entities.AsParallel(new ParallelLinqOptions() {MaxDegreeOfParallelism = Environment.ProcessorCount}).ForAll(x => x.StartTracking());
//                        return entities; 
//                    }
//					else
//					{
//						set = AddWheres(expLst, set);
//						var entities = await set.AsNoTracking().ToListAsync() 
//										.ConfigureAwait(continueOnCapturedContext: false);
//                        if(tracking) entities.AsParallel(new ParallelLinqOptions() {MaxDegreeOfParallelism = Environment.ProcessorCount}).ForAll(x => x.StartTracking());
//                        return entities; 
											
//					}
					
//                }
//            }
//            catch (Exception updateEx)
//            {
//                    System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }

//		public async Task<IEnumerable<OversShortEX>> GetOversShortsByExpressionNav(string exp,
//																							  Dictionary<string, string> navExp,
//																							  List<string> includesLst = null, bool tracking = true)
//        {
//            try
//            {
//                using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                {

//                    if (string.IsNullOrEmpty(exp) || exp == "None") return new List<OversShortEX>();

//                    if (exp == "All" && navExp.Count == 0)
//                    {
//                        var aentities = await AddIncludes(includesLst, dbContext)
//												.ToListAsync()
//												.ConfigureAwait(continueOnCapturedContext: false);
//                        if(tracking) aentities.AsParallel().ForAll(x => x.StartTracking());
//                        return aentities; 
//                    }
//                    foreach (var itm in navExp)
//                    {
//                        switch (itm.Key)
//                        {
//                            case "OverShortDetailsEXes":
//                                return
//                                    await
//                                        GetWhere<OverShortDetailsEX>(dbContext, exp, itm.Value, "", "Select", includesLst)
//										.ConfigureAwait(continueOnCapturedContext: false);

//                            case "OverShortSuggestedDocuments":
//                                return
//                                    await
//                                        GetWhere<OverShortSuggestedDocument>(dbContext, exp, itm.Value, "", "SelectMany", includesLst)
//										.ConfigureAwait(continueOnCapturedContext: false);

//                        }

//                    }
//					var set = AddIncludes(includesLst, dbContext);
//                    var entities = await set.AsNoTracking().Where(exp)
//									.ToListAsync()
//									.ConfigureAwait(continueOnCapturedContext: false);
//                    if(tracking) entities.AsParallel(new ParallelLinqOptions() {MaxDegreeOfParallelism = Environment.ProcessorCount}).ForAll(x => x.StartTracking());
//                        return entities; 

//                }
//            }
//            catch (Exception updateEx)
//            {
//                    System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }

//        public async Task<IEnumerable<OversShortEX>> GetOversShortsByBatch(string exp,
//            int totalrow, List<string> includesLst = null, bool tracking = true)
//        {
//            try
//            {

//                var res = new ConcurrentQueue<List<OversShortEX>>();



//                if (string.IsNullOrEmpty(exp) || exp == "None") return new List<OversShortEX>();


//                var batchSize = 500;
//                var batches = Convert.ToInt32(totalrow / batchSize);

//                if (totalrow % batchSize > 0) batches += 1;
//                var exceptions = new ConcurrentQueue<Exception>();
//                Parallel.For(0, batches,
//                   new ParallelOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount * 2 },
//                    bat =>
//                    //  for (int bat = 0; bat < batches; bat++)
//                    {
//                        try
//                        {
//                            using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                            {
//                                dbContext.Configuration.AutoDetectChangesEnabled = false;
//                                //dbContext.Configuration.LazyLoadingEnabled = true;
//                                var set = AddIncludes(includesLst, dbContext);
//                                IQueryable<OversShortEX> dset;
//                                if (exp == "All")
//                                {
//                                    dset = set.OrderBy(x => x.OversShortsId);
//                                }
//                                else
//                                {
//                                    dset = set.OrderBy(x => x.OversShortsId).Where(exp);
//                                }

//                                var lst = dset
//                                    .Skip(bat * batchSize)
//                                    .Take(batchSize)
//                                    .ToList();
//                                res.Enqueue(lst);
//                            }

//                        }
//                        catch (Exception ex)
//                        {
//                            exceptions.Enqueue(ex);
//                        }
//                    }
//                    );
//                if (exceptions.Count > 0) throw new AggregateException(exceptions);
    
//                var entities = res.SelectMany(x => x.ToList());
//                if(tracking) entities.AsParallel(new ParallelLinqOptions() {MaxDegreeOfParallelism = Environment.ProcessorCount}).ForAll(x => x.StartTracking());
//                return entities; 

//            }
//            catch (Exception updateEx)
//            {
//                System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                var fault = new ValidationFault
//                {
//                    Result = false,
//                    Message = updateEx.Message,
//                    Description = updateEx.StackTrace
//                };
//                throw new FaultException<ValidationFault>(fault);
//            }
//        }
//        public async Task<IEnumerable<OversShortEX>> GetOversShortsByBatchExpressionLst(List<string> expLst,
//            int totalrow, List<string> includesLst = null, bool tracking = true)
//        {
//            try
//            {

//                var res = new ConcurrentQueue<List<OversShortEX>>();



//                if (expLst.Count == 0 || expLst.FirstOrDefault() == "None") return new List<OversShortEX>();


//                var batchSize = 500;
//                var batches = Convert.ToInt32(totalrow / batchSize);

//                if (totalrow % batchSize > 0) batches += 1;
//                var exceptions = new ConcurrentQueue<Exception>();
//                Parallel.For(0, batches,
//                   new ParallelOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount * 2 },
//                    bat =>
//                    //  for (int bat = 0; bat < batches; bat++)
//                    {
//                        try
//                        {
//                            using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                            {
//                                dbContext.Configuration.AutoDetectChangesEnabled = false;
//                                //dbContext.Configuration.LazyLoadingEnabled = true;
//                                var set = AddIncludes(includesLst, dbContext);
//                                IQueryable<OversShortEX> dset;
//                                if (expLst.FirstOrDefault() == "All")
//                                {
//                                    dset = set.OrderBy(x => x.OversShortsId);
//                                }
//                                else
//                                {
//                                    set = AddWheres(expLst, set);
//                                    dset = set.OrderBy(x => x.OversShortsId);
//                                }

//                                var lst = dset
//                                    .Skip(bat * batchSize)
//                                    .Take(batchSize)
//                                    .ToList();
//                                res.Enqueue(lst);
//                            }

//                        }
//                        catch (Exception ex)
//                        {
//                            exceptions.Enqueue(ex);
//                        }
//                    }
//                    );
//                if (exceptions.Count > 0) throw new AggregateException(exceptions);
//                var entities = res.SelectMany(x => x.ToList());
//                if(tracking) entities.AsParallel(new ParallelLinqOptions() {MaxDegreeOfParallelism = Environment.ProcessorCount}).ForAll(x => x.StartTracking());
//                return entities; 
//            }
//            catch (Exception updateEx)
//            {
//                System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                var fault = new ValidationFault
//                {
//                    Result = false,
//                    Message = updateEx.Message,
//                    Description = updateEx.StackTrace
//                };
//                throw new FaultException<ValidationFault>(fault);
//            }
//        }


//        public async Task<OversShortEX> UpdateOversShortEX(OversShortEX entity)
//        { 
//            using ( var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//              {
//                try
//                {   
//                    if(entity.TrackingState == TrackingState.Unchanged) entity.TrackingState = TrackingState.Modified;                              
                    
//                    dbContext.ApplyChanges(entity);
//                    await dbContext.SaveChangesAsync().ConfigureAwait(continueOnCapturedContext: false);
//                    entity.AcceptChanges();
//                    return entity;      

//                   // var entitychanges = entity.ChangeTracker.GetChanges();
//                   // if (entitychanges != null && entitychanges.FirstOrDefault() != null)
//                   // {
//                   //     dbContext.ApplyChanges(entitychanges);
//                   //     await dbContext.SaveChangesAsync().ConfigureAwait(continueOnCapturedContext: false);
//                   //     entity.EntityId = entitychanges.FirstOrDefault().EntityId;
//                   //     entity.AcceptChanges();     
//                   // }
//                   // return entity;        
//                }
//                catch (DbUpdateConcurrencyException dce)
//                {
//                    // Get failed entry
//                    foreach (var itm in dce.Entries)
//                    {
//                        if(itm.State != EntityState.Added)
//                         {
//                            var dv = itm.GetDatabaseValues();
//                            if(dv != null) itm.OriginalValues.SetValues(dv);
//                        }
//                    }
//                }
//                catch (OptimisticConcurrencyException oce)
//                {
//                    var context = ((IObjectContextAdapter)dbContext).ObjectContext;

//                    foreach (var entry in oce.StateEntries)
//                    {
//                        context.Refresh(System.Data.Entity.Core.Objects.RefreshMode.StoreWins, entry.Entity);
//                    }
//                }   
//                catch (DbUpdateException e)
//                {
                    
//                   // Debugger.Break();
//                    SqlException s = e.InnerException.InnerException as SqlException;
//                    if (s != null && s.Number == 2627)
//                    {
                         
//                    }
//                    else
//                    {
//                        Debugger.Break();
//                        throw;
//                    }
//                }             
//                catch (Exception updateEx)
//                {
//                    if (
//                        updateEx.Message.Contains(
//                            "The changes to the database were committed successfully, " +
//                            "but an error occurred while updating the object context"))
//                        return entity;

//                    System.Diagnostics.Debugger.Break();
//                    //throw new FaultException(updateEx.Message);
//                        var fault = new ValidationFault
//                                    {
//                                        Result = false,
//                                        Message = updateEx.Message,
//                                        Description = updateEx.StackTrace
//                                    };
//                        throw new FaultException<ValidationFault>(fault);
//                }
//            }
//           return entity;
//        }

//        public async Task<OversShortEX> CreateOversShortEX(OversShortEX entity)
//        {
//            try
//            {
//                using ( var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//              {
//                dbContext.Set<OversShortEX>().Add(entity);
//                await dbContext.SaveChangesAsync().ConfigureAwait(continueOnCapturedContext: false);
//                entity.AcceptChanges();
//                return entity;
//              }
//            }
//            catch (Exception updateEx)
//            {
//                    System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }

//        public async Task<bool> DeleteOversShortEX(string OversShortsId)
//        {
//            try
//            {
//              using ( var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//              {
//                var i = Convert.ToInt32(OversShortsId);
//                OversShortEX entity = await dbContext.OversShorts.OfType<OversShortEX>()
//													.SingleOrDefaultAsync(x => x.OversShortsId == i)
//													.ConfigureAwait(continueOnCapturedContext: false);
//                if (entity == null)
//                    return false;

//                    dbContext.Set<OversShortEX>().Attach(entity);
//                    dbContext.Set<OversShortEX>().Remove(entity);
//                    await dbContext.SaveChangesAsync().ConfigureAwait(continueOnCapturedContext: false);
//                    return true;
//              }
//            }
//            catch (Exception updateEx)
//            {
//                    System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }

//		// Virtural list Implementation

//         public async Task<int> CountByExpressionLst(List<string> expLst)
//        {
//            try
//            {
//                using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                {
//                    if (expLst.Count == 0 || expLst.FirstOrDefault() == "None") return 0;
//                    var set = (IQueryable<OversShortEX>)dbContext.Set<OversShortEX>(); 
//                    if (expLst.FirstOrDefault() == "All")
//                    {
//                        return await set.AsNoTracking().CountAsync()
//                                            .ConfigureAwait(continueOnCapturedContext: false);
//                    }
//                    else
//                    {
//                        set = AddWheres(expLst, set);
//                        return await set.AsNoTracking().CountAsync()
//                                        .ConfigureAwait(continueOnCapturedContext: false);
//                    }
                    
//                }
//            }
//            catch (Exception updateEx)
//            {
//                System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                var fault = new ValidationFault
//                {
//                    Result = false,
//                    Message = updateEx.Message,
//                    Description = updateEx.StackTrace
//                };
//                throw new FaultException<ValidationFault>(fault);
//            }
//        }

//		public async Task<int> Count(string exp)
//        {
//            try
//            {
//                using (OversShortQSContext dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                {
//                    if (string.IsNullOrEmpty(exp) || exp == "None") return 0;
//                    if (exp == "All")
//                    {
//                        return await dbContext.Set<OversShortEX>()
//                                    .AsNoTracking()
//									.CountAsync()
//									.ConfigureAwait(continueOnCapturedContext: false);
//                    }
//                    else
//                    {
                        
//                        return await dbContext.Set<OversShortEX>()
//									.AsNoTracking()
//                                    .Where(exp)
//									.CountAsync()
//									.ConfigureAwait(continueOnCapturedContext: false);
//                    }
//                }
//            }
//            catch (Exception updateEx)
//            {
//                System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }
        
//        public async Task<IEnumerable<OversShortEX>> LoadRange(int startIndex, int count, string exp)
//        {
//            try
//            {
//                using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                {
//                    if (string.IsNullOrEmpty(exp) || exp == "None") return new List<OversShortEX>();
//                    if (exp == "All")
//                    {
//                        return await dbContext.Set<OversShortEX>()
//										.AsNoTracking()
//                                        .OrderBy(y => y.OversShortsId)
//										.Skip(startIndex)
//										.Take(count)
//										.ToListAsync()
//										.ConfigureAwait(continueOnCapturedContext: false);
//                    }
//                    else
//                    {
                        
//                        return await dbContext.Set<OversShortEX>()
//										.AsNoTracking()
//                                        .Where(exp)
//										.OrderBy(y => y.OversShortsId)
//										.Skip(startIndex)
//										.Take(count)
//										.ToListAsync()
//										.ConfigureAwait(continueOnCapturedContext: false);
//                    }
//                }
//            }
//            catch (Exception updateEx)
//            {
//                    System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }

//		public async Task<int> CountNav(string exp, Dictionary<string, string> navExp)
//        {
//            try
//            {
//                if (string.IsNullOrEmpty(exp) || exp == "None") return 0;
//                using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                {
//                    if (exp == "All" && navExp.Count == 0)
//                    {
//                        return await dbContext.Set<OversShortEX>()
//										.AsNoTracking()
//                                        .CountAsync()
//										.ConfigureAwait(continueOnCapturedContext: false);
//                    }
//                    foreach (var itm in navExp)
//                    {
//                        switch (itm.Key)
//                        {
//                            case "OverShortDetailsEXes":
//                                return await CountWhere<OverShortDetailsEX>(dbContext, exp, itm.Value, "", "Select")
//											.ConfigureAwait(continueOnCapturedContext: false);
//                            case "OverShortSuggestedDocuments":
//                                return await CountWhere<OverShortSuggestedDocument>(dbContext, exp, itm.Value, "", "SelectMany")
//											.ConfigureAwait(continueOnCapturedContext: false);
//						}
//                    }
//                    return await dbContext.Set<OversShortEX>().Where(exp == "All" || exp == null ? "OversShortsId != null" : exp)
//											.AsNoTracking()
//                                            .CountAsync()
//											.ConfigureAwait(continueOnCapturedContext: false);
//                }
                
//            }
//            catch (Exception updateEx)
//            {
//                System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                var fault = new ValidationFault
//                {
//                    Result = false,
//                    Message = updateEx.Message,
//                    Description = updateEx.StackTrace
//                };
//                throw new FaultException<ValidationFault>(fault);
//            }
//        }

//		private static async Task<int> CountWhere<T>(OversShortQSContext dbContext, string exp, string navExp, string navProp, string rel) where T : class
//        {
//              switch (rel)
//		    {
//		        case "SelectMany":
//                    return await CountWhereSelectMany<T>(dbContext, exp, navExp, navProp)
//									.ConfigureAwait(continueOnCapturedContext: false);
		            
//                default:
//                    return await CountWhereSelect<T>(dbContext, exp, navExp, navProp)
//									.ConfigureAwait(continueOnCapturedContext: false);
//		    }
//        }

//		private static async Task<int> CountWhereSelectMany<T>(OversShortQSContext dbContext, string exp, string navExp, string navProp) where T : class
//        {
//			try
//			{
//            return await dbContext.Set<T>()
//				.AsNoTracking()
//                .Where(navExp)
//                .SelectMany(navProp).OfType<OversShortEX>()
//                .Where(exp == "All" || exp == null ? "OversShortsId != null" : exp)
//                .Distinct()
//                .OrderBy("OversShortsId")
//                .CountAsync()
//				.ConfigureAwait(continueOnCapturedContext: false);
//			}
//			catch (Exception)
//			{
//				Debugger.Break();
//				throw;
//			}
//        }

//		private static async Task<int> CountWhereSelect<T>(OversShortQSContext dbContext, string exp, string navExp, string navProp) where T : class
//        {
//			try
//			{
//            return await dbContext.Set<T>()
//				.AsNoTracking()
//                .Where(navExp)
//                .Select(navProp).OfType<OversShortEX>()
//                .Where(exp == "All" || exp == null ? "OversShortsId != null" : exp)
//                .Distinct()
//                .OrderBy("OversShortsId")
//                .CountAsync()
//				.ConfigureAwait(continueOnCapturedContext: false);
//			}
//			catch (Exception)
//			{
//				Debugger.Break();
//				throw;
//			}
//        }

//		  public async Task<IEnumerable<OversShortEX>> LoadRangeNav(int startIndex, int count, string exp,
//                                                                                 Dictionary<string, string> navExp, IEnumerable<string> includeLst = null)
//        {
//            try
//            {
//                using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                {
//                    if ((string.IsNullOrEmpty(exp) && navExp.Count == 0) || exp == "None") return new List<OversShortEX>();
//                    var set = AddIncludes(includeLst, dbContext);

//                    if (exp == "All" && navExp.Count == 0)
//                    {
                       
//                        return await set
//									.AsNoTracking()
//                                    .OrderBy(y => y.OversShortsId)
 
//                                    .Skip(startIndex)
//                                    .Take(count)
//									.ToListAsync()
//									.ConfigureAwait(continueOnCapturedContext: false);
//                    }
//                    foreach (var itm in navExp)
//                    {
//                        switch (itm.Key)
//                        {
//                            case "OverShortDetailsEXes":
//                                return
//                                    await
//                                        LoadRangeWhere<OverShortDetailsEX>(startIndex, count, dbContext, exp, itm.Value, "", "Select")
//													.ConfigureAwait(continueOnCapturedContext: false);

//                            case "OverShortSuggestedDocuments":
//                                return
//                                    await
//                                        LoadRangeWhere<OverShortSuggestedDocument>(startIndex, count, dbContext, exp, itm.Value, "", "SelectMany")
//													.ConfigureAwait(continueOnCapturedContext: false);

                          
//							default:
//                                throw new ArgumentException("No Navigation property found for " + itm.Key);
//						}

//                    }
//                    return await set//dbContext.Set<OversShortEX>()
//								.AsNoTracking()
//                                .Where(exp == "All" || exp == null ? "OversShortsId != null" : exp)
//								.OrderBy(y => y.OversShortsId)
 
//                                .Skip(startIndex)
//                                .Take(count)
//								.ToListAsync()
//								.ConfigureAwait(continueOnCapturedContext: false);


//                }
//            }
//            catch (Exception updateEx)
//            {
//                System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }
//        }

//		private static async Task<IEnumerable<OversShortEX>> LoadRangeWhere<T>(int startIndex, int count,
//            OversShortQSContext dbContext, string exp, string navExp, string navProp, string rel, IEnumerable<string> includeLst = null) where T : class
//        {
//             switch (rel)
//		    {
//		        case "SelectMany":
//                    return await LoadRangeSelectMany<T>(startIndex, count, dbContext, exp, navExp, navProp, includeLst)
//									.ConfigureAwait(continueOnCapturedContext: false);
		            
//                default:
//                    return await LoadRangeSelect<T>(startIndex, count, dbContext, exp, navExp, navProp, includeLst)
//									.ConfigureAwait(continueOnCapturedContext: false);
//		    }
//        }

//		private static async Task<IEnumerable<OversShortEX>> LoadRangeSelectMany<T>(int startIndex, int count,
//            OversShortQSContext dbContext, string exp, string navExp, string navProp, IEnumerable<string> includeLst = null) where T : class
//        {
//			try
//			{
//            var set = dbContext.Set<T>()
//				.AsNoTracking()
//                .Where(navExp)
//                .SelectMany(navProp).OfType<OversShortEX>();
    
//            if (includeLst != null) set = includeLst.Aggregate(set, (current, itm) => current.Include(itm));            

//            return await set
//                .Where(exp == "All" || exp == null ? "OversShortsId != null" : exp)
//                .Distinct()
//                .OrderBy(y => y.OversShortsId)
 
//                .Skip(startIndex)
//                .Take(count)
//                .ToListAsync()
//				.ConfigureAwait(continueOnCapturedContext: false);
//			}
//			catch (Exception)
//			{
//				Debugger.Break();
//				throw;
//			}
//        }

//		private static async Task<IEnumerable<OversShortEX>> LoadRangeSelect<T>(int startIndex, int count,
//            OversShortQSContext dbContext, string exp, string navExp, string navProp, IEnumerable<string> includeLst = null) where T : class
//        {
//			try
//			{
//              var set = dbContext.Set<T>()
//				.AsNoTracking()
//                .Where(navExp)
//                .Select(navProp).OfType<OversShortEX>();

//               if (includeLst != null) set = includeLst.Aggregate(set, (current, itm) => current.Include(itm)); 
                
//               return await set
//                .Where(exp == "All" || exp == null ? "OversShortsId != null" : exp)
//                .Distinct()
//                .OrderBy(y => y.OversShortsId)
 
//                .Skip(startIndex)
//                .Take(count)
//                .ToListAsync()
//				.ConfigureAwait(continueOnCapturedContext: false);
//							 }
//			catch (Exception)
//			{
//				Debugger.Break();
//				throw;
//			}
//        }

//        private static async Task<IEnumerable<OversShortEX>> GetWhere<T>(OversShortQSContext dbContext,
//            string exp, string navExp, string navProp, string rel, List<string> includesLst = null) where T : class
//        {
//			try
//			{
//			    switch (rel)
//				{
//					case "SelectMany":
//						return await GetWhereSelectMany<T>(dbContext, exp, navExp, navProp, includesLst)
//										.ConfigureAwait(continueOnCapturedContext: false);
						
//					default:
//						return await GetWhereSelect<T>(dbContext, exp, navExp, navProp, includesLst)
//										.ConfigureAwait(continueOnCapturedContext: false);
//				}
			
//			}
//			catch (Exception)
//			{
//				Debugger.Break();
//				throw;
//			}
//        }

//		private static async Task<IEnumerable<OversShortEX>> GetWhereSelectMany<T>(OversShortQSContext dbContext,
//            string exp, string navExp, string navProp, List<string> includesLst = null) where T : class
//        {
//			try
//			{

//			if (includesLst == null)
//			{
//				return await dbContext.Set<T>()
//							.AsNoTracking()
//                            .Where(navExp)
//							.SelectMany(navProp).OfType<OversShortEX>()
//							.Where(exp == "All" || exp == null?"OversShortsId != null":exp)
//							.Distinct()
//							.ToListAsync()
//							.ConfigureAwait(continueOnCapturedContext: false);
//			}

//			var set = (DbQuery<OversShortEX>)dbContext.Set<T>()
//				.AsNoTracking()
//                .Where(navExp)
//                .SelectMany(navProp).OfType<OversShortEX>()
//                .Where(exp == "All" || exp == null?"OversShortsId != null":exp)
//                .Distinct();

//			set = includesLst.Aggregate(set, (current, itm) => current.Include(itm));

//            return await set.ToListAsync()
//							.ConfigureAwait(continueOnCapturedContext: false);
//			}
//			catch (Exception)
//			{
//				Debugger.Break();
//				throw;
//			}
//        }

//		private static async Task<IEnumerable<OversShortEX>> GetWhereSelect<T>(OversShortQSContext dbContext,
//            string exp, string navExp, string navProp, List<string> includesLst = null) where T : class
//        {
//			try
//			{

//			if (includesLst == null)
//			{
//				return await dbContext.Set<T>()
//							.AsNoTracking()
//                            .Where(navExp)
//							.Select(navProp).OfType<OversShortEX>()
//							.Where(exp == "All" || exp == null?"OversShortsId != null":exp)
//							.Distinct()
//							.ToListAsync()
//							.ConfigureAwait(continueOnCapturedContext: false);
//			}

//			var set = (DbQuery<OversShortEX>)dbContext.Set<T>()
//				.AsNoTracking()
//                .Where(navExp)
//                .Select(navProp).OfType<OversShortEX>()
//                .Where(exp == "All" || exp == null?"OversShortsId != null":exp)
//                .Distinct();

//			set = includesLst.Aggregate(set, (current, itm) => current.Include(itm));

//            return await set.ToListAsync()
//							.ConfigureAwait(continueOnCapturedContext: false);
//			}
//			catch (Exception)
//			{
//				Debugger.Break();
//				throw;
//			}
//        }

		
//		public decimal SumField(string whereExp, string field)
//         {
//             try
//             {
//                 using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                 {
//					decimal res = 0;
//                     if (string.IsNullOrEmpty(whereExp) || whereExp == "None") return 0;
//                     if (whereExp == "All")
//                     {
//                          res = Convert.ToDecimal(dbContext.OversShorts.OfType<OversShortEX>().AsNoTracking().Sum(field));
//                     }
//                     else
//                     {
//                         res = Convert.ToDecimal(dbContext.OversShorts.OfType<OversShortEX>().AsNoTracking().Where(whereExp).Sum(field));
//                     }
                     
//                     return res;
//                 }
//             }
//             catch (Exception updateEx)
//             {
//                System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//             }
//         }

//        public async Task<decimal> SumNav( string exp, Dictionary<string, string> navExp, string field)
//        {
//            try
//            {
//                if (string.IsNullOrEmpty(exp) || exp == "None") return 0;
//                using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                {
//                    if (exp == "All" && navExp.Count == 0)
//                    {
//                        return Convert.ToDecimal(dbContext.Set<OversShortEX>()
//										.AsNoTracking()
//                                        .Sum(field)??0);
//                    }
//                    foreach (var itm in navExp)
//                    {
//                        switch (itm.Key)
//                        {
//                            case "OverShortDetailsEXes":
//                                return await SumWhere<OverShortDetailsEX>(dbContext, exp, itm.Value, "", field, "Select")
//											.ConfigureAwait(continueOnCapturedContext: false);
//                            case "OverShortSuggestedDocuments":
//                                return await SumWhere<OverShortSuggestedDocument>(dbContext, exp, itm.Value, "", field, "SelectMany")
//											.ConfigureAwait(continueOnCapturedContext: false);
//						}
//                    }
//                    return Convert.ToDecimal(dbContext.Set<OversShortEX>().Where(exp == "All" || exp == null ? "OversShortsId != null" : exp)
//											.AsNoTracking()
//                                            .Sum(field)??0);
//                }
                
//            }
//            catch (Exception updateEx)
//            {
//                System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                var fault = new ValidationFault
//                {
//                    Result = false,
//                    Message = updateEx.Message,
//                    Description = updateEx.StackTrace
//                };
//                throw new FaultException<ValidationFault>(fault);
//            }
//        }

//		private static async Task<decimal> SumWhere<T>(OversShortQSContext dbContext, string exp, string navExp, string navProp, string field, string rel) where T : class
//        {
//              switch (rel)
//		    {
//		        case "SelectMany":
//                    return await SumWhereSelectMany<T>(dbContext, exp, navExp, navProp, field)
//									.ConfigureAwait(continueOnCapturedContext: false);
//		        default:
//                    return await SumWhereSelect<T>(dbContext, exp, navExp, navProp, field)
//									.ConfigureAwait(continueOnCapturedContext: false);
//		    }
//        }

//		private static async Task<decimal> SumWhereSelectMany<T>(OversShortQSContext dbContext, string exp, string navExp, string navProp, string field) where T : class
//        {
//			try
//			{
//            return Convert.ToDecimal(dbContext.Set<T>()
//				.AsNoTracking()
//                .Where(navExp)
//                .SelectMany(navProp).OfType<OversShortEX>()
//                .Where(exp == "All" || exp == null ? "OversShortsId != null" : exp)
//                .Distinct()
//                .OrderBy("OversShortsId")
//                .Sum(field));
//			}
//			catch (Exception)
//			{
//				Debugger.Break();
//				throw;
//			}
//        }

//		private static async Task<decimal> SumWhereSelect<T>(OversShortQSContext dbContext, string exp, string navExp, string navProp, string field) where T : class
//        {
//			try
//			{
//            return Convert.ToDecimal(dbContext.Set<T>()
//				.AsNoTracking()
//                .Where(navExp)
//                .Select(navProp).OfType<OversShortEX>()
//                .Where(exp == "All" || exp == null ? "OversShortsId != null" : exp)
//                .Distinct()
//                .OrderBy("OversShortsId")
//                .Sum(field));
//			}
//			catch (Exception)
//			{
//				Debugger.Break();
//				throw;
//			}
//        }



//		 public string MinField(string whereExp, string field)
//         {
//             try
//             {
//                 using (var dbContext = new OversShortQSContext(){StartTracking = StartTracking})
//                 {
//					string res = "";
//                     if (string.IsNullOrEmpty(whereExp) || whereExp == "None") return res;
//                     if (whereExp == "All")
//                     {
//                          res = Convert.ToString(dbContext.OversShorts.OfType<OversShortEX>().AsNoTracking().Min(field));
//                     }
//                     else
//                     {
//                         res = Convert.ToString(dbContext.OversShorts.OfType<OversShortEX>().AsNoTracking().Where(whereExp).Min(field));
//                     }
                     
//                     return res;
//                 }
//             }
//             catch (Exception updateEx)
//             {
//                    System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//             }
//         }

		 
//		private static IQueryable<OversShortEX> AddIncludes(IEnumerable<string> includesLst, OversShortQSContext dbContext)
//       {
//		 try
//			{
//			   if (includesLst == null) includesLst = new List<string>();
//			   var set =(DbQuery<OversShortEX>) dbContext.OversShorts.OfType<OversShortEX>(); 
//			   set = includesLst.Where(x => !string.IsNullOrEmpty(x))
//                                .Aggregate(set, (current, itm) => current.Include(itm));
//			   return set;
//			 }
//			catch (Exception)
//			{
//				Debugger.Break();
//				throw;
//			}
//       }
//	   private IQueryable<OversShortEX> AddWheres(List<string> expLst, IQueryable<OversShortEX> set)
//        {
//            try
//            {
//                return expLst.Where(x => !string.IsNullOrEmpty(x))
//                             .Aggregate(set, (current, itm) => current.Where(itm));
//            }
//            catch (Exception)
//            {
//                Debugger.Break();
//                throw;
//            }
          
//        }

//        public void Dispose()
//        {
//            try
//            {
//               // var dispose = dbContext as IDisposable;
//             ////   if (dispose != null)
//            //    {
//           //         dbContext.Dispose();
//           //     }
//            }
//            catch (Exception updateEx)
//            {
//                System.Diagnostics.Debugger.Break();
//                //throw new FaultException(updateEx.Message);
//                    var fault = new ValidationFault
//                                {
//                                    Result = false,
//                                    Message = updateEx.Message,
//                                    Description = updateEx.StackTrace
//                                };
//                    throw new FaultException<ValidationFault>(fault);
//            }

//        }

//    }
//}



