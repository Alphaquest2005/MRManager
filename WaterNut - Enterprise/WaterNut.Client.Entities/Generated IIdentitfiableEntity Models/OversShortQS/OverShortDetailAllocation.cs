// <autogenerated>
//   This file was generated by T4 code generator AllClientModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Linq;
using OversShortQS.Client.Entities;
using OversShortQS.Client.Services;
//using WaterNut.Client.Services;
using OversShortQS.Client.Services;

using System;

namespace OversShortQS.Client.Entities
{
    public partial class OverShortDetailAllocation
    {
       
       #region IIdentifiable Entities
        public override string EntityId
        {
            get
            {
                return this.OverShortAllocationId.ToString();//this.OverShortAllocationId == null?"0":			
            }
            set
            {
                this.OverShortAllocationId = Convert.ToInt32(value);
            }
        }
        public string EXEntityName
        {
            get
            {
                return this.EX == null ? "" : this.EX.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (OverShortAllocationsEXClient ctx = new OverShortAllocationsEXClient())
                    {
                        var dto = ctx.GetOverShortAllocationsEXes().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.EX = (OverShortAllocationsEX)new OverShortAllocationsEX().CreateEntityFromString(value);
							
							this.OverShortAllocationId = Convert.ToInt32(this.EX.OverShortAllocationId);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddEX");
                        }
                        else
                        {
                            var obj = new OverShortAllocationsEX(dto);
                           if (this.EX == null || this.EX.EntityId != obj.EntityId) this.EX = obj;
                           
                        }
                         


                    }
            
            }

      }
        public string OverShortDetailEntityName
        {
            get
            {
                return this.OverShortDetail == null ? "" : this.OverShortDetail.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (OverShortDetailClient ctx = new OverShortDetailClient())
                    {
                        var dto = ctx.GetOverShortDetails().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.OverShortDetail = (OverShortDetail)new OverShortDetail().CreateEntityFromString(value);
							
							this.OverShortAllocationId = Convert.ToInt32(this.OverShortDetail.OverShortDetailId);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddOverShortDetail");
                        }
                        else
                        {
                            var obj = new OverShortDetail(dto);
                           if (this.OverShortDetail == null || this.OverShortDetail.EntityId != obj.EntityId) this.OverShortDetail = obj;
                           
                        }
                         


                    }
            
            }

      }



         #endregion
    }
   
}
		