// <autogenerated>
//   This file was generated by T4 code generator AllClientModels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System.Linq;
using OversShortQS.Client.Entities;
using OversShortQS.Client.Services;
//using WaterNut.Client.Services;
using OversShortQS.Client.Services;

using System;

namespace OversShortQS.Client.Entities
{
    public partial class OverShortAllocationsEX
    {
       
       #region IIdentifiable Entities
        public override string EntityId
        {
            get
            {
                return this.OverShortAllocationId.ToString();//this.OverShortAllocationId == null?"0":			
            }
            set
            {
                this.OverShortAllocationId = Convert.ToInt32(value);
            }
        }
        public string OverShortDetailAllocationEntityName
        {
            get
            {
                return this.OverShortDetailAllocation == null ? "" : this.OverShortDetailAllocation.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (OverShortDetailAllocationClient ctx = new OverShortDetailAllocationClient())
                    {
                        var dto = ctx.GetOverShortDetailAllocations().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.OverShortDetailAllocation = (OverShortDetailAllocation)new OverShortDetailAllocation().CreateEntityFromString(value);
							
							this.OverShortAllocationId = Convert.ToInt32(this.OverShortDetailAllocation.OverShortAllocationId);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddOverShortDetailAllocation");
                        }
                        else
                        {
                            var obj = new OverShortDetailAllocation(dto);
                           if (this.OverShortDetailAllocation == null || this.OverShortDetailAllocation.EntityId != obj.EntityId) this.OverShortDetailAllocation = obj;
                           
                        }
                         


                    }
            
            }

      }
        public string OverShortDetailsEXEntityName
        {
            get
            {
                return this.OverShortDetailsEX == null ? "" : this.OverShortDetailsEX.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (OverShortDetailsEXClient ctx = new OverShortDetailsEXClient())
                    {
                        var dto = ctx.GetOverShortDetails().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.OverShortDetailsEX = (OverShortDetailsEX)new OverShortDetailsEX().CreateEntityFromString(value);
							
							this.OverShortAllocationId = Convert.ToInt32(this.OverShortDetailsEX.OverShortDetailId);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddOverShortDetailsEX");
                        }
                        else
                        {
                            var obj = new OverShortDetailsEX(dto);
                           if (this.OverShortDetailsEX == null || this.OverShortDetailsEX.EntityId != obj.EntityId) this.OverShortDetailsEX = obj;
                           
                        }
                         


                    }
            
            }

      }
        public string AsycudaDocumentItemEntityName
        {
            get
            {
                return this.AsycudaDocumentItem == null ? "" : this.AsycudaDocumentItem.EntityName;
            }
            set
            {
                                if (string.IsNullOrEmpty(value)) return;
                string[] vals = value.Split(',');
               
                    using (AsycudaDocumentItemClient ctx = new AsycudaDocumentItemClient())
                    {
                        var dto = ctx.GetAsycudaDocumentItems().Result.AsEnumerable().FirstOrDefault(x => x.EntityName == value);
                        

                        if ( dto == null)
                        {
                            this.AsycudaDocumentItem = (AsycudaDocumentItem)new AsycudaDocumentItem().CreateEntityFromString(value);
							
							this.OverShortAllocationId = Convert.ToInt32(this.AsycudaDocumentItem.Item_Id);
                            this.TrackingState=TrackableEntities.TrackingState.Modified;
                           NotifyPropertyChanged("AddAsycudaDocumentItem");
                        }
                        else
                        {
                            var obj = new AsycudaDocumentItem(dto);
                           if (this.AsycudaDocumentItem == null || this.AsycudaDocumentItem.EntityId != obj.EntityId) this.AsycudaDocumentItem = obj;
                           
                        }
                         


                    }
            
            }

      }



         #endregion
    }
   
}
		