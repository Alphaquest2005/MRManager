// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using WaterNut.Interfaces;
using Core.Common.Client.Entities;
using OversShortQS.Client.DTO;
using TrackableEntities.Client;
using TrackableEntities;
using Core.Common.Validation;

namespace OversShortQS.Client.Entities
{
       public partial class OversShortEX: OversShort
    {
        DTO.OversShortEX oversshortex;
        public OversShortEX(DTO.OversShortEX dto )
        {
           
             base.DTO = dto;   
             oversshortex = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.OversShortEX>(oversshortex);

        }

        public DTO.OversShortEX DTO
        {
            get
            {
             return oversshortex;
            }
            set
            {
                oversshortex = value;
            }
        }
        


       
       [NumberValidationAttribute]
public Nullable<double> ReceivedValue
		{ 
		    get { return this.oversshortex.ReceivedValue; }
			set
			{
			    if (value == this.oversshortex.ReceivedValue) return;
				this.oversshortex.ReceivedValue = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReceivedValue");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> InvoiceValue
		{ 
		    get { return this.oversshortex.InvoiceValue; }
			set
			{
			    if (value == this.oversshortex.InvoiceValue) return;
				this.oversshortex.InvoiceValue = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceValue");
			}
		}
     

        ObservableCollection<OverShortDetailsEX> _OverShortDetailsEXes = null;
        public new ObservableCollection<OverShortDetailsEX> OverShortDetailsEXes
		{
            
		    get 
				{ 
					if(_OverShortDetailsEXes != null) return _OverShortDetailsEXes;
					//if (this.oversshortex.OverShortDetailsEXes == null) Debugger.Break();
					if(this.oversshortex.OverShortDetailsEXes != null)
					{
						_OverShortDetailsEXes = new ObservableCollection<OverShortDetailsEX>(this.oversshortex.OverShortDetailsEXes.Select(x => new OverShortDetailsEX(x)));
					}
					
						_OverShortDetailsEXes.CollectionChanged += OverShortDetailsEXes_CollectionChanged; 
					
					return _OverShortDetailsEXes; 
				}
			set
			{
			    if (Equals(value, _OverShortDetailsEXes)) return;
				if (value != null)
					this.oversshortex.OverShortDetailsEXes = new ChangeTrackingCollection<DTO.OverShortDetailsEX>(value.Select(x => x.DTO).ToList());
                _OverShortDetailsEXes = value;
				if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_OverShortDetailsEXes != null)
				_OverShortDetailsEXes.CollectionChanged += OverShortDetailsEXes_CollectionChanged;               
				NotifyPropertyChanged("OverShortDetailsEXes");
			}
		}
        
        void OverShortDetailsEXes_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (OverShortDetailsEX itm in e.NewItems)
                    {
                        if (itm != null)
                        oversshortex.OverShortDetailsEXes.Add(itm.DTO);
                    }
                    if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (OverShortDetailsEX itm in e.OldItems)
                    {
                        if (itm != null)
                        oversshortex.OverShortDetailsEXes.Remove(itm.DTO);
                    }
					if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }

       private OverShortSuggestedDocument _OverShortSuggestedDocuments;
        public new OverShortSuggestedDocument OverShortSuggestedDocuments
		{
		    get
               { 
                  if (this.oversshortex != null)
                   {
                       if (_OverShortSuggestedDocuments != null)
                       {
                           if (this.oversshortex.OverShortSuggestedDocuments !=
                               _OverShortSuggestedDocuments.DTO)
                           {
                                if (this.oversshortex.OverShortSuggestedDocuments  != null)
                               _OverShortSuggestedDocuments = new OverShortSuggestedDocument(this.oversshortex.OverShortSuggestedDocuments);
                           }
                       }
                       else
                       {
                             if (this.oversshortex.OverShortSuggestedDocuments  != null)
                           _OverShortSuggestedDocuments = new OverShortSuggestedDocument(this.oversshortex.OverShortSuggestedDocuments);
                       }
                   }


             //       if (_OverShortSuggestedDocuments != null) return _OverShortSuggestedDocuments;
                       
             //       var i = new OverShortSuggestedDocument(){TrackingState = TrackingState.Added};
			//		//if (this.oversshortex.OverShortSuggestedDocuments == null) Debugger.Break();
			//		if (this.oversshortex.OverShortSuggestedDocuments != null)
            //        {
            //           i. = this.oversshortex.OverShortSuggestedDocuments;
            //        }
            //        else
            //        {
            //            this.oversshortex.OverShortSuggestedDocuments = i.;
             //       }
                           
            //        _OverShortSuggestedDocuments = i;
                     
                    return _OverShortSuggestedDocuments;
               }
			set
			{
			    if (value == _OverShortSuggestedDocuments) return;
                _OverShortSuggestedDocuments = value;
                if(value != null)
                     this.oversshortex.OverShortSuggestedDocuments = value.DTO;
				if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("OverShortSuggestedDocuments");
			}
		}
        


        ChangeTrackingCollection<DTO.OversShortEX> _changeTracker;    
        public ChangeTrackingCollection<DTO.OversShortEX> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}


