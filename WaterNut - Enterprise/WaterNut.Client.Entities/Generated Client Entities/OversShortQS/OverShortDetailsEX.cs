// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using WaterNut.Interfaces;
using Core.Common.Client.Entities;
using OversShortQS.Client.DTO;
using TrackableEntities.Client;
using TrackableEntities;
using Core.Common.Validation;

namespace OversShortQS.Client.Entities
{
       public partial class OverShortDetailsEX: OverShortDetail
    {
        DTO.OverShortDetailsEX overshortdetailsex;
        public OverShortDetailsEX(DTO.OverShortDetailsEX dto )
        {
           
             base.DTO = dto;   
             overshortdetailsex = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.OverShortDetailsEX>(overshortdetailsex);

        }

        public DTO.OverShortDetailsEX DTO
        {
            get
            {
             return overshortdetailsex;
            }
            set
            {
                overshortdetailsex = value;
            }
        }
        


       
       [NumberValidationAttribute]
public Nullable<double> ReceivedValue
		{ 
		    get { return this.overshortdetailsex.ReceivedValue; }
			set
			{
			    if (value == this.overshortdetailsex.ReceivedValue) return;
				this.overshortdetailsex.ReceivedValue = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReceivedValue");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> InvoiceValue
		{ 
		    get { return this.overshortdetailsex.InvoiceValue; }
			set
			{
			    if (value == this.overshortdetailsex.InvoiceValue) return;
				this.overshortdetailsex.InvoiceValue = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoiceValue");
			}
		}
     

       private OversShortEX _OversShortEX;
        public new OversShortEX OversShortEX
		{
		    get
               { 
                  if (this.overshortdetailsex != null)
                   {
                       if (_OversShortEX != null)
                       {
                           if (this.overshortdetailsex.OversShortEX !=
                               _OversShortEX.DTO)
                           {
                                if (this.overshortdetailsex.OversShortEX  != null)
                               _OversShortEX = new OversShortEX(this.overshortdetailsex.OversShortEX);
                           }
                       }
                       else
                       {
                             if (this.overshortdetailsex.OversShortEX  != null)
                           _OversShortEX = new OversShortEX(this.overshortdetailsex.OversShortEX);
                       }
                   }


             //       if (_OversShortEX != null) return _OversShortEX;
                       
             //       var i = new OversShortEX(){TrackingState = TrackingState.Added};
			//		//if (this.overshortdetailsex.OversShortEX == null) Debugger.Break();
			//		if (this.overshortdetailsex.OversShortEX != null)
            //        {
            //           i. = this.overshortdetailsex.OversShortEX;
            //        }
            //        else
            //        {
            //            this.overshortdetailsex.OversShortEX = i.;
             //       }
                           
            //        _OversShortEX = i;
                     
                    return _OversShortEX;
               }
			set
			{
			    if (value == _OversShortEX) return;
                _OversShortEX = value;
                if(value != null)
                     this.overshortdetailsex.OversShortEX = value.DTO;
				if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("OversShortEX");
			}
		}
        

       private InventoryItem _InventoryItem;
        public new InventoryItem InventoryItem
		{
		    get
               { 
                  if (this.overshortdetailsex != null)
                   {
                       if (_InventoryItem != null)
                       {
                           if (this.overshortdetailsex.InventoryItem !=
                               _InventoryItem.DTO)
                           {
                                if (this.overshortdetailsex.InventoryItem  != null)
                               _InventoryItem = new InventoryItem(this.overshortdetailsex.InventoryItem);
                           }
                       }
                       else
                       {
                             if (this.overshortdetailsex.InventoryItem  != null)
                           _InventoryItem = new InventoryItem(this.overshortdetailsex.InventoryItem);
                       }
                   }


             //       if (_InventoryItem != null) return _InventoryItem;
                       
             //       var i = new InventoryItem(){TrackingState = TrackingState.Added};
			//		//if (this.overshortdetailsex.InventoryItem == null) Debugger.Break();
			//		if (this.overshortdetailsex.InventoryItem != null)
            //        {
            //           i. = this.overshortdetailsex.InventoryItem;
            //        }
            //        else
            //        {
            //            this.overshortdetailsex.InventoryItem = i.;
             //       }
                           
            //        _InventoryItem = i;
                     
                    return _InventoryItem;
               }
			set
			{
			    if (value == _InventoryItem) return;
                _InventoryItem = value;
                if(value != null)
                     this.overshortdetailsex.InventoryItem = value.DTO;
				if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
                NotifyPropertyChanged("InventoryItem");
			}
		}
        

        ObservableCollection<OverShortAllocationsEX> _OverShortAllocationsEXes = null;
        public new ObservableCollection<OverShortAllocationsEX> OverShortAllocationsEXes
		{
            
		    get 
				{ 
					if(_OverShortAllocationsEXes != null) return _OverShortAllocationsEXes;
					//if (this.overshortdetailsex.OverShortAllocationsEXes == null) Debugger.Break();
					if(this.overshortdetailsex.OverShortAllocationsEXes != null)
					{
						_OverShortAllocationsEXes = new ObservableCollection<OverShortAllocationsEX>(this.overshortdetailsex.OverShortAllocationsEXes.Select(x => new OverShortAllocationsEX(x)));
					}
					
						_OverShortAllocationsEXes.CollectionChanged += OverShortAllocationsEXes_CollectionChanged; 
					
					return _OverShortAllocationsEXes; 
				}
			set
			{
			    if (Equals(value, _OverShortAllocationsEXes)) return;
				if (value != null)
					this.overshortdetailsex.OverShortAllocationsEXes = new ChangeTrackingCollection<DTO.OverShortAllocationsEX>(value.Select(x => x.DTO).ToList());
                _OverShortAllocationsEXes = value;
				if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_OverShortAllocationsEXes != null)
				_OverShortAllocationsEXes.CollectionChanged += OverShortAllocationsEXes_CollectionChanged;               
				NotifyPropertyChanged("OverShortAllocationsEXes");
			}
		}
        
        void OverShortAllocationsEXes_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (OverShortAllocationsEX itm in e.NewItems)
                    {
                        if (itm != null)
                        overshortdetailsex.OverShortAllocationsEXes.Add(itm.DTO);
                    }
                    if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (OverShortAllocationsEX itm in e.OldItems)
                    {
                        if (itm != null)
                        overshortdetailsex.OverShortAllocationsEXes.Remove(itm.DTO);
                    }
					if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.OverShortDetailsEX> _changeTracker;    
        public ChangeTrackingCollection<DTO.OverShortDetailsEX> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}


