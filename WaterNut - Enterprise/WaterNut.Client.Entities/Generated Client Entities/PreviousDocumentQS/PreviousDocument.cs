// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using WaterNut.Interfaces;
using Core.Common.Client.Entities;
using PreviousDocumentQS.Client.DTO;
using TrackableEntities.Client;
using TrackableEntities;
using Core.Common.Validation;

namespace PreviousDocumentQS.Client.Entities
{
       public partial class PreviousDocument: BaseEntity<PreviousDocument>
    {
        DTO.PreviousDocument previousdocument;
        public PreviousDocument(DTO.PreviousDocument dto )
        {
              previousdocument = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.PreviousDocument>(previousdocument);

        }

        public DTO.PreviousDocument DTO
        {
            get
            {
             return previousdocument;
            }
            set
            {
                previousdocument = value;
            }
        }
        


       [RequiredValidationAttribute(ErrorMessage= "ASYCUDA_ is required")]
       
public int ASYCUDA_Id
		{ 
		    get { return this.previousdocument.ASYCUDA_Id; }
			set
			{
			    if (value == this.previousdocument.ASYCUDA_Id) return;
				this.previousdocument.ASYCUDA_Id = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ASYCUDA_Id");
			}
		}
     

       
       
                
                
public string id
		{ 
		    get { return this.previousdocument.id; }
			set
			{
			    if (value == this.previousdocument.id) return;
				this.previousdocument.id = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("id");
			}
		}
     

       
       
                
                
public string CNumber
		{ 
		    get { return this.previousdocument.CNumber; }
			set
			{
			    if (value == this.previousdocument.CNumber) return;
				this.previousdocument.CNumber = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("CNumber");
			}
		}
     

       
       
public Nullable<System.DateTime> RegistrationDate
		{ 
		    get { return this.previousdocument.RegistrationDate; }
			set
			{
			    if (value == this.previousdocument.RegistrationDate) return;
				this.previousdocument.RegistrationDate = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("RegistrationDate");
			}
		}
     

       
       
public Nullable<bool> IsManuallyAssessed
		{ 
		    get { return this.previousdocument.IsManuallyAssessed; }
			set
			{
			    if (value == this.previousdocument.IsManuallyAssessed) return;
				this.previousdocument.IsManuallyAssessed = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("IsManuallyAssessed");
			}
		}
     

       
       
                
                
public string ReferenceNumber
		{ 
		    get { return this.previousdocument.ReferenceNumber; }
			set
			{
			    if (value == this.previousdocument.ReferenceNumber) return;
				this.previousdocument.ReferenceNumber = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ReferenceNumber");
			}
		}
     

       
       
public Nullable<System.DateTime> EffectiveRegistrationDate
		{ 
		    get { return this.previousdocument.EffectiveRegistrationDate; }
			set
			{
			    if (value == this.previousdocument.EffectiveRegistrationDate) return;
				this.previousdocument.EffectiveRegistrationDate = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("EffectiveRegistrationDate");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> TotalValue
		{ 
		    get { return this.previousdocument.TotalValue; }
			set
			{
			    if (value == this.previousdocument.TotalValue) return;
				this.previousdocument.TotalValue = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("TotalValue");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> AllocatedValue
		{ 
		    get { return this.previousdocument.AllocatedValue; }
			set
			{
			    if (value == this.previousdocument.AllocatedValue) return;
				this.previousdocument.AllocatedValue = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllocatedValue");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<double> PiValue
		{ 
		    get { return this.previousdocument.PiValue; }
			set
			{
			    if (value == this.previousdocument.PiValue) return;
				this.previousdocument.PiValue = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("PiValue");
			}
		}
     

       
       
public Nullable<int> AsycudaDocumentSetId
		{ 
		    get { return this.previousdocument.AsycudaDocumentSetId; }
			set
			{
			    if (value == this.previousdocument.AsycudaDocumentSetId) return;
				this.previousdocument.AsycudaDocumentSetId = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AsycudaDocumentSetId");
			}
		}
     

       
       
public Nullable<bool> DoNotAllocate
		{ 
		    get { return this.previousdocument.DoNotAllocate; }
			set
			{
			    if (value == this.previousdocument.DoNotAllocate) return;
				this.previousdocument.DoNotAllocate = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DoNotAllocate");
			}
		}
     

       
       
                
                
public string Description
		{ 
		    get { return this.previousdocument.Description; }
			set
			{
			    if (value == this.previousdocument.Description) return;
				this.previousdocument.Description = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "BLNumber has a max length of 50 letters ")]
public string BLNumber
		{ 
		    get { return this.previousdocument.BLNumber; }
			set
			{
			    if (value == this.previousdocument.BLNumber) return;
				this.previousdocument.BLNumber = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("BLNumber");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> Lines
		{ 
		    get { return this.previousdocument.Lines; }
			set
			{
			    if (value == this.previousdocument.Lines) return;
				this.previousdocument.Lines = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Lines");
			}
		}
     

       
       
                
                
public string DocumentType
		{ 
		    get { return this.previousdocument.DocumentType; }
			set
			{
			    if (value == this.previousdocument.DocumentType) return;
				this.previousdocument.DocumentType = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("DocumentType");
			}
		}
     

        ObservableCollection<PreviousDocumentItem> _PreviousDocumentItems = null;
        public  ObservableCollection<PreviousDocumentItem> PreviousDocumentItems
		{
            
		    get 
				{ 
					if(_PreviousDocumentItems != null) return _PreviousDocumentItems;
					//if (this.previousdocument.PreviousDocumentItems == null) Debugger.Break();
					if(this.previousdocument.PreviousDocumentItems != null)
					{
						_PreviousDocumentItems = new ObservableCollection<PreviousDocumentItem>(this.previousdocument.PreviousDocumentItems.Select(x => new PreviousDocumentItem(x)));
					}
					
						_PreviousDocumentItems.CollectionChanged += PreviousDocumentItems_CollectionChanged; 
					
					return _PreviousDocumentItems; 
				}
			set
			{
			    if (Equals(value, _PreviousDocumentItems)) return;
				if (value != null)
					this.previousdocument.PreviousDocumentItems = new ChangeTrackingCollection<DTO.PreviousDocumentItem>(value.Select(x => x.DTO).ToList());
                _PreviousDocumentItems = value;
				if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				if (_PreviousDocumentItems != null)
				_PreviousDocumentItems.CollectionChanged += PreviousDocumentItems_CollectionChanged;               
				NotifyPropertyChanged("PreviousDocumentItems");
			}
		}
        
        void PreviousDocumentItems_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (PreviousDocumentItem itm in e.NewItems)
                    {
                        if (itm != null)
                        previousdocument.PreviousDocumentItems.Add(itm.DTO);
                    }
                    if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (PreviousDocumentItem itm in e.OldItems)
                    {
                        if (itm != null)
                        previousdocument.PreviousDocumentItems.Remove(itm.DTO);
                    }
					if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
                    break;
                
            }
        }


        ChangeTrackingCollection<DTO.PreviousDocument> _changeTracker;    
        public ChangeTrackingCollection<DTO.PreviousDocument> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}


