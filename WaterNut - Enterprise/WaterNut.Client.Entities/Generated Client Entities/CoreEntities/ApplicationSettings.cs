// <autogenerated>
//   This file was generated by T4 code generator AllClientEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using System.Diagnostics;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using WaterNut.Interfaces;
using Core.Common.Client.Entities;
using CoreEntities.Client.DTO;
using TrackableEntities.Client;
using TrackableEntities;
using Core.Common.Validation;

namespace CoreEntities.Client.Entities
{
       public partial class ApplicationSettings: BaseEntity<ApplicationSettings>
    {
        DTO.ApplicationSettings applicationsettings;
        public ApplicationSettings(DTO.ApplicationSettings dto )
        {
              applicationsettings = dto;
             _changeTracker = new ChangeTrackingCollection<DTO.ApplicationSettings>(applicationsettings);

        }

        public DTO.ApplicationSettings DTO
        {
            get
            {
             return applicationsettings;
            }
            set
            {
                applicationsettings = value;
            }
        }
       [RequiredValidationAttribute(ErrorMessage= "ApplicationSettings is required")]
       
public int ApplicationSettingsId
		{ 
		    get { return this.applicationsettings.ApplicationSettingsId; }
			set
			{
			    if (value == this.applicationsettings.ApplicationSettingsId) return;
				this.applicationsettings.ApplicationSettingsId = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ApplicationSettingsId");
			}
		}
     

       
       
                
                
public string Description
		{ 
		    get { return this.applicationsettings.Description; }
			set
			{
			    if (value == this.applicationsettings.Description) return;
				this.applicationsettings.Description = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("Description");
			}
		}
     

       
       [NumberValidationAttribute]
public Nullable<int> MaxEntryLines
		{ 
		    get { return this.applicationsettings.MaxEntryLines; }
			set
			{
			    if (value == this.applicationsettings.MaxEntryLines) return;
				this.applicationsettings.MaxEntryLines = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("MaxEntryLines");
			}
		}
     

       
       
                
                
public string SoftwareName
		{ 
		    get { return this.applicationsettings.SoftwareName; }
			set
			{
			    if (value == this.applicationsettings.SoftwareName) return;
				this.applicationsettings.SoftwareName = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("SoftwareName");
			}
		}
     

       
       
                
                
public string AllowCounterPoint
		{ 
		    get { return this.applicationsettings.AllowCounterPoint; }
			set
			{
			    if (value == this.applicationsettings.AllowCounterPoint) return;
				this.applicationsettings.AllowCounterPoint = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowCounterPoint");
			}
		}
     

       
       
public Nullable<bool> GroupEX9
		{ 
		    get { return this.applicationsettings.GroupEX9; }
			set
			{
			    if (value == this.applicationsettings.GroupEX9) return;
				this.applicationsettings.GroupEX9 = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("GroupEX9");
			}
		}
     

       
       
public Nullable<bool> InvoicePerEntry
		{ 
		    get { return this.applicationsettings.InvoicePerEntry; }
			set
			{
			    if (value == this.applicationsettings.InvoicePerEntry) return;
				this.applicationsettings.InvoicePerEntry = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("InvoicePerEntry");
			}
		}
     

       
       
                
                
public string AllowTariffCodes
		{ 
		    get { return this.applicationsettings.AllowTariffCodes; }
			set
			{
			    if (value == this.applicationsettings.AllowTariffCodes) return;
				this.applicationsettings.AllowTariffCodes = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowTariffCodes");
			}
		}
     

       
       
                
                
public string AllowWareHouse
		{ 
		    get { return this.applicationsettings.AllowWareHouse; }
			set
			{
			    if (value == this.applicationsettings.AllowWareHouse) return;
				this.applicationsettings.AllowWareHouse = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowWareHouse");
			}
		}
     

       
       
                
                
public string AllowXBond
		{ 
		    get { return this.applicationsettings.AllowXBond; }
			set
			{
			    if (value == this.applicationsettings.AllowXBond) return;
				this.applicationsettings.AllowXBond = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowXBond");
			}
		}
     

       
       
                
                
public string AllowAsycudaManager
		{ 
		    get { return this.applicationsettings.AllowAsycudaManager; }
			set
			{
			    if (value == this.applicationsettings.AllowAsycudaManager) return;
				this.applicationsettings.AllowAsycudaManager = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowAsycudaManager");
			}
		}
     

       
       
                
                
public string AllowQuickBooks
		{ 
		    get { return this.applicationsettings.AllowQuickBooks; }
			set
			{
			    if (value == this.applicationsettings.AllowQuickBooks) return;
				this.applicationsettings.AllowQuickBooks = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowQuickBooks");
			}
		}
     

       
       
public Nullable<bool> ItemDescriptionContainsAsycudaAttribute
		{ 
		    get { return this.applicationsettings.ItemDescriptionContainsAsycudaAttribute; }
			set
			{
			    if (value == this.applicationsettings.ItemDescriptionContainsAsycudaAttribute) return;
				this.applicationsettings.ItemDescriptionContainsAsycudaAttribute = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("ItemDescriptionContainsAsycudaAttribute");
			}
		}
     

       
       
                
                
public string AllowExportToExcel
		{ 
		    get { return this.applicationsettings.AllowExportToExcel; }
			set
			{
			    if (value == this.applicationsettings.AllowExportToExcel) return;
				this.applicationsettings.AllowExportToExcel = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowExportToExcel");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowAutoWeightCalculation has a max length of 50 letters ")]
public string AllowAutoWeightCalculation
		{ 
		    get { return this.applicationsettings.AllowAutoWeightCalculation; }
			set
			{
			    if (value == this.applicationsettings.AllowAutoWeightCalculation) return;
				this.applicationsettings.AllowAutoWeightCalculation = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowAutoWeightCalculation");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowEntryPerIM7 has a max length of 50 letters ")]
public string AllowEntryPerIM7
		{ 
		    get { return this.applicationsettings.AllowEntryPerIM7; }
			set
			{
			    if (value == this.applicationsettings.AllowEntryPerIM7) return;
				this.applicationsettings.AllowEntryPerIM7 = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowEntryPerIM7");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowSalesToPI has a max length of 50 letters ")]
public string AllowSalesToPI
		{ 
		    get { return this.applicationsettings.AllowSalesToPI; }
			set
			{
			    if (value == this.applicationsettings.AllowSalesToPI) return;
				this.applicationsettings.AllowSalesToPI = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowSalesToPI");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowEffectiveAssessmentDate has a max length of 50 letters ")]
public string AllowEffectiveAssessmentDate
		{ 
		    get { return this.applicationsettings.AllowEffectiveAssessmentDate; }
			set
			{
			    if (value == this.applicationsettings.AllowEffectiveAssessmentDate) return;
				this.applicationsettings.AllowEffectiveAssessmentDate = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowEffectiveAssessmentDate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowAutoFreightCalculation has a max length of 50 letters ")]
public string AllowAutoFreightCalculation
		{ 
		    get { return this.applicationsettings.AllowAutoFreightCalculation; }
			set
			{
			    if (value == this.applicationsettings.AllowAutoFreightCalculation) return;
				this.applicationsettings.AllowAutoFreightCalculation = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowAutoFreightCalculation");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowSubItems has a max length of 50 letters ")]
public string AllowSubItems
		{ 
		    get { return this.applicationsettings.AllowSubItems; }
			set
			{
			    if (value == this.applicationsettings.AllowSubItems) return;
				this.applicationsettings.AllowSubItems = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowSubItems");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowEntryDoNotAllocate has a max length of 50 letters ")]
public string AllowEntryDoNotAllocate
		{ 
		    get { return this.applicationsettings.AllowEntryDoNotAllocate; }
			set
			{
			    if (value == this.applicationsettings.AllowEntryDoNotAllocate) return;
				this.applicationsettings.AllowEntryDoNotAllocate = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowEntryDoNotAllocate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowPreviousItems has a max length of 50 letters ")]
public string AllowPreviousItems
		{ 
		    get { return this.applicationsettings.AllowPreviousItems; }
			set
			{
			    if (value == this.applicationsettings.AllowPreviousItems) return;
				this.applicationsettings.AllowPreviousItems = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowPreviousItems");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowOversShort has a max length of 50 letters ")]
public string AllowOversShort
		{ 
		    get { return this.applicationsettings.AllowOversShort; }
			set
			{
			    if (value == this.applicationsettings.AllowOversShort) return;
				this.applicationsettings.AllowOversShort = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowOversShort");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowContainers has a max length of 50 letters ")]
public string AllowContainers
		{ 
		    get { return this.applicationsettings.AllowContainers; }
			set
			{
			    if (value == this.applicationsettings.AllowContainers) return;
				this.applicationsettings.AllowContainers = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowContainers");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowNonXEntries has a max length of 50 letters ")]
public string AllowNonXEntries
		{ 
		    get { return this.applicationsettings.AllowNonXEntries; }
			set
			{
			    if (value == this.applicationsettings.AllowNonXEntries) return;
				this.applicationsettings.AllowNonXEntries = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowNonXEntries");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowValidateTariffCodes has a max length of 50 letters ")]
public string AllowValidateTariffCodes
		{ 
		    get { return this.applicationsettings.AllowValidateTariffCodes; }
			set
			{
			    if (value == this.applicationsettings.AllowValidateTariffCodes) return;
				this.applicationsettings.AllowValidateTariffCodes = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowValidateTariffCodes");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowCleanBond has a max length of 50 letters ")]
public string AllowCleanBond
		{ 
		    get { return this.applicationsettings.AllowCleanBond; }
			set
			{
			    if (value == this.applicationsettings.AllowCleanBond) return;
				this.applicationsettings.AllowCleanBond = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowCleanBond");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "OrderEntriesBy has a max length of 50 letters ")]
public string OrderEntriesBy
		{ 
		    get { return this.applicationsettings.OrderEntriesBy; }
			set
			{
			    if (value == this.applicationsettings.OrderEntriesBy) return;
				this.applicationsettings.OrderEntriesBy = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("OrderEntriesBy");
			}
		}
     

       
       
public Nullable<System.DateTime> OpeningStockDate
		{ 
		    get { return this.applicationsettings.OpeningStockDate; }
			set
			{
			    if (value == this.applicationsettings.OpeningStockDate) return;
				this.applicationsettings.OpeningStockDate = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("OpeningStockDate");
			}
		}
     

       
       
                
                [MaxLength(50, ErrorMessage = "AllowWeightEqualQuantity has a max length of 50 letters ")]
public string AllowWeightEqualQuantity
		{ 
		    get { return this.applicationsettings.AllowWeightEqualQuantity; }
			set
			{
			    if (value == this.applicationsettings.AllowWeightEqualQuantity) return;
				this.applicationsettings.AllowWeightEqualQuantity = value;
                if(this.DTO.TrackingState == TrackableEntities.TrackingState.Unchanged)this.DTO.TrackingState = TrackableEntities.TrackingState.Modified;
				NotifyPropertyChanged("AllowWeightEqualQuantity");
			}
		}
     


        ChangeTrackingCollection<DTO.ApplicationSettings> _changeTracker;    
        public ChangeTrackingCollection<DTO.ApplicationSettings> ChangeTracker
        {
            get
            {
                return _changeTracker;
            }
        }

        public new TrackableEntities.TrackingState TrackingState
        {
            get
            {
                return this.DTO.TrackingState;
            }
            set
            {
                this.DTO.TrackingState = value;
                NotifyPropertyChanged("TrackingState");
            }
        }

    }
}


