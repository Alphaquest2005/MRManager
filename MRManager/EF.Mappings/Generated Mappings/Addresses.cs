// <autogenerated>
//   This file was generated by T4 code generator MRManger-DataEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using EF.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace EF.Mappings
{
	public class AddressesMap
	{
		public static void Map(EntityTypeBuilder<Addresses> entityBuilder)
		{
			entityBuilder.ToTable("Addresses", "dbo");
			entityBuilder.HasKey(t => t.Id);
			entityBuilder.Property(t => t.Id).HasColumnName("Id").UseSqlServerIdentityColumn();	
			entityBuilder.Property(t => t.EntryDateTime).HasColumnName("EntryDateTime").IsRequired();
		//-------------------Navigation Properties -------------------------------//
				entityBuilder.HasOne(p => p.AddressCities).WithOne(p => p.Addresses).HasForeignKey<AddressCities>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.AddressCountries).WithOne(p => p.Addresses).HasForeignKey<AddressCountries>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.AddressLines).WithOne(p => p.Addresses).HasForeignKey(c => c.AddressId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.AddressParishes).WithOne(p => p.Addresses).HasForeignKey<AddressParishes>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.AddressStates).WithOne(p => p.Addresses).HasForeignKey<AddressStates>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.AddressZipCodes).WithOne(p => p.Addresses).HasForeignKey<AddressZipCodes>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.ForeignAddresses).WithOne(p => p.Addresses).HasForeignKey(c => c.AddressId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.OrganisationAddress).WithOne(p => p.Addresses).HasForeignKey(c => c.AddressId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.PersonAddresses).WithOne(p => p.Addresses).HasForeignKey(c => c.AddressId).OnDelete(DeleteBehavior.Restrict);
	
				//----------------Parent Properties
	
		}
	}
}
