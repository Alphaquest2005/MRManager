// <autogenerated>
//   This file was generated by T4 code generator MRManger-DataEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using EF.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace EF.Mappings
{
	public class Persons_NonResidentPatientMap
	{
		public static void Map(EntityTypeBuilder<Persons_NonResidentPatient> entityBuilder)
		{
			entityBuilder.ToTable("Persons_NonResidentPatient", "dbo");
			entityBuilder.HasKey(t => t.Id);
			entityBuilder.Property(t => t.Id).HasColumnName("Id").ValueGeneratedNever();	
			entityBuilder.Property(t => t.Id).HasColumnName("Id").IsRequired();
		//-------------------Navigation Properties -------------------------------//
				entityBuilder.HasOne(p => p.BoatInfo).WithOne(p => p.Persons_NonResidentPatient).HasForeignKey<BoatInfo>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.ForeignAddresses).WithOne(p => p.Persons_NonResidentPatient).HasForeignKey(c => c.PersonId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.ForeignPhoneNumbers).WithOne(p => p.Persons_NonResidentPatient).HasForeignKey(c => c.PersonId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.NonResidentCompanyInfo).WithOne(p => p.Persons_NonResidentPatient).HasForeignKey<NonResidentCompanyInfo>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.NonResidentHotelInfo).WithOne(p => p.Persons_NonResidentPatient).HasForeignKey<NonResidentHotelInfo>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.Persons_ArrivalDepartureInfo).WithOne(p => p.Persons_NonResidentPatient).HasForeignKey<Persons_ArrivalDepartureInfo>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.StudentInfo).WithOne(p => p.Persons_NonResidentPatient).HasForeignKey<StudentInfo>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
	
				//----------------Parent Properties
				//entityBuilder.HasOne(p => p.Persons_Patient).WithOne(p => p.Persons_NonResidentPatient).HasForeignKey<Persons_Patient>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
	
		}
	}
}
