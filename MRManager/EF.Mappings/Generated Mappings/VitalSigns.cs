// <autogenerated>
//   This file was generated by T4 code generator MRManger-DataEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using EF.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace EF.Mappings
{
	public class VitalSignsMap
	{
		public static void Map(EntityTypeBuilder<VitalSigns> entityBuilder)
		{
			entityBuilder.ToTable("VitalSigns", "Vitals");
			entityBuilder.HasKey(t => t.Id);
			entityBuilder.Property(t => t.Id).HasColumnName("Id").UseSqlServerIdentityColumn();	
			entityBuilder.Property(t => t.DateTimeOfReading).HasColumnName("DateTimeOfReading").IsRequired();
			entityBuilder.Property(t => t.ReaderId).HasColumnName("ReaderId").IsRequired();
		//-------------------Navigation Properties -------------------------------//
				entityBuilder.HasOne(p => p.BloodPressure).WithOne(p => p.VitalSigns).HasForeignKey<BloodPressure>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.Height).WithOne(p => p.VitalSigns).HasForeignKey<Height>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.PatientVisitVitalSigns).WithOne(p => p.VitalSigns).HasForeignKey(c => c.VitalSignsId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.Pulse).WithOne(p => p.VitalSigns).HasForeignKey<Pulse>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.Respiration).WithOne(p => p.VitalSigns).HasForeignKey<Respiration>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.Temperature).WithOne(p => p.VitalSigns).HasForeignKey<Temperature>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.Weight).WithOne(p => p.VitalSigns).HasForeignKey<Weight>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
	
				//----------------Parent Properties
				//entityBuilder.HasOne(p => p.Persons).WithMany(p => p.VitalSigns).HasForeignKey(c => c.ReaderId).OnDelete(DeleteBehavior.Restrict);
	
		}
	}
}
