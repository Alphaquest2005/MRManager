// <autogenerated>
//   This file was generated by T4 code generator MRManger-DataEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using EF.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace EF.Mappings
{
	public class Persons_PatientMap
	{
		public static void Map(EntityTypeBuilder<Persons_Patient> entityBuilder)
		{
			entityBuilder.ToTable("Persons_Patient", "dbo");
			entityBuilder.HasKey(t => t.Id);
			entityBuilder.Property(t => t.Id).HasColumnName("Id").ValueGeneratedNever();	
			entityBuilder.Property(t => t.CountryId).HasColumnName("CountryId").IsRequired();
			entityBuilder.Property(t => t.Id).HasColumnName("Id").IsRequired();
			entityBuilder.Property(t => t.DateOfBirth).HasColumnName("DateOfBirth").IsRequired();
			entityBuilder.Property(t => t.SexId).HasColumnName("SexId").IsRequired();
		//-------------------Navigation Properties -------------------------------//
				entityBuilder.HasMany(x => x.PatientAllergies).WithOne(p => p.Persons_Patient).HasForeignKey(c => c.PatientId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.PatientDoctor).WithOne(p => p.Persons_Patient).HasForeignKey(c => c.PatientId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.PatientReligon).WithOne(p => p.Persons_Patient).HasForeignKey(c => c.PersonId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.PersonCountryOfResidence).WithOne(p => p.Persons_Patient).HasForeignKey(c => c.PersonId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.PersonJob).WithOne(p => p.Persons_Patient).HasForeignKey(c => c.PersonId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.PersonMaritalStatus).WithOne(p => p.Persons_Patient).HasForeignKey(c => c.PersonId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.Persons_EmergencyContact).WithOne(p => p.Persons_Patient).HasForeignKey(c => c.PatientId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.Persons_NextOfKin).WithOne(p => p.Persons_Patient).HasForeignKey(c => c.PatientId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.Persons_NonResidentPatient).WithOne(p => p.Persons_Patient).HasForeignKey<Persons_NonResidentPatient>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
	
				//----------------Parent Properties
				//entityBuilder.HasOne(p => p.Countries).WithMany(p => p.Persons_Patient).HasForeignKey(c => c.CountryId).OnDelete(DeleteBehavior.Restrict);
				//entityBuilder.HasOne(p => p.Persons).WithOne(p => p.Persons_Patient).HasForeignKey<Persons>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
				//entityBuilder.HasOne(p => p.Sex).WithMany(p => p.Persons_Patient).HasForeignKey(c => c.SexId).OnDelete(DeleteBehavior.Restrict);
	
		}
	}
}
