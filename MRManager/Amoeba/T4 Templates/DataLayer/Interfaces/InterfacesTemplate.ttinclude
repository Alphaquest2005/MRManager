<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="C:\Prism\GitRepositiory\MRManager\Amoeba\T4 Repository\bin\Debug\T4Entities.dll" #>
<#@ import namespace="T4Entities" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="C:\Prism\GitRepositiory\MRManager\Amoeba\Amoeba\Amoeba\packages\morelinq.1.4.0\lib\net35\MoreLinq.dll" #>
<#@ import namespace="MoreLinq" #>
<#@ import namespace="System.Linq" #>
<#+
// <copyright file="EFEntityTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class InterfaceTemplate : CSharpTemplate
{
	public InterfaceTemplate(ApplicationEntity entity)
	{
		Entity = entity;
	}

	public ApplicationEntity Entity { get;}

	public override string TransformText()
	{
		base.TransformText();
#>
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using SystemInterfaces;


namespace Interfaces
{
	[InheritedExport]	
	public partial interface I<#= Entity.Entity.Name #>:IEntity  
	{
<#+
	foreach (DataProperty prop in Entity.Entity.EntityProperties.SelectMany(x=>x.DataProperties).Where(x => x.ModelType.Name != "EntityId" && x.EntityProperty.PropertyName != "Id").DistinctBy(x => x.EntityPropertyId))
	{
#>
		<#=prop.DataType.Name #> <#= prop.EntityProperty.PropertyName #> { get;}
<#+ }
#>



	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
