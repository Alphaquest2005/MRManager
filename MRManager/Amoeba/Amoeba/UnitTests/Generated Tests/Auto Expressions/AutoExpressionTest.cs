// <autogenerated>
//   This file was generated by T4 code generator Amoeba-Master.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using EF.DBContexts;
using Entity.Expressions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTests.Expressions
{
	[TestClass]
	public class  AutoExpressionTests
	{
		[TestMethod]
		public void ApplicationSettingExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.ApplicationSettings.Select(ApplicationSettingExpressions.ApplicationSettingAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ApplicationEntitiesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.ApplicationEntities.Select(ApplicationEntitiesExpressions.ApplicationEntitiesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ApplicationsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Applications.Select(ApplicationsExpressions.ApplicationsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void DataPropertiesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.DataProperties.Select(DataPropertiesExpressions.DataPropertiesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void DataTypesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.DataTypes.Select(DataTypesExpressions.DataTypesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void EntitiesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Entities.Select(EntitiesExpressions.EntitiesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void EntityPropertiesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.EntityProperties.Select(EntityPropertiesExpressions.EntityPropertiesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void EntityRelationshipsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.EntityRelationships.Select(EntityRelationshipsExpressions.EntityRelationshipsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void EntityViewExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.EntityView.Select(EntityViewExpressions.EntityViewAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void EntityViewEntityPropertiesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.EntityViewEntityProperties.Select(EntityViewEntityPropertiesExpressions.EntityViewEntityPropertiesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void EntityViewPropertiesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.EntityViewProperties.Select(EntityViewPropertiesExpressions.EntityViewPropertiesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void EntityViewPropertyFunctionExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.EntityViewPropertyFunction.Select(EntityViewPropertyFunctionExpressions.EntityViewPropertyFunctionAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void EntityViewPropertyFunctionParameterExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.EntityViewPropertyFunctionParameter.Select(EntityViewPropertyFunctionParameterExpressions.EntityViewPropertyFunctionParameterAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void EntityViewViewPropertiesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.EntityViewViewProperties.Select(EntityViewViewPropertiesExpressions.EntityViewViewPropertiesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void FunctionBodyExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.FunctionBody.Select(FunctionBodyExpressions.FunctionBodyAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void FunctionParametersExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.FunctionParameters.Select(FunctionParametersExpressions.FunctionParametersAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void FunctionReturnTypeExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.FunctionReturnType.Select(FunctionReturnTypeExpressions.FunctionReturnTypeAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void FunctionsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Functions.Select(FunctionsExpressions.FunctionsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void FunctionSetFunctionsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.FunctionSetFunctions.Select(FunctionSetFunctionsExpressions.FunctionSetFunctionsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void FunctionSetsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.FunctionSets.Select(FunctionSetsExpressions.FunctionSetsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void LayersExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Layers.Select(LayersExpressions.LayersAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void LayoutExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Layout.Select(LayoutExpressions.LayoutAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ModelTypesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.ModelTypes.Select(ModelTypesExpressions.ModelTypesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void OperatorsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Operators.Select(OperatorsExpressions.OperatorsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ParametersExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Parameters.Select(ParametersExpressions.ParametersAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PartsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Parts.Select(PartsExpressions.PartsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PresentationPropertiesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.PresentationProperties.Select(PresentationPropertiesExpressions.PresentationPropertiesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PrimaryKeyOptionsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.PrimaryKeyOptions.Select(PrimaryKeyOptionsExpressions.PrimaryKeyOptionsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ProcessExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Process.Select(ProcessExpressions.ProcessAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ProcessStepsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.ProcessSteps.Select(ProcessStepsExpressions.ProcessStepsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ProcessStepScreensExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.ProcessStepScreens.Select(ProcessStepScreensExpressions.ProcessStepScreensAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ProjectsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Projects.Select(ProjectsExpressions.ProjectsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void RelationshipTypesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.RelationshipTypes.Select(RelationshipTypesExpressions.RelationshipTypesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ScreenLayoutsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.ScreenLayouts.Select(ScreenLayoutsExpressions.ScreenLayoutsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ScreenPartsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.ScreenParts.Select(ScreenPartsExpressions.ScreenPartsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ScreensExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Screens.Select(ScreensExpressions.ScreensAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ScreenViewsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.ScreenViews.Select(ScreenViewsExpressions.ScreenViewsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void SettingsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Settings.Select(SettingsExpressions.SettingsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void SettingsNamesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.SettingsNames.Select(SettingsNamesExpressions.SettingsNamesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void StateMachinesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.StateMachines.Select(StateMachinesExpressions.StateMachinesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void StateMachineStatesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.StateMachineStates.Select(StateMachineStatesExpressions.StateMachineStatesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void StateMachineTriggersExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.StateMachineTriggers.Select(StateMachineTriggersExpressions.StateMachineTriggersAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void StatesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.States.Select(StatesExpressions.StatesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void StepsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Steps.Select(StepsExpressions.StepsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void TestValuesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.TestValues.Select(TestValuesExpressions.TestValuesAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void TriggersExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Triggers.Select(TriggersExpressions.TriggersAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ViewEntityExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.ViewEntity.Select(ViewEntityExpressions.ViewEntityAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ViewsExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Views.Select(ViewsExpressions.ViewsAutoViewExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
	}
}
