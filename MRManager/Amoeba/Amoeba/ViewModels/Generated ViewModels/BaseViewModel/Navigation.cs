// <autogenerated>
//   This file was generated by T4 code generator Amoeba-Master.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
using SystemMessages;
using CommonMessages;
using DataEntites;
using EF.Entities;
using EventAggregator;
using EventMessages;
using Interfaces;
using JB.Collections.Reactive;
using ReactiveUI;
using System.Linq;
using DesignTime;

namespace ViewModels
{
	public partial class BaseViewModel
	{
		 
		private static MessageSource msgSource => new MessageSource(BaseViewModel.Instance.ToString());
				static BaseViewModel()
				{
					try
					{
						_instance = new BaseViewModel();
						if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) 
							{
								ApplicationEntitiesCache.Add(DesignDataContext.ApplicationEntities);
								ApplicationsCache.Add(DesignDataContext.Applications);
								DataPropertiesCache.Add(DesignDataContext.DataProperties);
								DataTypesCache.Add(DesignDataContext.DataTypes);
								EntitiesCache.Add(DesignDataContext.Entities);
								EntityPropertiesCache.Add(DesignDataContext.EntityProperties);
								EntityRelationshipsCache.Add(DesignDataContext.EntityRelationships);
								EntityViewCache.Add(DesignDataContext.EntityView);
								EntityViewEntityPropertiesCache.Add(DesignDataContext.EntityViewEntityProperties);
								EntityViewPropertiesCache.Add(DesignDataContext.EntityViewProperties);
								EntityViewViewPropertiesCache.Add(DesignDataContext.EntityViewViewProperties);
								LayersCache.Add(DesignDataContext.Layers);
								ModelTypesCache.Add(DesignDataContext.ModelTypes);
								ParametersCache.Add(DesignDataContext.Parameters);
								PrimaryKeyOptionsCache.Add(DesignDataContext.PrimaryKeyOptions);
								ProjectsCache.Add(DesignDataContext.Projects);
								RelationshipTypesCache.Add(DesignDataContext.RelationshipTypes);
								SettingsCache.Add(DesignDataContext.Settings);
								TestValuesCache.Add(DesignDataContext.TestValues);
						}
 						EventMessageBus.Current.GetEvent<EntitySetLoaded<IApplicationEntities>>(msgSource).Subscribe(x => handleApplicationEntitiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IApplicationEntities>>(msgSource).Subscribe(x => handleCurrentApplicationEntitiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IApplicationEntities>>(msgSource).Subscribe(x => handleCurrentApplicationEntitiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IApplicationEntities>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IApplicationEntities>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IApplicationEntities>>(msgSource).Subscribe(x => handleApplicationEntitiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IApplicationEntities>>(msgSource).Subscribe(x => handleApplicationEntitiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<ISettings>>(msgSource).Subscribe(x => handleSettingsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<ISettings>>(msgSource).Subscribe(x => handleCurrentSettingsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<ISettings>>(msgSource).Subscribe(x => handleCurrentSettingsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<ISettings>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<ISettings>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<ISettings>>(msgSource).Subscribe(x => handleSettingsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<ISettings>>(msgSource).Subscribe(x => handleSettingsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IApplications>>(msgSource).Subscribe(x => handleApplicationsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IApplications>>(msgSource).Subscribe(x => handleCurrentApplicationsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IApplications>>(msgSource).Subscribe(x => handleCurrentApplicationsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IApplications>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IApplications>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IApplications>>(msgSource).Subscribe(x => handleApplicationsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IApplications>>(msgSource).Subscribe(x => handleApplicationsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handlePrimaryKeyOptionsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handleCurrentPrimaryKeyOptionsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handleCurrentPrimaryKeyOptionsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IPrimaryKeyOptions>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IPrimaryKeyOptions>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handlePrimaryKeyOptionsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handlePrimaryKeyOptionsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IDataProperties>>(msgSource).Subscribe(x => handleDataPropertiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IDataProperties>>(msgSource).Subscribe(x => handleCurrentDataPropertiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IDataProperties>>(msgSource).Subscribe(x => handleCurrentDataPropertiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IDataProperties>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IDataProperties>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IDataProperties>>(msgSource).Subscribe(x => handleDataPropertiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IDataProperties>>(msgSource).Subscribe(x => handleDataPropertiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionParameterUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionParameterChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityViewPropertyFunctionParameter>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityViewPropertyFunctionParameter>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IFunctionParameters>>(msgSource).Subscribe(x => handleFunctionParametersLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IFunctionParameters>>(msgSource).Subscribe(x => handleCurrentFunctionParametersUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IFunctionParameters>>(msgSource).Subscribe(x => handleCurrentFunctionParametersChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IFunctionParameters>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IFunctionParameters>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IFunctionParameters>>(msgSource).Subscribe(x => handleFunctionParametersCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IFunctionParameters>>(msgSource).Subscribe(x => handleFunctionParametersDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IParameters>>(msgSource).Subscribe(x => handleParametersLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IParameters>>(msgSource).Subscribe(x => handleCurrentParametersUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IParameters>>(msgSource).Subscribe(x => handleCurrentParametersChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IParameters>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IParameters>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IParameters>>(msgSource).Subscribe(x => handleParametersCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IParameters>>(msgSource).Subscribe(x => handleParametersDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IFunctionReturnType>>(msgSource).Subscribe(x => handleFunctionReturnTypeLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IFunctionReturnType>>(msgSource).Subscribe(x => handleCurrentFunctionReturnTypeUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IFunctionReturnType>>(msgSource).Subscribe(x => handleCurrentFunctionReturnTypeChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IFunctionReturnType>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IFunctionReturnType>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IFunctionReturnType>>(msgSource).Subscribe(x => handleFunctionReturnTypeCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IFunctionReturnType>>(msgSource).Subscribe(x => handleFunctionReturnTypeDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IDataTypes>>(msgSource).Subscribe(x => handleDataTypesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IDataTypes>>(msgSource).Subscribe(x => handleCurrentDataTypesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IDataTypes>>(msgSource).Subscribe(x => handleCurrentDataTypesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IDataTypes>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IDataTypes>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IDataTypes>>(msgSource).Subscribe(x => handleDataTypesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IDataTypes>>(msgSource).Subscribe(x => handleDataTypesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IApplicationEntities>>(msgSource).Subscribe(x => handleApplicationEntitiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IApplicationEntities>>(msgSource).Subscribe(x => handleCurrentApplicationEntitiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IApplicationEntities>>(msgSource).Subscribe(x => handleCurrentApplicationEntitiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IApplicationEntities>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IApplicationEntities>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IApplicationEntities>>(msgSource).Subscribe(x => handleApplicationEntitiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IApplicationEntities>>(msgSource).Subscribe(x => handleApplicationEntitiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityViewEntityProperties>>(msgSource).Subscribe(x => handleEntityViewEntityPropertiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityViewEntityProperties>>(msgSource).Subscribe(x => handleCurrentEntityViewEntityPropertiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityViewEntityProperties>>(msgSource).Subscribe(x => handleCurrentEntityViewEntityPropertiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityViewEntityProperties>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityViewEntityProperties>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityViewEntityProperties>>(msgSource).Subscribe(x => handleEntityViewEntityPropertiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityViewEntityProperties>>(msgSource).Subscribe(x => handleEntityViewEntityPropertiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionParameterUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionParameterChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityViewPropertyFunctionParameter>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityViewPropertyFunctionParameter>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityViewPropertyFunction>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityViewPropertyFunction>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityViewPropertyFunction>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityViewPropertyFunction>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityViewPropertyFunction>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityViewPropertyFunction>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityViewPropertyFunction>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityViewViewProperties>>(msgSource).Subscribe(x => handleEntityViewViewPropertiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityViewViewProperties>>(msgSource).Subscribe(x => handleCurrentEntityViewViewPropertiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityViewViewProperties>>(msgSource).Subscribe(x => handleCurrentEntityViewViewPropertiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityViewViewProperties>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityViewViewProperties>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityViewViewProperties>>(msgSource).Subscribe(x => handleEntityViewViewPropertiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityViewViewProperties>>(msgSource).Subscribe(x => handleEntityViewViewPropertiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityViewProperties>>(msgSource).Subscribe(x => handleEntityViewPropertiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityViewProperties>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityViewProperties>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityViewProperties>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityViewProperties>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityViewProperties>>(msgSource).Subscribe(x => handleEntityViewPropertiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityViewProperties>>(msgSource).Subscribe(x => handleEntityViewPropertiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityView>>(msgSource).Subscribe(x => handleEntityViewLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityView>>(msgSource).Subscribe(x => handleCurrentEntityViewUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityView>>(msgSource).Subscribe(x => handleCurrentEntityViewChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityView>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityView>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityView>>(msgSource).Subscribe(x => handleEntityViewCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityView>>(msgSource).Subscribe(x => handleEntityViewDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handlePrimaryKeyOptionsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handleCurrentPrimaryKeyOptionsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handleCurrentPrimaryKeyOptionsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IPrimaryKeyOptions>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IPrimaryKeyOptions>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handlePrimaryKeyOptionsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handlePrimaryKeyOptionsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IDataProperties>>(msgSource).Subscribe(x => handleDataPropertiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IDataProperties>>(msgSource).Subscribe(x => handleCurrentDataPropertiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IDataProperties>>(msgSource).Subscribe(x => handleCurrentDataPropertiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IDataProperties>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IDataProperties>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IDataProperties>>(msgSource).Subscribe(x => handleDataPropertiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IDataProperties>>(msgSource).Subscribe(x => handleDataPropertiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityViewEntityProperties>>(msgSource).Subscribe(x => handleEntityViewEntityPropertiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityViewEntityProperties>>(msgSource).Subscribe(x => handleCurrentEntityViewEntityPropertiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityViewEntityProperties>>(msgSource).Subscribe(x => handleCurrentEntityViewEntityPropertiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityViewEntityProperties>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityViewEntityProperties>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityViewEntityProperties>>(msgSource).Subscribe(x => handleEntityViewEntityPropertiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityViewEntityProperties>>(msgSource).Subscribe(x => handleEntityViewEntityPropertiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IPresentationProperties>>(msgSource).Subscribe(x => handlePresentationPropertiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IPresentationProperties>>(msgSource).Subscribe(x => handleCurrentPresentationPropertiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IPresentationProperties>>(msgSource).Subscribe(x => handleCurrentPresentationPropertiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IPresentationProperties>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IPresentationProperties>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IPresentationProperties>>(msgSource).Subscribe(x => handlePresentationPropertiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IPresentationProperties>>(msgSource).Subscribe(x => handlePresentationPropertiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<ITestValues>>(msgSource).Subscribe(x => handleTestValuesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<ITestValues>>(msgSource).Subscribe(x => handleCurrentTestValuesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<ITestValues>>(msgSource).Subscribe(x => handleCurrentTestValuesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<ITestValues>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<ITestValues>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<ITestValues>>(msgSource).Subscribe(x => handleTestValuesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<ITestValues>>(msgSource).Subscribe(x => handleTestValuesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityProperties>>(msgSource).Subscribe(x => handleEntityPropertiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityProperties>>(msgSource).Subscribe(x => handleCurrentEntityPropertiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityProperties>>(msgSource).Subscribe(x => handleCurrentEntityPropertiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityProperties>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityProperties>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityProperties>>(msgSource).Subscribe(x => handleEntityPropertiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityProperties>>(msgSource).Subscribe(x => handleEntityPropertiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IViewEntity>>(msgSource).Subscribe(x => handleViewEntityLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IViewEntity>>(msgSource).Subscribe(x => handleCurrentViewEntityUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IViewEntity>>(msgSource).Subscribe(x => handleCurrentViewEntityChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IViewEntity>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IViewEntity>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IViewEntity>>(msgSource).Subscribe(x => handleViewEntityCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IViewEntity>>(msgSource).Subscribe(x => handleViewEntityDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntities>>(msgSource).Subscribe(x => handleEntitiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntities>>(msgSource).Subscribe(x => handleCurrentEntitiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntities>>(msgSource).Subscribe(x => handleCurrentEntitiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntities>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntities>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntities>>(msgSource).Subscribe(x => handleEntitiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntities>>(msgSource).Subscribe(x => handleEntitiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionParameterUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionParameterChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityViewPropertyFunctionParameter>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityViewPropertyFunctionParameter>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityViewPropertyFunction>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityViewPropertyFunction>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityViewPropertyFunction>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityViewPropertyFunction>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityViewPropertyFunction>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityViewPropertyFunction>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityViewPropertyFunction>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IFunctionBody>>(msgSource).Subscribe(x => handleFunctionBodyLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IFunctionBody>>(msgSource).Subscribe(x => handleCurrentFunctionBodyUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IFunctionBody>>(msgSource).Subscribe(x => handleCurrentFunctionBodyChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IFunctionBody>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IFunctionBody>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IFunctionBody>>(msgSource).Subscribe(x => handleFunctionBodyCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IFunctionBody>>(msgSource).Subscribe(x => handleFunctionBodyDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionParameterUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleCurrentEntityViewPropertyFunctionParameterChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityViewPropertyFunctionParameter>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityViewPropertyFunctionParameter>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityViewPropertyFunctionParameter>>(msgSource).Subscribe(x => handleEntityViewPropertyFunctionParameterDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IFunctionParameters>>(msgSource).Subscribe(x => handleFunctionParametersLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IFunctionParameters>>(msgSource).Subscribe(x => handleCurrentFunctionParametersUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IFunctionParameters>>(msgSource).Subscribe(x => handleCurrentFunctionParametersChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IFunctionParameters>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IFunctionParameters>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IFunctionParameters>>(msgSource).Subscribe(x => handleFunctionParametersCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IFunctionParameters>>(msgSource).Subscribe(x => handleFunctionParametersDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IFunctionReturnType>>(msgSource).Subscribe(x => handleFunctionReturnTypeLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IFunctionReturnType>>(msgSource).Subscribe(x => handleCurrentFunctionReturnTypeUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IFunctionReturnType>>(msgSource).Subscribe(x => handleCurrentFunctionReturnTypeChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IFunctionReturnType>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IFunctionReturnType>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IFunctionReturnType>>(msgSource).Subscribe(x => handleFunctionReturnTypeCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IFunctionReturnType>>(msgSource).Subscribe(x => handleFunctionReturnTypeDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IFunctions>>(msgSource).Subscribe(x => handleFunctionsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IFunctions>>(msgSource).Subscribe(x => handleCurrentFunctionsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IFunctions>>(msgSource).Subscribe(x => handleCurrentFunctionsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IFunctions>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IFunctions>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IFunctions>>(msgSource).Subscribe(x => handleFunctionsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IFunctions>>(msgSource).Subscribe(x => handleFunctionsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<ISettings>>(msgSource).Subscribe(x => handleSettingsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<ISettings>>(msgSource).Subscribe(x => handleCurrentSettingsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<ISettings>>(msgSource).Subscribe(x => handleCurrentSettingsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<ISettings>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<ISettings>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<ISettings>>(msgSource).Subscribe(x => handleSettingsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<ISettings>>(msgSource).Subscribe(x => handleSettingsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<ILayers>>(msgSource).Subscribe(x => handleLayersLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<ILayers>>(msgSource).Subscribe(x => handleCurrentLayersUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<ILayers>>(msgSource).Subscribe(x => handleCurrentLayersChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<ILayers>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<ILayers>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<ILayers>>(msgSource).Subscribe(x => handleLayersCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<ILayers>>(msgSource).Subscribe(x => handleLayersDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IScreenLayouts>>(msgSource).Subscribe(x => handleScreenLayoutsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IScreenLayouts>>(msgSource).Subscribe(x => handleCurrentScreenLayoutsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IScreenLayouts>>(msgSource).Subscribe(x => handleCurrentScreenLayoutsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IScreenLayouts>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IScreenLayouts>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IScreenLayouts>>(msgSource).Subscribe(x => handleScreenLayoutsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IScreenLayouts>>(msgSource).Subscribe(x => handleScreenLayoutsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<ILayout>>(msgSource).Subscribe(x => handleLayoutLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<ILayout>>(msgSource).Subscribe(x => handleCurrentLayoutUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<ILayout>>(msgSource).Subscribe(x => handleCurrentLayoutChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<ILayout>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<ILayout>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<ILayout>>(msgSource).Subscribe(x => handleLayoutCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<ILayout>>(msgSource).Subscribe(x => handleLayoutDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handlePrimaryKeyOptionsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handleCurrentPrimaryKeyOptionsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handleCurrentPrimaryKeyOptionsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IPrimaryKeyOptions>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IPrimaryKeyOptions>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handlePrimaryKeyOptionsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IPrimaryKeyOptions>>(msgSource).Subscribe(x => handlePrimaryKeyOptionsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IDataProperties>>(msgSource).Subscribe(x => handleDataPropertiesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IDataProperties>>(msgSource).Subscribe(x => handleCurrentDataPropertiesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IDataProperties>>(msgSource).Subscribe(x => handleCurrentDataPropertiesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IDataProperties>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IDataProperties>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IDataProperties>>(msgSource).Subscribe(x => handleDataPropertiesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IDataProperties>>(msgSource).Subscribe(x => handleDataPropertiesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IModelTypes>>(msgSource).Subscribe(x => handleModelTypesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IModelTypes>>(msgSource).Subscribe(x => handleCurrentModelTypesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IModelTypes>>(msgSource).Subscribe(x => handleCurrentModelTypesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IModelTypes>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IModelTypes>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IModelTypes>>(msgSource).Subscribe(x => handleModelTypesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IModelTypes>>(msgSource).Subscribe(x => handleModelTypesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IScreenParts>>(msgSource).Subscribe(x => handleScreenPartsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IScreenParts>>(msgSource).Subscribe(x => handleCurrentScreenPartsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IScreenParts>>(msgSource).Subscribe(x => handleCurrentScreenPartsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IScreenParts>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IScreenParts>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IScreenParts>>(msgSource).Subscribe(x => handleScreenPartsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IScreenParts>>(msgSource).Subscribe(x => handleScreenPartsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IParts>>(msgSource).Subscribe(x => handlePartsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IParts>>(msgSource).Subscribe(x => handleCurrentPartsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IParts>>(msgSource).Subscribe(x => handleCurrentPartsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IParts>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IParts>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IParts>>(msgSource).Subscribe(x => handlePartsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IParts>>(msgSource).Subscribe(x => handlePartsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IProcessStepScreens>>(msgSource).Subscribe(x => handleProcessStepScreensLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IProcessStepScreens>>(msgSource).Subscribe(x => handleCurrentProcessStepScreensUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IProcessStepScreens>>(msgSource).Subscribe(x => handleCurrentProcessStepScreensChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IProcessStepScreens>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IProcessStepScreens>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IProcessStepScreens>>(msgSource).Subscribe(x => handleProcessStepScreensCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IProcessStepScreens>>(msgSource).Subscribe(x => handleProcessStepScreensDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IProcessSteps>>(msgSource).Subscribe(x => handleProcessStepsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IProcessSteps>>(msgSource).Subscribe(x => handleCurrentProcessStepsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IProcessSteps>>(msgSource).Subscribe(x => handleCurrentProcessStepsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IProcessSteps>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IProcessSteps>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IProcessSteps>>(msgSource).Subscribe(x => handleProcessStepsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IProcessSteps>>(msgSource).Subscribe(x => handleProcessStepsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IProcess>>(msgSource).Subscribe(x => handleProcessLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IProcess>>(msgSource).Subscribe(x => handleCurrentProcessUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IProcess>>(msgSource).Subscribe(x => handleCurrentProcessChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IProcess>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IProcess>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IProcess>>(msgSource).Subscribe(x => handleProcessCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IProcess>>(msgSource).Subscribe(x => handleProcessDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<ISettings>>(msgSource).Subscribe(x => handleSettingsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<ISettings>>(msgSource).Subscribe(x => handleCurrentSettingsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<ISettings>>(msgSource).Subscribe(x => handleCurrentSettingsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<ISettings>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<ISettings>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<ISettings>>(msgSource).Subscribe(x => handleSettingsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<ISettings>>(msgSource).Subscribe(x => handleSettingsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IProjects>>(msgSource).Subscribe(x => handleProjectsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IProjects>>(msgSource).Subscribe(x => handleCurrentProjectsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IProjects>>(msgSource).Subscribe(x => handleCurrentProjectsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IProjects>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IProjects>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IProjects>>(msgSource).Subscribe(x => handleProjectsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IProjects>>(msgSource).Subscribe(x => handleProjectsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IEntityRelationships>>(msgSource).Subscribe(x => handleEntityRelationshipsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IEntityRelationships>>(msgSource).Subscribe(x => handleCurrentEntityRelationshipsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IEntityRelationships>>(msgSource).Subscribe(x => handleCurrentEntityRelationshipsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IEntityRelationships>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IEntityRelationships>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IEntityRelationships>>(msgSource).Subscribe(x => handleEntityRelationshipsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IEntityRelationships>>(msgSource).Subscribe(x => handleEntityRelationshipsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IRelationshipTypes>>(msgSource).Subscribe(x => handleRelationshipTypesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IRelationshipTypes>>(msgSource).Subscribe(x => handleCurrentRelationshipTypesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IRelationshipTypes>>(msgSource).Subscribe(x => handleCurrentRelationshipTypesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IRelationshipTypes>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IRelationshipTypes>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IRelationshipTypes>>(msgSource).Subscribe(x => handleRelationshipTypesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IRelationshipTypes>>(msgSource).Subscribe(x => handleRelationshipTypesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IProcessStepScreens>>(msgSource).Subscribe(x => handleProcessStepScreensLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IProcessStepScreens>>(msgSource).Subscribe(x => handleCurrentProcessStepScreensUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IProcessStepScreens>>(msgSource).Subscribe(x => handleCurrentProcessStepScreensChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IProcessStepScreens>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IProcessStepScreens>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IProcessStepScreens>>(msgSource).Subscribe(x => handleProcessStepScreensCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IProcessStepScreens>>(msgSource).Subscribe(x => handleProcessStepScreensDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IScreenLayouts>>(msgSource).Subscribe(x => handleScreenLayoutsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IScreenLayouts>>(msgSource).Subscribe(x => handleCurrentScreenLayoutsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IScreenLayouts>>(msgSource).Subscribe(x => handleCurrentScreenLayoutsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IScreenLayouts>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IScreenLayouts>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IScreenLayouts>>(msgSource).Subscribe(x => handleScreenLayoutsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IScreenLayouts>>(msgSource).Subscribe(x => handleScreenLayoutsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IScreenParts>>(msgSource).Subscribe(x => handleScreenPartsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IScreenParts>>(msgSource).Subscribe(x => handleCurrentScreenPartsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IScreenParts>>(msgSource).Subscribe(x => handleCurrentScreenPartsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IScreenParts>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IScreenParts>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IScreenParts>>(msgSource).Subscribe(x => handleScreenPartsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IScreenParts>>(msgSource).Subscribe(x => handleScreenPartsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IScreenViews>>(msgSource).Subscribe(x => handleScreenViewsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IScreenViews>>(msgSource).Subscribe(x => handleCurrentScreenViewsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IScreenViews>>(msgSource).Subscribe(x => handleCurrentScreenViewsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IScreenViews>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IScreenViews>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IScreenViews>>(msgSource).Subscribe(x => handleScreenViewsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IScreenViews>>(msgSource).Subscribe(x => handleScreenViewsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IScreens>>(msgSource).Subscribe(x => handleScreensLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IScreens>>(msgSource).Subscribe(x => handleCurrentScreensUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IScreens>>(msgSource).Subscribe(x => handleCurrentScreensChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IScreens>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IScreens>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IScreens>>(msgSource).Subscribe(x => handleScreensCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IScreens>>(msgSource).Subscribe(x => handleScreensDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IStateMachineStates>>(msgSource).Subscribe(x => handleStateMachineStatesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IStateMachineStates>>(msgSource).Subscribe(x => handleCurrentStateMachineStatesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IStateMachineStates>>(msgSource).Subscribe(x => handleCurrentStateMachineStatesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IStateMachineStates>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IStateMachineStates>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IStateMachineStates>>(msgSource).Subscribe(x => handleStateMachineStatesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IStateMachineStates>>(msgSource).Subscribe(x => handleStateMachineStatesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IStateMachineTriggers>>(msgSource).Subscribe(x => handleStateMachineTriggersLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IStateMachineTriggers>>(msgSource).Subscribe(x => handleCurrentStateMachineTriggersUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IStateMachineTriggers>>(msgSource).Subscribe(x => handleCurrentStateMachineTriggersChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IStateMachineTriggers>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IStateMachineTriggers>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IStateMachineTriggers>>(msgSource).Subscribe(x => handleStateMachineTriggersCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IStateMachineTriggers>>(msgSource).Subscribe(x => handleStateMachineTriggersDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IStateMachines>>(msgSource).Subscribe(x => handleStateMachinesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IStateMachines>>(msgSource).Subscribe(x => handleCurrentStateMachinesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IStateMachines>>(msgSource).Subscribe(x => handleCurrentStateMachinesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IStateMachines>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IStateMachines>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IStateMachines>>(msgSource).Subscribe(x => handleStateMachinesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IStateMachines>>(msgSource).Subscribe(x => handleStateMachinesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IStateMachineStates>>(msgSource).Subscribe(x => handleStateMachineStatesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IStateMachineStates>>(msgSource).Subscribe(x => handleCurrentStateMachineStatesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IStateMachineStates>>(msgSource).Subscribe(x => handleCurrentStateMachineStatesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IStateMachineStates>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IStateMachineStates>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IStateMachineStates>>(msgSource).Subscribe(x => handleStateMachineStatesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IStateMachineStates>>(msgSource).Subscribe(x => handleStateMachineStatesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IStates>>(msgSource).Subscribe(x => handleStatesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IStates>>(msgSource).Subscribe(x => handleCurrentStatesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IStates>>(msgSource).Subscribe(x => handleCurrentStatesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IStates>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IStates>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IStates>>(msgSource).Subscribe(x => handleStatesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IStates>>(msgSource).Subscribe(x => handleStatesDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IProcessStepScreens>>(msgSource).Subscribe(x => handleProcessStepScreensLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IProcessStepScreens>>(msgSource).Subscribe(x => handleCurrentProcessStepScreensUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IProcessStepScreens>>(msgSource).Subscribe(x => handleCurrentProcessStepScreensChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IProcessStepScreens>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IProcessStepScreens>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IProcessStepScreens>>(msgSource).Subscribe(x => handleProcessStepScreensCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IProcessStepScreens>>(msgSource).Subscribe(x => handleProcessStepScreensDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IProcessSteps>>(msgSource).Subscribe(x => handleProcessStepsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IProcessSteps>>(msgSource).Subscribe(x => handleCurrentProcessStepsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IProcessSteps>>(msgSource).Subscribe(x => handleCurrentProcessStepsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IProcessSteps>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IProcessSteps>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IProcessSteps>>(msgSource).Subscribe(x => handleProcessStepsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IProcessSteps>>(msgSource).Subscribe(x => handleProcessStepsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<ISteps>>(msgSource).Subscribe(x => handleStepsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<ISteps>>(msgSource).Subscribe(x => handleCurrentStepsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<ISteps>>(msgSource).Subscribe(x => handleCurrentStepsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<ISteps>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<ISteps>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<ISteps>>(msgSource).Subscribe(x => handleStepsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<ISteps>>(msgSource).Subscribe(x => handleStepsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IStateMachineTriggers>>(msgSource).Subscribe(x => handleStateMachineTriggersLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IStateMachineTriggers>>(msgSource).Subscribe(x => handleCurrentStateMachineTriggersUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IStateMachineTriggers>>(msgSource).Subscribe(x => handleCurrentStateMachineTriggersChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IStateMachineTriggers>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IStateMachineTriggers>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IStateMachineTriggers>>(msgSource).Subscribe(x => handleStateMachineTriggersCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IStateMachineTriggers>>(msgSource).Subscribe(x => handleStateMachineTriggersDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<ITriggers>>(msgSource).Subscribe(x => handleTriggersLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<ITriggers>>(msgSource).Subscribe(x => handleCurrentTriggersUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<ITriggers>>(msgSource).Subscribe(x => handleCurrentTriggersChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<ITriggers>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<ITriggers>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<ITriggers>>(msgSource).Subscribe(x => handleTriggersCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<ITriggers>>(msgSource).Subscribe(x => handleTriggersDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IScreenViews>>(msgSource).Subscribe(x => handleScreenViewsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IScreenViews>>(msgSource).Subscribe(x => handleCurrentScreenViewsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IScreenViews>>(msgSource).Subscribe(x => handleCurrentScreenViewsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IScreenViews>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IScreenViews>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IScreenViews>>(msgSource).Subscribe(x => handleScreenViewsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IScreenViews>>(msgSource).Subscribe(x => handleScreenViewsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IViewEntity>>(msgSource).Subscribe(x => handleViewEntityLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IViewEntity>>(msgSource).Subscribe(x => handleCurrentViewEntityUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IViewEntity>>(msgSource).Subscribe(x => handleCurrentViewEntityChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IViewEntity>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IViewEntity>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IViewEntity>>(msgSource).Subscribe(x => handleViewEntityCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IViewEntity>>(msgSource).Subscribe(x => handleViewEntityDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IViews>>(msgSource).Subscribe(x => handleViewsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IViews>>(msgSource).Subscribe(x => handleCurrentViewsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IViews>>(msgSource).Subscribe(x => handleCurrentViewsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IViews>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IViews>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IViews>>(msgSource).Subscribe(x => handleViewsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IViews>>(msgSource).Subscribe(x => handleViewsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IApplicationSetting>>(msgSource).Subscribe(x => handleApplicationSettingsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IApplicationSetting>>(msgSource).Subscribe(x => handleCurrentApplicationSettingUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IApplicationSetting>>(msgSource).Subscribe(x => handleCurrentApplicationSettingChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IApplicationSetting>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IApplicationSetting>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IApplicationSetting>>(msgSource).Subscribe(x => handleApplicationSettingCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IApplicationSetting>>(msgSource).Subscribe(x => handleApplicationSettingDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IFunctionSetFunctions>>(msgSource).Subscribe(x => handleFunctionSetFunctionsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IFunctionSetFunctions>>(msgSource).Subscribe(x => handleCurrentFunctionSetFunctionsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IFunctionSetFunctions>>(msgSource).Subscribe(x => handleCurrentFunctionSetFunctionsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IFunctionSetFunctions>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IFunctionSetFunctions>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IFunctionSetFunctions>>(msgSource).Subscribe(x => handleFunctionSetFunctionsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IFunctionSetFunctions>>(msgSource).Subscribe(x => handleFunctionSetFunctionsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IFunctionSets>>(msgSource).Subscribe(x => handleFunctionSetsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IFunctionSets>>(msgSource).Subscribe(x => handleCurrentFunctionSetsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IFunctionSets>>(msgSource).Subscribe(x => handleCurrentFunctionSetsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IFunctionSets>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IFunctionSets>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IFunctionSets>>(msgSource).Subscribe(x => handleFunctionSetsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IFunctionSets>>(msgSource).Subscribe(x => handleFunctionSetsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<IOperators>>(msgSource).Subscribe(x => handleOperatorsLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<IOperators>>(msgSource).Subscribe(x => handleCurrentOperatorsUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<IOperators>>(msgSource).Subscribe(x => handleCurrentOperatorsChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<IOperators>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<IOperators>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<IOperators>>(msgSource).Subscribe(x => handleOperatorsCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<IOperators>>(msgSource).Subscribe(x => handleOperatorsDeleted(x.EntityId));

						EventMessageBus.Current.GetEvent<EntitySetLoaded<ISettingsNames>>(msgSource).Subscribe(x => handleSettingsNamesLoaded(x.Entities));
						EventMessageBus.Current.GetEvent<CurrentEntityUpdated<ISettingsNames>>(msgSource).Subscribe(x => handleCurrentSettingsNamesUpdated(x.Entity));
						EventMessageBus.Current.GetEvent<CurrentEntityChanged<ISettingsNames>>(msgSource).Subscribe(x => handleCurrentSettingsNamesChanged(x.EntityId));
						EventMessageBus.Current.GetEvent<LoadEntitySetDataServiceStarted<ISettingsNames>>(msgSource)
							.Subscribe(x =>EventMessageBus.Current.Publish(new LoadEntitySet<ISettingsNames>(msgSource), msgSource));
						EventMessageBus.Current.GetEvent<EntityCreated<ISettingsNames>>(msgSource).Subscribe(x => handleSettingsNamesCreated(x.Entity));
						EventMessageBus.Current.GetEvent<EntityDeleted<ISettingsNames>>(msgSource).Subscribe(x => handleSettingsNamesDeleted(x.EntityId));


					}
					catch (Exception)
					{
						throw;
					}  				
				}
		

 		public static ObservableList<IApplicationSetting> ApplicationSettingsCache { get; } = new ObservableList<IApplicationSetting>();
		
		private static void handleApplicationSettingDeleted(int entityId)
		{
		   
			var ce = ApplicationSettingsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ApplicationSettingsCache.Remove(ce);
				if (CurrentApplicationSetting.Id == entityId) CurrentApplicationSetting = default(IApplicationSetting);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ApplicationSettingsCache));
		}

		private static void handleApplicationSettingCreated(IApplicationSetting entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ApplicationSettingsCache.Contains(entity)) ApplicationSettingsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleApplicationSettingsLoaded(IEnumerable<IApplicationSetting> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ApplicationSettingsCache.Clear();
				foreach (var itm in entities)
				{
					ApplicationSettingsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentApplicationSettingUpdated(IApplicationSetting entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentApplicationSetting = entity;
				
			   //if(!ApplicationSettingsCache.Contains(entity)) ApplicationSettingsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentApplicationSettingChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentApplicationSetting = ApplicationSettingsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IApplicationSetting _currentApplicationSetting = NullEntity<ApplicationSetting>.Instance;
		public static IApplicationSetting CurrentApplicationSetting
		{
			get
			{
				return _currentApplicationSetting;
			}
			set
			{
				if (_currentApplicationSetting != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentApplicationSetting, value ?? NullEntity<ApplicationSetting>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IApplicationSetting>(_currentApplicationSetting), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IApplicationEntities> ApplicationEntitiesCache { get; } = new ObservableList<IApplicationEntities>();
		
		private static void handleApplicationEntitiesDeleted(int entityId)
		{
		   
			var ce = ApplicationEntitiesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ApplicationEntitiesCache.Remove(ce);
				if (CurrentApplicationEntities.Id == entityId) CurrentApplicationEntities = default(IApplicationEntities);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ApplicationEntitiesCache));
		}

		private static void handleApplicationEntitiesCreated(IApplicationEntities entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ApplicationEntitiesCache.Contains(entity)) ApplicationEntitiesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleApplicationEntitiesLoaded(IEnumerable<IApplicationEntities> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ApplicationEntitiesCache.Clear();
				foreach (var itm in entities)
				{
					ApplicationEntitiesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentApplicationEntitiesUpdated(IApplicationEntities entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentApplicationEntities = entity;
				
			   //if(!ApplicationEntitiesCache.Contains(entity)) ApplicationEntitiesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentApplicationEntitiesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentApplicationEntities = ApplicationEntitiesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IApplicationEntities _currentApplicationEntities = NullEntity<ApplicationEntities>.Instance;
		public static IApplicationEntities CurrentApplicationEntities
		{
			get
			{
				return _currentApplicationEntities;
			}
			set
			{
				if (_currentApplicationEntities != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentApplicationEntities, value ?? NullEntity<ApplicationEntities>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IApplicationEntities>(_currentApplicationEntities), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IApplications> ApplicationsCache { get; } = new ObservableList<IApplications>();
		
		private static void handleApplicationsDeleted(int entityId)
		{
		   
			var ce = ApplicationsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ApplicationsCache.Remove(ce);
				if (CurrentApplications.Id == entityId) CurrentApplications = default(IApplications);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ApplicationsCache));
		}

		private static void handleApplicationsCreated(IApplications entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ApplicationsCache.Contains(entity)) ApplicationsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleApplicationsLoaded(IEnumerable<IApplications> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ApplicationsCache.Clear();
				foreach (var itm in entities)
				{
					ApplicationsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentApplicationsUpdated(IApplications entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentApplications = entity;
				
			   //if(!ApplicationsCache.Contains(entity)) ApplicationsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentApplicationsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentApplications = ApplicationsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IApplications _currentApplications = NullEntity<Applications>.Instance;
		public static IApplications CurrentApplications
		{
			get
			{
				return _currentApplications;
			}
			set
			{
				if (_currentApplications != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentApplications, value ?? NullEntity<Applications>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IApplications>(_currentApplications), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IDataProperties> DataPropertiesCache { get; } = new ObservableList<IDataProperties>();
		
		private static void handleDataPropertiesDeleted(int entityId)
		{
		   
			var ce = DataPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				DataPropertiesCache.Remove(ce);
				if (CurrentDataProperties.Id == entityId) CurrentDataProperties = default(IDataProperties);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(DataPropertiesCache));
		}

		private static void handleDataPropertiesCreated(IDataProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!DataPropertiesCache.Contains(entity)) DataPropertiesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleDataPropertiesLoaded(IEnumerable<IDataProperties> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				DataPropertiesCache.Clear();
				foreach (var itm in entities)
				{
					DataPropertiesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentDataPropertiesUpdated(IDataProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentDataProperties = entity;
				
			   //if(!DataPropertiesCache.Contains(entity)) DataPropertiesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentDataPropertiesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentDataProperties = DataPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IDataProperties _currentDataProperties = NullEntity<DataProperties>.Instance;
		public static IDataProperties CurrentDataProperties
		{
			get
			{
				return _currentDataProperties;
			}
			set
			{
				if (_currentDataProperties != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentDataProperties, value ?? NullEntity<DataProperties>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IDataProperties>(_currentDataProperties), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IDataTypes> DataTypesCache { get; } = new ObservableList<IDataTypes>();
		
		private static void handleDataTypesDeleted(int entityId)
		{
		   
			var ce = DataTypesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				DataTypesCache.Remove(ce);
				if (CurrentDataTypes.Id == entityId) CurrentDataTypes = default(IDataTypes);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(DataTypesCache));
		}

		private static void handleDataTypesCreated(IDataTypes entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!DataTypesCache.Contains(entity)) DataTypesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleDataTypesLoaded(IEnumerable<IDataTypes> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				DataTypesCache.Clear();
				foreach (var itm in entities)
				{
					DataTypesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentDataTypesUpdated(IDataTypes entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentDataTypes = entity;
				
			   //if(!DataTypesCache.Contains(entity)) DataTypesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentDataTypesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentDataTypes = DataTypesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IDataTypes _currentDataTypes = NullEntity<DataTypes>.Instance;
		public static IDataTypes CurrentDataTypes
		{
			get
			{
				return _currentDataTypes;
			}
			set
			{
				if (_currentDataTypes != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentDataTypes, value ?? NullEntity<DataTypes>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IDataTypes>(_currentDataTypes), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IEntities> EntitiesCache { get; } = new ObservableList<IEntities>();
		
		private static void handleEntitiesDeleted(int entityId)
		{
		   
			var ce = EntitiesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntitiesCache.Remove(ce);
				if (CurrentEntities.Id == entityId) CurrentEntities = default(IEntities);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(EntitiesCache));
		}

		private static void handleEntitiesCreated(IEntities entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!EntitiesCache.Contains(entity)) EntitiesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleEntitiesLoaded(IEnumerable<IEntities> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntitiesCache.Clear();
				foreach (var itm in entities)
				{
					EntitiesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntitiesUpdated(IEntities entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntities = entity;
				
			   //if(!EntitiesCache.Contains(entity)) EntitiesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntitiesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntities = EntitiesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IEntities _currentEntities = NullEntity<Entities>.Instance;
		public static IEntities CurrentEntities
		{
			get
			{
				return _currentEntities;
			}
			set
			{
				if (_currentEntities != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentEntities, value ?? NullEntity<Entities>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IEntities>(_currentEntities), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IEntityProperties> EntityPropertiesCache { get; } = new ObservableList<IEntityProperties>();
		
		private static void handleEntityPropertiesDeleted(int entityId)
		{
		   
			var ce = EntityPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityPropertiesCache.Remove(ce);
				if (CurrentEntityProperties.Id == entityId) CurrentEntityProperties = default(IEntityProperties);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(EntityPropertiesCache));
		}

		private static void handleEntityPropertiesCreated(IEntityProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!EntityPropertiesCache.Contains(entity)) EntityPropertiesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleEntityPropertiesLoaded(IEnumerable<IEntityProperties> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityPropertiesCache.Clear();
				foreach (var itm in entities)
				{
					EntityPropertiesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityPropertiesUpdated(IEntityProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityProperties = entity;
				
			   //if(!EntityPropertiesCache.Contains(entity)) EntityPropertiesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityPropertiesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityProperties = EntityPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IEntityProperties _currentEntityProperties = NullEntity<EntityProperties>.Instance;
		public static IEntityProperties CurrentEntityProperties
		{
			get
			{
				return _currentEntityProperties;
			}
			set
			{
				if (_currentEntityProperties != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentEntityProperties, value ?? NullEntity<EntityProperties>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IEntityProperties>(_currentEntityProperties), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IEntityRelationships> EntityRelationshipsCache { get; } = new ObservableList<IEntityRelationships>();
		
		private static void handleEntityRelationshipsDeleted(int entityId)
		{
		   
			var ce = EntityRelationshipsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityRelationshipsCache.Remove(ce);
				if (CurrentEntityRelationships.Id == entityId) CurrentEntityRelationships = default(IEntityRelationships);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(EntityRelationshipsCache));
		}

		private static void handleEntityRelationshipsCreated(IEntityRelationships entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!EntityRelationshipsCache.Contains(entity)) EntityRelationshipsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleEntityRelationshipsLoaded(IEnumerable<IEntityRelationships> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityRelationshipsCache.Clear();
				foreach (var itm in entities)
				{
					EntityRelationshipsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityRelationshipsUpdated(IEntityRelationships entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityRelationships = entity;
				
			   //if(!EntityRelationshipsCache.Contains(entity)) EntityRelationshipsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityRelationshipsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityRelationships = EntityRelationshipsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IEntityRelationships _currentEntityRelationships = NullEntity<EntityRelationships>.Instance;
		public static IEntityRelationships CurrentEntityRelationships
		{
			get
			{
				return _currentEntityRelationships;
			}
			set
			{
				if (_currentEntityRelationships != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentEntityRelationships, value ?? NullEntity<EntityRelationships>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IEntityRelationships>(_currentEntityRelationships), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IEntityView> EntityViewCache { get; } = new ObservableList<IEntityView>();
		
		private static void handleEntityViewDeleted(int entityId)
		{
		   
			var ce = EntityViewCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewCache.Remove(ce);
				if (CurrentEntityView.Id == entityId) CurrentEntityView = default(IEntityView);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(EntityViewCache));
		}

		private static void handleEntityViewCreated(IEntityView entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!EntityViewCache.Contains(entity)) EntityViewCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleEntityViewLoaded(IEnumerable<IEntityView> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewCache.Clear();
				foreach (var itm in entities)
				{
					EntityViewCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewUpdated(IEntityView entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityView = entity;
				
			   //if(!EntityViewCache.Contains(entity)) EntityViewCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityView = EntityViewCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IEntityView _currentEntityView = NullEntity<EntityView>.Instance;
		public static IEntityView CurrentEntityView
		{
			get
			{
				return _currentEntityView;
			}
			set
			{
				if (_currentEntityView != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentEntityView, value ?? NullEntity<EntityView>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IEntityView>(_currentEntityView), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IEntityViewEntityProperties> EntityViewEntityPropertiesCache { get; } = new ObservableList<IEntityViewEntityProperties>();
		
		private static void handleEntityViewEntityPropertiesDeleted(int entityId)
		{
		   
			var ce = EntityViewEntityPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewEntityPropertiesCache.Remove(ce);
				if (CurrentEntityViewEntityProperties.Id == entityId) CurrentEntityViewEntityProperties = default(IEntityViewEntityProperties);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(EntityViewEntityPropertiesCache));
		}

		private static void handleEntityViewEntityPropertiesCreated(IEntityViewEntityProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!EntityViewEntityPropertiesCache.Contains(entity)) EntityViewEntityPropertiesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleEntityViewEntityPropertiesLoaded(IEnumerable<IEntityViewEntityProperties> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewEntityPropertiesCache.Clear();
				foreach (var itm in entities)
				{
					EntityViewEntityPropertiesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewEntityPropertiesUpdated(IEntityViewEntityProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityViewEntityProperties = entity;
				
			   //if(!EntityViewEntityPropertiesCache.Contains(entity)) EntityViewEntityPropertiesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewEntityPropertiesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityViewEntityProperties = EntityViewEntityPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IEntityViewEntityProperties _currentEntityViewEntityProperties = NullEntity<EntityViewEntityProperties>.Instance;
		public static IEntityViewEntityProperties CurrentEntityViewEntityProperties
		{
			get
			{
				return _currentEntityViewEntityProperties;
			}
			set
			{
				if (_currentEntityViewEntityProperties != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentEntityViewEntityProperties, value ?? NullEntity<EntityViewEntityProperties>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IEntityViewEntityProperties>(_currentEntityViewEntityProperties), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IEntityViewProperties> EntityViewPropertiesCache { get; } = new ObservableList<IEntityViewProperties>();
		
		private static void handleEntityViewPropertiesDeleted(int entityId)
		{
		   
			var ce = EntityViewPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewPropertiesCache.Remove(ce);
				if (CurrentEntityViewProperties.Id == entityId) CurrentEntityViewProperties = default(IEntityViewProperties);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(EntityViewPropertiesCache));
		}

		private static void handleEntityViewPropertiesCreated(IEntityViewProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!EntityViewPropertiesCache.Contains(entity)) EntityViewPropertiesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleEntityViewPropertiesLoaded(IEnumerable<IEntityViewProperties> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewPropertiesCache.Clear();
				foreach (var itm in entities)
				{
					EntityViewPropertiesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewPropertiesUpdated(IEntityViewProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityViewProperties = entity;
				
			   //if(!EntityViewPropertiesCache.Contains(entity)) EntityViewPropertiesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewPropertiesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityViewProperties = EntityViewPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IEntityViewProperties _currentEntityViewProperties = NullEntity<EntityViewProperties>.Instance;
		public static IEntityViewProperties CurrentEntityViewProperties
		{
			get
			{
				return _currentEntityViewProperties;
			}
			set
			{
				if (_currentEntityViewProperties != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentEntityViewProperties, value ?? NullEntity<EntityViewProperties>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IEntityViewProperties>(_currentEntityViewProperties), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IEntityViewPropertyFunction> EntityViewPropertyFunctionCache { get; } = new ObservableList<IEntityViewPropertyFunction>();
		
		private static void handleEntityViewPropertyFunctionDeleted(int entityId)
		{
		   
			var ce = EntityViewPropertyFunctionCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewPropertyFunctionCache.Remove(ce);
				if (CurrentEntityViewPropertyFunction.Id == entityId) CurrentEntityViewPropertyFunction = default(IEntityViewPropertyFunction);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(EntityViewPropertyFunctionCache));
		}

		private static void handleEntityViewPropertyFunctionCreated(IEntityViewPropertyFunction entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!EntityViewPropertyFunctionCache.Contains(entity)) EntityViewPropertyFunctionCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleEntityViewPropertyFunctionLoaded(IEnumerable<IEntityViewPropertyFunction> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewPropertyFunctionCache.Clear();
				foreach (var itm in entities)
				{
					EntityViewPropertyFunctionCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewPropertyFunctionUpdated(IEntityViewPropertyFunction entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityViewPropertyFunction = entity;
				
			   //if(!EntityViewPropertyFunctionCache.Contains(entity)) EntityViewPropertyFunctionCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewPropertyFunctionChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityViewPropertyFunction = EntityViewPropertyFunctionCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IEntityViewPropertyFunction _currentEntityViewPropertyFunction = NullEntity<EntityViewPropertyFunction>.Instance;
		public static IEntityViewPropertyFunction CurrentEntityViewPropertyFunction
		{
			get
			{
				return _currentEntityViewPropertyFunction;
			}
			set
			{
				if (_currentEntityViewPropertyFunction != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentEntityViewPropertyFunction, value ?? NullEntity<EntityViewPropertyFunction>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IEntityViewPropertyFunction>(_currentEntityViewPropertyFunction), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IEntityViewPropertyFunctionParameter> EntityViewPropertyFunctionParameterCache { get; } = new ObservableList<IEntityViewPropertyFunctionParameter>();
		
		private static void handleEntityViewPropertyFunctionParameterDeleted(int entityId)
		{
		   
			var ce = EntityViewPropertyFunctionParameterCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewPropertyFunctionParameterCache.Remove(ce);
				if (CurrentEntityViewPropertyFunctionParameter.Id == entityId) CurrentEntityViewPropertyFunctionParameter = default(IEntityViewPropertyFunctionParameter);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(EntityViewPropertyFunctionParameterCache));
		}

		private static void handleEntityViewPropertyFunctionParameterCreated(IEntityViewPropertyFunctionParameter entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!EntityViewPropertyFunctionParameterCache.Contains(entity)) EntityViewPropertyFunctionParameterCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleEntityViewPropertyFunctionParameterLoaded(IEnumerable<IEntityViewPropertyFunctionParameter> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewPropertyFunctionParameterCache.Clear();
				foreach (var itm in entities)
				{
					EntityViewPropertyFunctionParameterCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewPropertyFunctionParameterUpdated(IEntityViewPropertyFunctionParameter entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityViewPropertyFunctionParameter = entity;
				
			   //if(!EntityViewPropertyFunctionParameterCache.Contains(entity)) EntityViewPropertyFunctionParameterCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewPropertyFunctionParameterChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityViewPropertyFunctionParameter = EntityViewPropertyFunctionParameterCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IEntityViewPropertyFunctionParameter _currentEntityViewPropertyFunctionParameter = NullEntity<EntityViewPropertyFunctionParameter>.Instance;
		public static IEntityViewPropertyFunctionParameter CurrentEntityViewPropertyFunctionParameter
		{
			get
			{
				return _currentEntityViewPropertyFunctionParameter;
			}
			set
			{
				if (_currentEntityViewPropertyFunctionParameter != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentEntityViewPropertyFunctionParameter, value ?? NullEntity<EntityViewPropertyFunctionParameter>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IEntityViewPropertyFunctionParameter>(_currentEntityViewPropertyFunctionParameter), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IEntityViewViewProperties> EntityViewViewPropertiesCache { get; } = new ObservableList<IEntityViewViewProperties>();
		
		private static void handleEntityViewViewPropertiesDeleted(int entityId)
		{
		   
			var ce = EntityViewViewPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewViewPropertiesCache.Remove(ce);
				if (CurrentEntityViewViewProperties.Id == entityId) CurrentEntityViewViewProperties = default(IEntityViewViewProperties);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(EntityViewViewPropertiesCache));
		}

		private static void handleEntityViewViewPropertiesCreated(IEntityViewViewProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!EntityViewViewPropertiesCache.Contains(entity)) EntityViewViewPropertiesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleEntityViewViewPropertiesLoaded(IEnumerable<IEntityViewViewProperties> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				EntityViewViewPropertiesCache.Clear();
				foreach (var itm in entities)
				{
					EntityViewViewPropertiesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewViewPropertiesUpdated(IEntityViewViewProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityViewViewProperties = entity;
				
			   //if(!EntityViewViewPropertiesCache.Contains(entity)) EntityViewViewPropertiesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentEntityViewViewPropertiesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentEntityViewViewProperties = EntityViewViewPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IEntityViewViewProperties _currentEntityViewViewProperties = NullEntity<EntityViewViewProperties>.Instance;
		public static IEntityViewViewProperties CurrentEntityViewViewProperties
		{
			get
			{
				return _currentEntityViewViewProperties;
			}
			set
			{
				if (_currentEntityViewViewProperties != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentEntityViewViewProperties, value ?? NullEntity<EntityViewViewProperties>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IEntityViewViewProperties>(_currentEntityViewViewProperties), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IFunctionBody> FunctionBodyCache { get; } = new ObservableList<IFunctionBody>();
		
		private static void handleFunctionBodyDeleted(int entityId)
		{
		   
			var ce = FunctionBodyCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionBodyCache.Remove(ce);
				if (CurrentFunctionBody.Id == entityId) CurrentFunctionBody = default(IFunctionBody);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(FunctionBodyCache));
		}

		private static void handleFunctionBodyCreated(IFunctionBody entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!FunctionBodyCache.Contains(entity)) FunctionBodyCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleFunctionBodyLoaded(IEnumerable<IFunctionBody> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionBodyCache.Clear();
				foreach (var itm in entities)
				{
					FunctionBodyCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionBodyUpdated(IFunctionBody entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctionBody = entity;
				
			   //if(!FunctionBodyCache.Contains(entity)) FunctionBodyCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionBodyChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctionBody = FunctionBodyCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IFunctionBody _currentFunctionBody = NullEntity<FunctionBody>.Instance;
		public static IFunctionBody CurrentFunctionBody
		{
			get
			{
				return _currentFunctionBody;
			}
			set
			{
				if (_currentFunctionBody != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentFunctionBody, value ?? NullEntity<FunctionBody>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IFunctionBody>(_currentFunctionBody), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IFunctionParameters> FunctionParametersCache { get; } = new ObservableList<IFunctionParameters>();
		
		private static void handleFunctionParametersDeleted(int entityId)
		{
		   
			var ce = FunctionParametersCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionParametersCache.Remove(ce);
				if (CurrentFunctionParameters.Id == entityId) CurrentFunctionParameters = default(IFunctionParameters);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(FunctionParametersCache));
		}

		private static void handleFunctionParametersCreated(IFunctionParameters entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!FunctionParametersCache.Contains(entity)) FunctionParametersCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleFunctionParametersLoaded(IEnumerable<IFunctionParameters> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionParametersCache.Clear();
				foreach (var itm in entities)
				{
					FunctionParametersCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionParametersUpdated(IFunctionParameters entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctionParameters = entity;
				
			   //if(!FunctionParametersCache.Contains(entity)) FunctionParametersCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionParametersChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctionParameters = FunctionParametersCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IFunctionParameters _currentFunctionParameters = NullEntity<FunctionParameters>.Instance;
		public static IFunctionParameters CurrentFunctionParameters
		{
			get
			{
				return _currentFunctionParameters;
			}
			set
			{
				if (_currentFunctionParameters != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentFunctionParameters, value ?? NullEntity<FunctionParameters>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IFunctionParameters>(_currentFunctionParameters), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IFunctionReturnType> FunctionReturnTypeCache { get; } = new ObservableList<IFunctionReturnType>();
		
		private static void handleFunctionReturnTypeDeleted(int entityId)
		{
		   
			var ce = FunctionReturnTypeCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionReturnTypeCache.Remove(ce);
				if (CurrentFunctionReturnType.Id == entityId) CurrentFunctionReturnType = default(IFunctionReturnType);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(FunctionReturnTypeCache));
		}

		private static void handleFunctionReturnTypeCreated(IFunctionReturnType entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!FunctionReturnTypeCache.Contains(entity)) FunctionReturnTypeCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleFunctionReturnTypeLoaded(IEnumerable<IFunctionReturnType> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionReturnTypeCache.Clear();
				foreach (var itm in entities)
				{
					FunctionReturnTypeCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionReturnTypeUpdated(IFunctionReturnType entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctionReturnType = entity;
				
			   //if(!FunctionReturnTypeCache.Contains(entity)) FunctionReturnTypeCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionReturnTypeChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctionReturnType = FunctionReturnTypeCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IFunctionReturnType _currentFunctionReturnType = NullEntity<FunctionReturnType>.Instance;
		public static IFunctionReturnType CurrentFunctionReturnType
		{
			get
			{
				return _currentFunctionReturnType;
			}
			set
			{
				if (_currentFunctionReturnType != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentFunctionReturnType, value ?? NullEntity<FunctionReturnType>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IFunctionReturnType>(_currentFunctionReturnType), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IFunctions> FunctionsCache { get; } = new ObservableList<IFunctions>();
		
		private static void handleFunctionsDeleted(int entityId)
		{
		   
			var ce = FunctionsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionsCache.Remove(ce);
				if (CurrentFunctions.Id == entityId) CurrentFunctions = default(IFunctions);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(FunctionsCache));
		}

		private static void handleFunctionsCreated(IFunctions entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!FunctionsCache.Contains(entity)) FunctionsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleFunctionsLoaded(IEnumerable<IFunctions> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionsCache.Clear();
				foreach (var itm in entities)
				{
					FunctionsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionsUpdated(IFunctions entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctions = entity;
				
			   //if(!FunctionsCache.Contains(entity)) FunctionsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctions = FunctionsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IFunctions _currentFunctions = NullEntity<Functions>.Instance;
		public static IFunctions CurrentFunctions
		{
			get
			{
				return _currentFunctions;
			}
			set
			{
				if (_currentFunctions != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentFunctions, value ?? NullEntity<Functions>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IFunctions>(_currentFunctions), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IFunctionSetFunctions> FunctionSetFunctionsCache { get; } = new ObservableList<IFunctionSetFunctions>();
		
		private static void handleFunctionSetFunctionsDeleted(int entityId)
		{
		   
			var ce = FunctionSetFunctionsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionSetFunctionsCache.Remove(ce);
				if (CurrentFunctionSetFunctions.Id == entityId) CurrentFunctionSetFunctions = default(IFunctionSetFunctions);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(FunctionSetFunctionsCache));
		}

		private static void handleFunctionSetFunctionsCreated(IFunctionSetFunctions entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!FunctionSetFunctionsCache.Contains(entity)) FunctionSetFunctionsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleFunctionSetFunctionsLoaded(IEnumerable<IFunctionSetFunctions> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionSetFunctionsCache.Clear();
				foreach (var itm in entities)
				{
					FunctionSetFunctionsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionSetFunctionsUpdated(IFunctionSetFunctions entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctionSetFunctions = entity;
				
			   //if(!FunctionSetFunctionsCache.Contains(entity)) FunctionSetFunctionsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionSetFunctionsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctionSetFunctions = FunctionSetFunctionsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IFunctionSetFunctions _currentFunctionSetFunctions = NullEntity<FunctionSetFunctions>.Instance;
		public static IFunctionSetFunctions CurrentFunctionSetFunctions
		{
			get
			{
				return _currentFunctionSetFunctions;
			}
			set
			{
				if (_currentFunctionSetFunctions != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentFunctionSetFunctions, value ?? NullEntity<FunctionSetFunctions>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IFunctionSetFunctions>(_currentFunctionSetFunctions), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IFunctionSets> FunctionSetsCache { get; } = new ObservableList<IFunctionSets>();
		
		private static void handleFunctionSetsDeleted(int entityId)
		{
		   
			var ce = FunctionSetsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionSetsCache.Remove(ce);
				if (CurrentFunctionSets.Id == entityId) CurrentFunctionSets = default(IFunctionSets);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(FunctionSetsCache));
		}

		private static void handleFunctionSetsCreated(IFunctionSets entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!FunctionSetsCache.Contains(entity)) FunctionSetsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleFunctionSetsLoaded(IEnumerable<IFunctionSets> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				FunctionSetsCache.Clear();
				foreach (var itm in entities)
				{
					FunctionSetsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionSetsUpdated(IFunctionSets entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctionSets = entity;
				
			   //if(!FunctionSetsCache.Contains(entity)) FunctionSetsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentFunctionSetsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentFunctionSets = FunctionSetsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IFunctionSets _currentFunctionSets = NullEntity<FunctionSets>.Instance;
		public static IFunctionSets CurrentFunctionSets
		{
			get
			{
				return _currentFunctionSets;
			}
			set
			{
				if (_currentFunctionSets != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentFunctionSets, value ?? NullEntity<FunctionSets>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IFunctionSets>(_currentFunctionSets), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<ILayers> LayersCache { get; } = new ObservableList<ILayers>();
		
		private static void handleLayersDeleted(int entityId)
		{
		   
			var ce = LayersCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				LayersCache.Remove(ce);
				if (CurrentLayers.Id == entityId) CurrentLayers = default(ILayers);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(LayersCache));
		}

		private static void handleLayersCreated(ILayers entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!LayersCache.Contains(entity)) LayersCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleLayersLoaded(IEnumerable<ILayers> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				LayersCache.Clear();
				foreach (var itm in entities)
				{
					LayersCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentLayersUpdated(ILayers entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentLayers = entity;
				
			   //if(!LayersCache.Contains(entity)) LayersCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentLayersChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentLayers = LayersCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static ILayers _currentLayers = NullEntity<Layers>.Instance;
		public static ILayers CurrentLayers
		{
			get
			{
				return _currentLayers;
			}
			set
			{
				if (_currentLayers != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentLayers, value ?? NullEntity<Layers>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<ILayers>(_currentLayers), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<ILayout> LayoutCache { get; } = new ObservableList<ILayout>();
		
		private static void handleLayoutDeleted(int entityId)
		{
		   
			var ce = LayoutCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				LayoutCache.Remove(ce);
				if (CurrentLayout.Id == entityId) CurrentLayout = default(ILayout);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(LayoutCache));
		}

		private static void handleLayoutCreated(ILayout entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!LayoutCache.Contains(entity)) LayoutCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleLayoutLoaded(IEnumerable<ILayout> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				LayoutCache.Clear();
				foreach (var itm in entities)
				{
					LayoutCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentLayoutUpdated(ILayout entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentLayout = entity;
				
			   //if(!LayoutCache.Contains(entity)) LayoutCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentLayoutChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentLayout = LayoutCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static ILayout _currentLayout = NullEntity<Layout>.Instance;
		public static ILayout CurrentLayout
		{
			get
			{
				return _currentLayout;
			}
			set
			{
				if (_currentLayout != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentLayout, value ?? NullEntity<Layout>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<ILayout>(_currentLayout), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IModelTypes> ModelTypesCache { get; } = new ObservableList<IModelTypes>();
		
		private static void handleModelTypesDeleted(int entityId)
		{
		   
			var ce = ModelTypesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ModelTypesCache.Remove(ce);
				if (CurrentModelTypes.Id == entityId) CurrentModelTypes = default(IModelTypes);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ModelTypesCache));
		}

		private static void handleModelTypesCreated(IModelTypes entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ModelTypesCache.Contains(entity)) ModelTypesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleModelTypesLoaded(IEnumerable<IModelTypes> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ModelTypesCache.Clear();
				foreach (var itm in entities)
				{
					ModelTypesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentModelTypesUpdated(IModelTypes entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentModelTypes = entity;
				
			   //if(!ModelTypesCache.Contains(entity)) ModelTypesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentModelTypesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentModelTypes = ModelTypesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IModelTypes _currentModelTypes = NullEntity<ModelTypes>.Instance;
		public static IModelTypes CurrentModelTypes
		{
			get
			{
				return _currentModelTypes;
			}
			set
			{
				if (_currentModelTypes != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentModelTypes, value ?? NullEntity<ModelTypes>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IModelTypes>(_currentModelTypes), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IOperators> OperatorsCache { get; } = new ObservableList<IOperators>();
		
		private static void handleOperatorsDeleted(int entityId)
		{
		   
			var ce = OperatorsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				OperatorsCache.Remove(ce);
				if (CurrentOperators.Id == entityId) CurrentOperators = default(IOperators);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(OperatorsCache));
		}

		private static void handleOperatorsCreated(IOperators entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!OperatorsCache.Contains(entity)) OperatorsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleOperatorsLoaded(IEnumerable<IOperators> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				OperatorsCache.Clear();
				foreach (var itm in entities)
				{
					OperatorsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentOperatorsUpdated(IOperators entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentOperators = entity;
				
			   //if(!OperatorsCache.Contains(entity)) OperatorsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentOperatorsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentOperators = OperatorsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IOperators _currentOperators = NullEntity<Operators>.Instance;
		public static IOperators CurrentOperators
		{
			get
			{
				return _currentOperators;
			}
			set
			{
				if (_currentOperators != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentOperators, value ?? NullEntity<Operators>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IOperators>(_currentOperators), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IParameters> ParametersCache { get; } = new ObservableList<IParameters>();
		
		private static void handleParametersDeleted(int entityId)
		{
		   
			var ce = ParametersCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ParametersCache.Remove(ce);
				if (CurrentParameters.Id == entityId) CurrentParameters = default(IParameters);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ParametersCache));
		}

		private static void handleParametersCreated(IParameters entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ParametersCache.Contains(entity)) ParametersCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleParametersLoaded(IEnumerable<IParameters> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ParametersCache.Clear();
				foreach (var itm in entities)
				{
					ParametersCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentParametersUpdated(IParameters entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentParameters = entity;
				
			   //if(!ParametersCache.Contains(entity)) ParametersCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentParametersChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentParameters = ParametersCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IParameters _currentParameters = NullEntity<Parameters>.Instance;
		public static IParameters CurrentParameters
		{
			get
			{
				return _currentParameters;
			}
			set
			{
				if (_currentParameters != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentParameters, value ?? NullEntity<Parameters>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IParameters>(_currentParameters), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IParts> PartsCache { get; } = new ObservableList<IParts>();
		
		private static void handlePartsDeleted(int entityId)
		{
		   
			var ce = PartsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				PartsCache.Remove(ce);
				if (CurrentParts.Id == entityId) CurrentParts = default(IParts);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(PartsCache));
		}

		private static void handlePartsCreated(IParts entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!PartsCache.Contains(entity)) PartsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handlePartsLoaded(IEnumerable<IParts> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				PartsCache.Clear();
				foreach (var itm in entities)
				{
					PartsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentPartsUpdated(IParts entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentParts = entity;
				
			   //if(!PartsCache.Contains(entity)) PartsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentPartsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentParts = PartsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IParts _currentParts = NullEntity<Parts>.Instance;
		public static IParts CurrentParts
		{
			get
			{
				return _currentParts;
			}
			set
			{
				if (_currentParts != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentParts, value ?? NullEntity<Parts>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IParts>(_currentParts), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IPresentationProperties> PresentationPropertiesCache { get; } = new ObservableList<IPresentationProperties>();
		
		private static void handlePresentationPropertiesDeleted(int entityId)
		{
		   
			var ce = PresentationPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				PresentationPropertiesCache.Remove(ce);
				if (CurrentPresentationProperties.Id == entityId) CurrentPresentationProperties = default(IPresentationProperties);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(PresentationPropertiesCache));
		}

		private static void handlePresentationPropertiesCreated(IPresentationProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!PresentationPropertiesCache.Contains(entity)) PresentationPropertiesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handlePresentationPropertiesLoaded(IEnumerable<IPresentationProperties> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				PresentationPropertiesCache.Clear();
				foreach (var itm in entities)
				{
					PresentationPropertiesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentPresentationPropertiesUpdated(IPresentationProperties entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentPresentationProperties = entity;
				
			   //if(!PresentationPropertiesCache.Contains(entity)) PresentationPropertiesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentPresentationPropertiesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentPresentationProperties = PresentationPropertiesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IPresentationProperties _currentPresentationProperties = NullEntity<PresentationProperties>.Instance;
		public static IPresentationProperties CurrentPresentationProperties
		{
			get
			{
				return _currentPresentationProperties;
			}
			set
			{
				if (_currentPresentationProperties != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentPresentationProperties, value ?? NullEntity<PresentationProperties>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IPresentationProperties>(_currentPresentationProperties), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IPrimaryKeyOptions> PrimaryKeyOptionsCache { get; } = new ObservableList<IPrimaryKeyOptions>();
		
		private static void handlePrimaryKeyOptionsDeleted(int entityId)
		{
		   
			var ce = PrimaryKeyOptionsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				PrimaryKeyOptionsCache.Remove(ce);
				if (CurrentPrimaryKeyOptions.Id == entityId) CurrentPrimaryKeyOptions = default(IPrimaryKeyOptions);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(PrimaryKeyOptionsCache));
		}

		private static void handlePrimaryKeyOptionsCreated(IPrimaryKeyOptions entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!PrimaryKeyOptionsCache.Contains(entity)) PrimaryKeyOptionsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handlePrimaryKeyOptionsLoaded(IEnumerable<IPrimaryKeyOptions> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				PrimaryKeyOptionsCache.Clear();
				foreach (var itm in entities)
				{
					PrimaryKeyOptionsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentPrimaryKeyOptionsUpdated(IPrimaryKeyOptions entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentPrimaryKeyOptions = entity;
				
			   //if(!PrimaryKeyOptionsCache.Contains(entity)) PrimaryKeyOptionsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentPrimaryKeyOptionsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentPrimaryKeyOptions = PrimaryKeyOptionsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IPrimaryKeyOptions _currentPrimaryKeyOptions = NullEntity<PrimaryKeyOptions>.Instance;
		public static IPrimaryKeyOptions CurrentPrimaryKeyOptions
		{
			get
			{
				return _currentPrimaryKeyOptions;
			}
			set
			{
				if (_currentPrimaryKeyOptions != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentPrimaryKeyOptions, value ?? NullEntity<PrimaryKeyOptions>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IPrimaryKeyOptions>(_currentPrimaryKeyOptions), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IProcess> ProcessCache { get; } = new ObservableList<IProcess>();
		
		private static void handleProcessDeleted(int entityId)
		{
		   
			var ce = ProcessCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ProcessCache.Remove(ce);
				if (CurrentProcess.Id == entityId) CurrentProcess = default(IProcess);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ProcessCache));
		}

		private static void handleProcessCreated(IProcess entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ProcessCache.Contains(entity)) ProcessCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleProcessLoaded(IEnumerable<IProcess> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ProcessCache.Clear();
				foreach (var itm in entities)
				{
					ProcessCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentProcessUpdated(IProcess entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentProcess = entity;
				
			   //if(!ProcessCache.Contains(entity)) ProcessCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentProcessChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentProcess = ProcessCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IProcess _currentProcess = NullEntity<Process>.Instance;
		public static IProcess CurrentProcess
		{
			get
			{
				return _currentProcess;
			}
			set
			{
				if (_currentProcess != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentProcess, value ?? NullEntity<Process>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IProcess>(_currentProcess), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IProcessSteps> ProcessStepsCache { get; } = new ObservableList<IProcessSteps>();
		
		private static void handleProcessStepsDeleted(int entityId)
		{
		   
			var ce = ProcessStepsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ProcessStepsCache.Remove(ce);
				if (CurrentProcessSteps.Id == entityId) CurrentProcessSteps = default(IProcessSteps);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ProcessStepsCache));
		}

		private static void handleProcessStepsCreated(IProcessSteps entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ProcessStepsCache.Contains(entity)) ProcessStepsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleProcessStepsLoaded(IEnumerable<IProcessSteps> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ProcessStepsCache.Clear();
				foreach (var itm in entities)
				{
					ProcessStepsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentProcessStepsUpdated(IProcessSteps entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentProcessSteps = entity;
				
			   //if(!ProcessStepsCache.Contains(entity)) ProcessStepsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentProcessStepsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentProcessSteps = ProcessStepsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IProcessSteps _currentProcessSteps = NullEntity<ProcessSteps>.Instance;
		public static IProcessSteps CurrentProcessSteps
		{
			get
			{
				return _currentProcessSteps;
			}
			set
			{
				if (_currentProcessSteps != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentProcessSteps, value ?? NullEntity<ProcessSteps>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IProcessSteps>(_currentProcessSteps), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IProcessStepScreens> ProcessStepScreensCache { get; } = new ObservableList<IProcessStepScreens>();
		
		private static void handleProcessStepScreensDeleted(int entityId)
		{
		   
			var ce = ProcessStepScreensCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ProcessStepScreensCache.Remove(ce);
				if (CurrentProcessStepScreens.Id == entityId) CurrentProcessStepScreens = default(IProcessStepScreens);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ProcessStepScreensCache));
		}

		private static void handleProcessStepScreensCreated(IProcessStepScreens entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ProcessStepScreensCache.Contains(entity)) ProcessStepScreensCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleProcessStepScreensLoaded(IEnumerable<IProcessStepScreens> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ProcessStepScreensCache.Clear();
				foreach (var itm in entities)
				{
					ProcessStepScreensCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentProcessStepScreensUpdated(IProcessStepScreens entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentProcessStepScreens = entity;
				
			   //if(!ProcessStepScreensCache.Contains(entity)) ProcessStepScreensCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentProcessStepScreensChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentProcessStepScreens = ProcessStepScreensCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IProcessStepScreens _currentProcessStepScreens = NullEntity<ProcessStepScreens>.Instance;
		public static IProcessStepScreens CurrentProcessStepScreens
		{
			get
			{
				return _currentProcessStepScreens;
			}
			set
			{
				if (_currentProcessStepScreens != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentProcessStepScreens, value ?? NullEntity<ProcessStepScreens>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IProcessStepScreens>(_currentProcessStepScreens), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IProjects> ProjectsCache { get; } = new ObservableList<IProjects>();
		
		private static void handleProjectsDeleted(int entityId)
		{
		   
			var ce = ProjectsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ProjectsCache.Remove(ce);
				if (CurrentProjects.Id == entityId) CurrentProjects = default(IProjects);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ProjectsCache));
		}

		private static void handleProjectsCreated(IProjects entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ProjectsCache.Contains(entity)) ProjectsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleProjectsLoaded(IEnumerable<IProjects> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ProjectsCache.Clear();
				foreach (var itm in entities)
				{
					ProjectsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentProjectsUpdated(IProjects entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentProjects = entity;
				
			   //if(!ProjectsCache.Contains(entity)) ProjectsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentProjectsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentProjects = ProjectsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IProjects _currentProjects = NullEntity<Projects>.Instance;
		public static IProjects CurrentProjects
		{
			get
			{
				return _currentProjects;
			}
			set
			{
				if (_currentProjects != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentProjects, value ?? NullEntity<Projects>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IProjects>(_currentProjects), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IRelationshipTypes> RelationshipTypesCache { get; } = new ObservableList<IRelationshipTypes>();
		
		private static void handleRelationshipTypesDeleted(int entityId)
		{
		   
			var ce = RelationshipTypesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				RelationshipTypesCache.Remove(ce);
				if (CurrentRelationshipTypes.Id == entityId) CurrentRelationshipTypes = default(IRelationshipTypes);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(RelationshipTypesCache));
		}

		private static void handleRelationshipTypesCreated(IRelationshipTypes entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!RelationshipTypesCache.Contains(entity)) RelationshipTypesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleRelationshipTypesLoaded(IEnumerable<IRelationshipTypes> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				RelationshipTypesCache.Clear();
				foreach (var itm in entities)
				{
					RelationshipTypesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentRelationshipTypesUpdated(IRelationshipTypes entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentRelationshipTypes = entity;
				
			   //if(!RelationshipTypesCache.Contains(entity)) RelationshipTypesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentRelationshipTypesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentRelationshipTypes = RelationshipTypesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IRelationshipTypes _currentRelationshipTypes = NullEntity<RelationshipTypes>.Instance;
		public static IRelationshipTypes CurrentRelationshipTypes
		{
			get
			{
				return _currentRelationshipTypes;
			}
			set
			{
				if (_currentRelationshipTypes != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentRelationshipTypes, value ?? NullEntity<RelationshipTypes>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IRelationshipTypes>(_currentRelationshipTypes), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IScreenLayouts> ScreenLayoutsCache { get; } = new ObservableList<IScreenLayouts>();
		
		private static void handleScreenLayoutsDeleted(int entityId)
		{
		   
			var ce = ScreenLayoutsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ScreenLayoutsCache.Remove(ce);
				if (CurrentScreenLayouts.Id == entityId) CurrentScreenLayouts = default(IScreenLayouts);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ScreenLayoutsCache));
		}

		private static void handleScreenLayoutsCreated(IScreenLayouts entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ScreenLayoutsCache.Contains(entity)) ScreenLayoutsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleScreenLayoutsLoaded(IEnumerable<IScreenLayouts> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ScreenLayoutsCache.Clear();
				foreach (var itm in entities)
				{
					ScreenLayoutsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentScreenLayoutsUpdated(IScreenLayouts entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentScreenLayouts = entity;
				
			   //if(!ScreenLayoutsCache.Contains(entity)) ScreenLayoutsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentScreenLayoutsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentScreenLayouts = ScreenLayoutsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IScreenLayouts _currentScreenLayouts = NullEntity<ScreenLayouts>.Instance;
		public static IScreenLayouts CurrentScreenLayouts
		{
			get
			{
				return _currentScreenLayouts;
			}
			set
			{
				if (_currentScreenLayouts != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentScreenLayouts, value ?? NullEntity<ScreenLayouts>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IScreenLayouts>(_currentScreenLayouts), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IScreenParts> ScreenPartsCache { get; } = new ObservableList<IScreenParts>();
		
		private static void handleScreenPartsDeleted(int entityId)
		{
		   
			var ce = ScreenPartsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ScreenPartsCache.Remove(ce);
				if (CurrentScreenParts.Id == entityId) CurrentScreenParts = default(IScreenParts);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ScreenPartsCache));
		}

		private static void handleScreenPartsCreated(IScreenParts entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ScreenPartsCache.Contains(entity)) ScreenPartsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleScreenPartsLoaded(IEnumerable<IScreenParts> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ScreenPartsCache.Clear();
				foreach (var itm in entities)
				{
					ScreenPartsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentScreenPartsUpdated(IScreenParts entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentScreenParts = entity;
				
			   //if(!ScreenPartsCache.Contains(entity)) ScreenPartsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentScreenPartsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentScreenParts = ScreenPartsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IScreenParts _currentScreenParts = NullEntity<ScreenParts>.Instance;
		public static IScreenParts CurrentScreenParts
		{
			get
			{
				return _currentScreenParts;
			}
			set
			{
				if (_currentScreenParts != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentScreenParts, value ?? NullEntity<ScreenParts>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IScreenParts>(_currentScreenParts), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IScreens> ScreensCache { get; } = new ObservableList<IScreens>();
		
		private static void handleScreensDeleted(int entityId)
		{
		   
			var ce = ScreensCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ScreensCache.Remove(ce);
				if (CurrentScreens.Id == entityId) CurrentScreens = default(IScreens);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ScreensCache));
		}

		private static void handleScreensCreated(IScreens entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ScreensCache.Contains(entity)) ScreensCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleScreensLoaded(IEnumerable<IScreens> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ScreensCache.Clear();
				foreach (var itm in entities)
				{
					ScreensCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentScreensUpdated(IScreens entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentScreens = entity;
				
			   //if(!ScreensCache.Contains(entity)) ScreensCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentScreensChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentScreens = ScreensCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IScreens _currentScreens = NullEntity<Screens>.Instance;
		public static IScreens CurrentScreens
		{
			get
			{
				return _currentScreens;
			}
			set
			{
				if (_currentScreens != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentScreens, value ?? NullEntity<Screens>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IScreens>(_currentScreens), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IScreenViews> ScreenViewsCache { get; } = new ObservableList<IScreenViews>();
		
		private static void handleScreenViewsDeleted(int entityId)
		{
		   
			var ce = ScreenViewsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ScreenViewsCache.Remove(ce);
				if (CurrentScreenViews.Id == entityId) CurrentScreenViews = default(IScreenViews);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ScreenViewsCache));
		}

		private static void handleScreenViewsCreated(IScreenViews entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ScreenViewsCache.Contains(entity)) ScreenViewsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleScreenViewsLoaded(IEnumerable<IScreenViews> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ScreenViewsCache.Clear();
				foreach (var itm in entities)
				{
					ScreenViewsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentScreenViewsUpdated(IScreenViews entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentScreenViews = entity;
				
			   //if(!ScreenViewsCache.Contains(entity)) ScreenViewsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentScreenViewsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentScreenViews = ScreenViewsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IScreenViews _currentScreenViews = NullEntity<ScreenViews>.Instance;
		public static IScreenViews CurrentScreenViews
		{
			get
			{
				return _currentScreenViews;
			}
			set
			{
				if (_currentScreenViews != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentScreenViews, value ?? NullEntity<ScreenViews>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IScreenViews>(_currentScreenViews), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<ISettings> SettingsCache { get; } = new ObservableList<ISettings>();
		
		private static void handleSettingsDeleted(int entityId)
		{
		   
			var ce = SettingsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				SettingsCache.Remove(ce);
				if (CurrentSettings.Id == entityId) CurrentSettings = default(ISettings);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(SettingsCache));
		}

		private static void handleSettingsCreated(ISettings entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!SettingsCache.Contains(entity)) SettingsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleSettingsLoaded(IEnumerable<ISettings> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				SettingsCache.Clear();
				foreach (var itm in entities)
				{
					SettingsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentSettingsUpdated(ISettings entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentSettings = entity;
				
			   //if(!SettingsCache.Contains(entity)) SettingsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentSettingsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentSettings = SettingsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static ISettings _currentSettings = NullEntity<Settings>.Instance;
		public static ISettings CurrentSettings
		{
			get
			{
				return _currentSettings;
			}
			set
			{
				if (_currentSettings != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentSettings, value ?? NullEntity<Settings>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<ISettings>(_currentSettings), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<ISettingsNames> SettingsNamesCache { get; } = new ObservableList<ISettingsNames>();
		
		private static void handleSettingsNamesDeleted(int entityId)
		{
		   
			var ce = SettingsNamesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				SettingsNamesCache.Remove(ce);
				if (CurrentSettingsNames.Id == entityId) CurrentSettingsNames = default(ISettingsNames);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(SettingsNamesCache));
		}

		private static void handleSettingsNamesCreated(ISettingsNames entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!SettingsNamesCache.Contains(entity)) SettingsNamesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleSettingsNamesLoaded(IEnumerable<ISettingsNames> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				SettingsNamesCache.Clear();
				foreach (var itm in entities)
				{
					SettingsNamesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentSettingsNamesUpdated(ISettingsNames entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentSettingsNames = entity;
				
			   //if(!SettingsNamesCache.Contains(entity)) SettingsNamesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentSettingsNamesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentSettingsNames = SettingsNamesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static ISettingsNames _currentSettingsNames = NullEntity<SettingsNames>.Instance;
		public static ISettingsNames CurrentSettingsNames
		{
			get
			{
				return _currentSettingsNames;
			}
			set
			{
				if (_currentSettingsNames != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentSettingsNames, value ?? NullEntity<SettingsNames>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<ISettingsNames>(_currentSettingsNames), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IStateMachines> StateMachinesCache { get; } = new ObservableList<IStateMachines>();
		
		private static void handleStateMachinesDeleted(int entityId)
		{
		   
			var ce = StateMachinesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				StateMachinesCache.Remove(ce);
				if (CurrentStateMachines.Id == entityId) CurrentStateMachines = default(IStateMachines);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(StateMachinesCache));
		}

		private static void handleStateMachinesCreated(IStateMachines entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!StateMachinesCache.Contains(entity)) StateMachinesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleStateMachinesLoaded(IEnumerable<IStateMachines> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				StateMachinesCache.Clear();
				foreach (var itm in entities)
				{
					StateMachinesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentStateMachinesUpdated(IStateMachines entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentStateMachines = entity;
				
			   //if(!StateMachinesCache.Contains(entity)) StateMachinesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentStateMachinesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentStateMachines = StateMachinesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IStateMachines _currentStateMachines = NullEntity<StateMachines>.Instance;
		public static IStateMachines CurrentStateMachines
		{
			get
			{
				return _currentStateMachines;
			}
			set
			{
				if (_currentStateMachines != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentStateMachines, value ?? NullEntity<StateMachines>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IStateMachines>(_currentStateMachines), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IStateMachineStates> StateMachineStatesCache { get; } = new ObservableList<IStateMachineStates>();
		
		private static void handleStateMachineStatesDeleted(int entityId)
		{
		   
			var ce = StateMachineStatesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				StateMachineStatesCache.Remove(ce);
				if (CurrentStateMachineStates.Id == entityId) CurrentStateMachineStates = default(IStateMachineStates);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(StateMachineStatesCache));
		}

		private static void handleStateMachineStatesCreated(IStateMachineStates entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!StateMachineStatesCache.Contains(entity)) StateMachineStatesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleStateMachineStatesLoaded(IEnumerable<IStateMachineStates> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				StateMachineStatesCache.Clear();
				foreach (var itm in entities)
				{
					StateMachineStatesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentStateMachineStatesUpdated(IStateMachineStates entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentStateMachineStates = entity;
				
			   //if(!StateMachineStatesCache.Contains(entity)) StateMachineStatesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentStateMachineStatesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentStateMachineStates = StateMachineStatesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IStateMachineStates _currentStateMachineStates = NullEntity<StateMachineStates>.Instance;
		public static IStateMachineStates CurrentStateMachineStates
		{
			get
			{
				return _currentStateMachineStates;
			}
			set
			{
				if (_currentStateMachineStates != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentStateMachineStates, value ?? NullEntity<StateMachineStates>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IStateMachineStates>(_currentStateMachineStates), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IStateMachineTriggers> StateMachineTriggersCache { get; } = new ObservableList<IStateMachineTriggers>();
		
		private static void handleStateMachineTriggersDeleted(int entityId)
		{
		   
			var ce = StateMachineTriggersCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				StateMachineTriggersCache.Remove(ce);
				if (CurrentStateMachineTriggers.Id == entityId) CurrentStateMachineTriggers = default(IStateMachineTriggers);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(StateMachineTriggersCache));
		}

		private static void handleStateMachineTriggersCreated(IStateMachineTriggers entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!StateMachineTriggersCache.Contains(entity)) StateMachineTriggersCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleStateMachineTriggersLoaded(IEnumerable<IStateMachineTriggers> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				StateMachineTriggersCache.Clear();
				foreach (var itm in entities)
				{
					StateMachineTriggersCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentStateMachineTriggersUpdated(IStateMachineTriggers entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentStateMachineTriggers = entity;
				
			   //if(!StateMachineTriggersCache.Contains(entity)) StateMachineTriggersCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentStateMachineTriggersChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentStateMachineTriggers = StateMachineTriggersCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IStateMachineTriggers _currentStateMachineTriggers = NullEntity<StateMachineTriggers>.Instance;
		public static IStateMachineTriggers CurrentStateMachineTriggers
		{
			get
			{
				return _currentStateMachineTriggers;
			}
			set
			{
				if (_currentStateMachineTriggers != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentStateMachineTriggers, value ?? NullEntity<StateMachineTriggers>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IStateMachineTriggers>(_currentStateMachineTriggers), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IStates> StatesCache { get; } = new ObservableList<IStates>();
		
		private static void handleStatesDeleted(int entityId)
		{
		   
			var ce = StatesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				StatesCache.Remove(ce);
				if (CurrentStates.Id == entityId) CurrentStates = default(IStates);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(StatesCache));
		}

		private static void handleStatesCreated(IStates entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!StatesCache.Contains(entity)) StatesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleStatesLoaded(IEnumerable<IStates> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				StatesCache.Clear();
				foreach (var itm in entities)
				{
					StatesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentStatesUpdated(IStates entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentStates = entity;
				
			   //if(!StatesCache.Contains(entity)) StatesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentStatesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentStates = StatesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IStates _currentStates = NullEntity<States>.Instance;
		public static IStates CurrentStates
		{
			get
			{
				return _currentStates;
			}
			set
			{
				if (_currentStates != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentStates, value ?? NullEntity<States>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IStates>(_currentStates), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<ISteps> StepsCache { get; } = new ObservableList<ISteps>();
		
		private static void handleStepsDeleted(int entityId)
		{
		   
			var ce = StepsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				StepsCache.Remove(ce);
				if (CurrentSteps.Id == entityId) CurrentSteps = default(ISteps);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(StepsCache));
		}

		private static void handleStepsCreated(ISteps entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!StepsCache.Contains(entity)) StepsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleStepsLoaded(IEnumerable<ISteps> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				StepsCache.Clear();
				foreach (var itm in entities)
				{
					StepsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentStepsUpdated(ISteps entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentSteps = entity;
				
			   //if(!StepsCache.Contains(entity)) StepsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentStepsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentSteps = StepsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static ISteps _currentSteps = NullEntity<Steps>.Instance;
		public static ISteps CurrentSteps
		{
			get
			{
				return _currentSteps;
			}
			set
			{
				if (_currentSteps != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentSteps, value ?? NullEntity<Steps>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<ISteps>(_currentSteps), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<ITestValues> TestValuesCache { get; } = new ObservableList<ITestValues>();
		
		private static void handleTestValuesDeleted(int entityId)
		{
		   
			var ce = TestValuesCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				TestValuesCache.Remove(ce);
				if (CurrentTestValues.Id == entityId) CurrentTestValues = default(ITestValues);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(TestValuesCache));
		}

		private static void handleTestValuesCreated(ITestValues entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!TestValuesCache.Contains(entity)) TestValuesCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleTestValuesLoaded(IEnumerable<ITestValues> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				TestValuesCache.Clear();
				foreach (var itm in entities)
				{
					TestValuesCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentTestValuesUpdated(ITestValues entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentTestValues = entity;
				
			   //if(!TestValuesCache.Contains(entity)) TestValuesCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentTestValuesChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentTestValues = TestValuesCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static ITestValues _currentTestValues = NullEntity<TestValues>.Instance;
		public static ITestValues CurrentTestValues
		{
			get
			{
				return _currentTestValues;
			}
			set
			{
				if (_currentTestValues != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentTestValues, value ?? NullEntity<TestValues>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<ITestValues>(_currentTestValues), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<ITriggers> TriggersCache { get; } = new ObservableList<ITriggers>();
		
		private static void handleTriggersDeleted(int entityId)
		{
		   
			var ce = TriggersCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				TriggersCache.Remove(ce);
				if (CurrentTriggers.Id == entityId) CurrentTriggers = default(ITriggers);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(TriggersCache));
		}

		private static void handleTriggersCreated(ITriggers entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!TriggersCache.Contains(entity)) TriggersCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleTriggersLoaded(IEnumerable<ITriggers> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				TriggersCache.Clear();
				foreach (var itm in entities)
				{
					TriggersCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentTriggersUpdated(ITriggers entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentTriggers = entity;
				
			   //if(!TriggersCache.Contains(entity)) TriggersCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentTriggersChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentTriggers = TriggersCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static ITriggers _currentTriggers = NullEntity<Triggers>.Instance;
		public static ITriggers CurrentTriggers
		{
			get
			{
				return _currentTriggers;
			}
			set
			{
				if (_currentTriggers != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentTriggers, value ?? NullEntity<Triggers>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<ITriggers>(_currentTriggers), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IViewEntity> ViewEntityCache { get; } = new ObservableList<IViewEntity>();
		
		private static void handleViewEntityDeleted(int entityId)
		{
		   
			var ce = ViewEntityCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ViewEntityCache.Remove(ce);
				if (CurrentViewEntity.Id == entityId) CurrentViewEntity = default(IViewEntity);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ViewEntityCache));
		}

		private static void handleViewEntityCreated(IViewEntity entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ViewEntityCache.Contains(entity)) ViewEntityCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleViewEntityLoaded(IEnumerable<IViewEntity> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ViewEntityCache.Clear();
				foreach (var itm in entities)
				{
					ViewEntityCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentViewEntityUpdated(IViewEntity entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentViewEntity = entity;
				
			   //if(!ViewEntityCache.Contains(entity)) ViewEntityCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentViewEntityChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentViewEntity = ViewEntityCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IViewEntity _currentViewEntity = NullEntity<ViewEntity>.Instance;
		public static IViewEntity CurrentViewEntity
		{
			get
			{
				return _currentViewEntity;
			}
			set
			{
				if (_currentViewEntity != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentViewEntity, value ?? NullEntity<ViewEntity>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IViewEntity>(_currentViewEntity), msgSource);

					// all current navigation properties = null

				}
			}
		}
		public static ObservableList<IViews> ViewsCache { get; } = new ObservableList<IViews>();
		
		private static void handleViewsDeleted(int entityId)
		{
		   
			var ce = ViewsCache.FirstOrDefault(x => x.Id == entityId);
			if (ce == null) return;
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ViewsCache.Remove(ce);
				if (CurrentViews.Id == entityId) CurrentViews = default(IViews);
			   
			}));
			//Instance.RaisePropertyChanged(nameof(ViewsCache));
		}

		private static void handleViewsCreated(IViews entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
			   if(!ViewsCache.Contains(entity)) ViewsCache.Add(entity); //CurrentEntity = default(IEntity);
			}));
		   
		}

		static void handleViewsLoaded(IEnumerable<IViews> entities)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				ViewsCache.Clear();
				foreach (var itm in entities)
				{
					ViewsCache.Add(itm);
				}
				//((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentViewsUpdated(IViews entity)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentViews = entity;
				
			   //if(!ViewsCache.Contains(entity)) ViewsCache.Add(entity);
			   //((IReactiveObject) new BaseViewModel()).RaisePropertyChanged();
			}));
		}

		static void handleCurrentViewsChanged(int entityId)
		{
			System.Windows.Application.Current.Dispatcher.Invoke(new Action(() =>
			{
				CurrentViews = ViewsCache.FirstOrDefault(x => x.Id == entityId);
			}));
		}

		static IViews _currentViews = NullEntity<Views>.Instance;
		public static IViews CurrentViews
		{
			get
			{
				return _currentViews;
			}
			set
			{
				if (_currentViews != value)
				{
					((IReactiveObject) new BaseViewModel()).RaiseAndSetIfChanged(ref _currentViews, value ?? NullEntity<Views>.Instance);
					// EventMessageBus.Current.Publish(new CurrentEntityChanged<IViews>(_currentViews), msgSource);

					// all current navigation properties = null

				}
			}
		}
		
	}
}
