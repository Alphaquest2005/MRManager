// <autogenerated>
//   This file was generated by T4 code generator Amoeba-Master.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using SystemMessages;
using CommonMessages;
using EventAggregator;
using EventMessages;
using Interfaces;
using EF.Entities;
using Entity.Expressions;
using JB.Collections.Reactive;
using ReactiveUI;
using ViewModelInterfaces;

namespace ViewModels
{
	public partial class ProcessSummaryListViewModel : ReactiveObject, ISummaryViewModel<IProcessAutoView>
	{
		private static readonly ProcessSummaryListViewModel _instance;
		 static ProcessSummaryListViewModel()
		{
			_instance = new ProcessSummaryListViewModel();
		}

		public static ProcessSummaryListViewModel Instance
		{
			get { return _instance; }
		}
		MessageSource msgSource => new MessageSource(this.ToString());

		private ProcessSummaryListViewModel()
		{
			
			EventMessageBus.Current.GetEvent<EntitySetLoaded<IProcessAutoView>>(msgSource).Subscribe(x => handleEntitySetUpdated(x.Entities));
			EventMessageBus.Current.GetEvent<LoadEntityViewDataServiceStarted<IProcess>>(msgSource)
			   .Subscribe(x => EventMessageBus.Current.Publish(new LoadEntityView<IProcess>(ProcessExpressions.ProcessAutoViewExpression,typeof(IProcessAutoView), typeof(ProcessAutoView), msgSource), msgSource));
		}

		private void handleEntitySetUpdated(IList<IProcessAutoView> entities)
		{
			EntitySet = new ObservableList<IProcessAutoView>(entities);
		}

		private ObservableList<IProcessAutoView> _EntitySet = new ObservableList<IProcessAutoView>();
		public ObservableList<IProcessAutoView> EntitySet
		{
			get
			{
				return _EntitySet;
			}
			set
			{
				this.RaiseAndSetIfChanged(ref _EntitySet, value ?? new ObservableList<IProcessAutoView>());
			}
		}

		private IProcessAutoView _currentEntity;

		public IProcessAutoView CurrentEntity
		{
			get { return _currentEntity; }
			set
			{
				if (!Equals(_currentEntity, value))
				{
					this.RaiseAndSetIfChanged(ref _currentEntity, value); //value == null? CreateEntity():value
					if (_currentEntity != null) EventMessageBus.Current.Publish(new CurrentEntityChanged<IProcess>(_currentEntity.Id,msgSource), msgSource);
				}
			}
		}

	}

}
