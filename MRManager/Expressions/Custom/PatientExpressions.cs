// <autogenerated>
//   This file was generated by T4 code generator MRManger-Expressions.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Common.DataEntites;
using MoreLinq;
using EF.Entities;
using Interfaces;

namespace Entity.Expressions
{
    public static partial class PatientExpressions
    {
        //TODO: Double check all data present
        public static Expression<Func<UserSignIn, SignInInfo>> SignInInfoExpression { get; } =

            x => new SignInInfo()
            {
                Id = x.Id,
                Medias = x.Persons.PersonMedia.Select(x2 => x2.Media).Select(x3 => x3.Value).FirstOrDefault(),
                Usersignin = x.Username,
                Password = x.Password,
            };


        public static Expression<Func<Persons_Patient, NextOfKinInfo>> NextOfKinInfoExpression { get; } =

            x => new NextOfKinInfo()
            {
                Id = x.Id,
                Name = string.Join(" ", x.Persons.PersonNames.Select(z => z.PersonName)),

                Email = x.Persons.PersonEmailAddress.FirstOrDefault().Email,
                PhoneNumber = x.Persons.PersonPhoneNumbers.FirstOrDefault().PhoneNumber,

                Address =
                    string.Join(", ",
                        x.Persons.PersonAddresses.Select(z => z.Addresses.AddressLines)
                            .Select(q => q.Select(r => r.Name))),

                Addresses = x.Persons.PersonAddresses.Select(z => new PersonAddressInfo()
                {
                    AddressType = z.AddressTypes.Name,
                    City = z.Addresses.AddressCities.Cities.Name,
                    Country = z.Addresses.AddressCountries.Countries.Name,
                    Parish = z.Addresses.AddressParishes.Parishes.Name,
                    State = z.Addresses.AddressStates.States.Name

                } as IPersonAddressInfo).ToList(),
                PhoneNumbers = x.Persons.PersonPhoneNumbers.Select(z => new PhoneNumbersInfo()
                {
                    PersonId = x.Id,
                    PhoneNumber = z.PhoneNumber,
                    Type = z.PhoneTypes.Name
                } as IPersonPhoneNumberInfo).ToList(),
            };


        public static Expression<Func<Persons_Patient, PatientInfo>> PatientInfoExpression { get; } =

            x => new PatientInfo()
            {
                Id = x.Id,
                Age = DateTime.Now.Year - x.DateOfBirth.Year,
                Email = x.Persons.PersonEmailAddress.FirstOrDefault().Email,
                PhoneNumber = x.Persons.PersonPhoneNumbers.FirstOrDefault().PhoneNumber,
                Sex = x.Sex.Name,
                Address =
                    string.Join(", ",
                        x.Persons.PersonAddresses.SelectMany(z => z.PrimaryPersonAddress)
                            .SelectMany(u => u.PersonAddresses.Addresses.AddressLines)
                            .Select(h => h.Name)),
                BirthCountry = x.Countries.Name,
                Name = string.Join(" ", x.Persons.PersonNames.Select(z => z.PersonName))
            };

        public static Expression<Func<Persons_Patient, NonResidentInfo>> NonResidentInfoExpression { get; } =

            x => new NonResidentInfo()
            {
                Id = x.Id,
                BoatName = x.Persons_NonResidentPatient.BoatInfo.BoatName,
                ArrivalDate = x.Persons_NonResidentPatient.Persons_ArrivalDepartureInfo.ArrivalDate,
                DepartureDate = x.Persons_NonResidentPatient.Persons_ArrivalDepartureInfo.DepartureDate,
                HotelName = x.Persons_NonResidentPatient.NonResidentHotelInfo.Organisations_Hotels.Organisations.Name,
                Marina = x.Persons_NonResidentPatient.BoatInfo.MarinaList,
                School = x.Persons_NonResidentPatient.StudentInfo.School,
                Addresses = x.Persons.PersonAddresses.Select(z => new ForeignAddressInfo()
                {
                    Addresstype = z.AddressTypes.Name,
                    Addresslines = string.Join(", ", z.Addresses.AddressLines.Select(s => s.Name)),
                    City = z.Addresses.AddressCities.Cities.Name,
                    Country = z.Addresses.AddressCountries.Countries.Name,
                    Parish = z.Addresses.AddressParishes.Parishes.Name,
                    State = z.Addresses.AddressStates.States.Name

                } as IForeignAddressInfo).ToList(),
                PhoneNumbers = x.Persons.PersonPhoneNumbers.Select(z => new PhoneNumbersInfo()
                {
                    PersonId = x.Id,
                    PhoneNumber = z.PhoneNumber,
                    Type = z.PhoneTypes.Name
                } as IPersonPhoneNumberInfo).ToList(),
            };

        public static Expression<Func<Persons_Patient, List<PhoneNumbersInfo>>> PatientPhoneNumbersInfoExpression { get;
        } =

            x => x.Persons.PersonPhoneNumbers.Select(z => new PhoneNumbersInfo()
            {
                PersonId = x.Id,
                PhoneNumber = z.PhoneNumber,
                Type = z.PhoneTypes.Name
            }).ToList();

        public static Expression<Func<Interviews, InterviewInfo>> InterviewInfoExpression { get; } =
            x => new InterviewInfo()
            {
                Id = x.Id,
                Interview = x.Name,
                Category = x.MedicalCategory.Name,
                Phase = x.Phase.Name
            };

        public static Expression<Func<PatientResponses, PatientResponseInfo>> PatientResponseInfoExpression { get; } =
            x => new PatientResponseInfo()
            {
                Id = x.Id,
                Category = x.Questions.Interviews.MedicalCategory.Name,
                Question = x.Questions.Description,
                Interview = x.Questions.Interviews.Name,
                PatientSyntomId = x.PatientSyntomId,
                InterviewId = x.Questions.InterviewId,
                PatientVisitId = x.PatientVisitId,
                QuestionId = x.QuestionId,
                PatientId = x.PatientVisit.PatientId,
                ResponseImages = x.ResponseImages.Select(z => new ResponseImage()
                {
                    MediaId = z.MediaId,
                    PatientResponseId = z.PatientResponseId,
                    Media = z.Media.Value
                } as IResponseImage).ToList(),
                ResponseOptions = x.Questions.ResponseOptions.OrderBy(z => z.ResponseNumber).Select(z => new ResponseOptionInfo()
                {
                    Id = z.Id,
                    Description = z.Description,
                    QuestionId = z.QuestionId,
                    ResponseId =
                        (int?)
                            (z.Response.Any()
                                ? z.Response.Where(x1 => x1.PatientResponseId == x.Id).Select(x2 => x2.Id).First()
                                : 0),
                    Value =
                            z.Response.Any()
                            ? z.Response.Where(x1 => x1.PatientResponseId == x.Id).Select(x2 => x2.Value).First()
                            : null, //
                    QuestionResponseTypeId = z.QuestionResponseTypeId,
                    Type = z.QuestionResponseTypes.Name,
                    PatientResponseId = x.Id,
                    ResponseNumber = z.ResponseNumber

                } as IResponseOptionInfo).ToList(),


            };
        //ToDo: just a short cut to avoid implementing entity repostiory
        public static Expression<Func<Response, ResponseInfo>> ResponseInfoExpression { get; } =
            x => new ResponseInfo()
            {
                Id = x.Id,
                PatientResponseId = x.PatientResponseId,
                ResponseOptionId = x.ResponseOptionId,
                QuestionId = x.ResponseOptions.QuestionId,
                Value = x.Value
            };


       public static Expression<Func<Questions, QuestionInfo>> QuestionInfoInfoExpression { get; } =
            x => new QuestionInfo()
            {
                Id = x.Id,
                InterviewId = x.InterviewId,
                Description = x.Description,    
                EntityAttributeId = x.EntityAttributeId,
                Interview = x.Interviews.Name,
                Phase = x.Interviews.Phase.Name,
                Category = x.Interviews.MedicalCategory.Name,
                Entity = x.EntityAttributes.Entity,
                Attribute = x.EntityAttributes.Attribute,
                QuestionNumber = x.QuestionNumber

            };

        public static Expression<Func<Questions, QuestionResponseOptionInfo>> QuestionResponseOptionsExpression { get; } =
          (q) => new QuestionResponseOptionInfo()
          {
                Id = q.Id,
                Category = q.Interviews.MedicalCategory.Name,
                Question = q.Description,
                Interview = q.Interviews.Name,
                InterviewId = q.InterviewId,
                ResponseOptions = q.ResponseOptions
                                    .Select(z => new ResponseOptionInfo()
                                    {
                                        Id = z.Id,
                                        Description = z.Description,
                                        QuestionId = z.QuestionId,
                                        ResponseId = 0,
                                        QuestionResponseTypeId = z.QuestionResponseTypeId,
                                        Type = z.QuestionResponseTypes.Name,
                                       
                                        ResponseNumber = z.ResponseNumber
                                    } as IResponseOptionInfo).ToList(),
                 PatientResponses = q.PatientResponses.SelectMany(pr => pr.Response).Select(z => new ResponseOptionInfo()
                 {
                     PatientResponseId = z.Id,
                     PatientVisitId = z.PatientResponses.PatientVisit.Id,
                     PatientId = z.PatientResponses.PatientVisit.PatientId,
                     Id = z.ResponseOptionId,
                     Description = z.ResponseOptions.Description,
                     QuestionId = z.ResponseOptions.QuestionId,
                     ResponseId = z.Id,
                     Value = z.Value,
                     QuestionResponseTypeId = z.ResponseOptions.QuestionResponseTypeId,
                     Type = z.ResponseOptions.QuestionResponseTypes.Name
                 } as IResponseOptionInfo).ToList()
          };

        public static Expression<Func<Persons_Doctor, DoctorInfo>> DoctorInfoExpression { get; } =
                        x => new DoctorInfo()
                        {
                            Id = x.Id,
                            Name = string.Join(" ", x.Persons.PersonNames.Select(z => z.PersonName)),
                            Code = x.Code
                        };


        public static Expression<Func<Response, ResponseOptionInfo>> ResponseOptionInfoExpression { get; } =
                        x => new ResponseOptionInfo()
                        {
                            Id = x.ResponseOptionId,
                            Description = x.ResponseOptions.Description,
                            PatientId = x.PatientResponses.PatientVisit.PatientId,
                            PatientResponseId = x.PatientResponseId,
                            PatientVisitId = x.PatientResponses.PatientVisitId,
                            QuestionId = x.ResponseOptions.QuestionId,
                            QuestionResponseTypeId = x.ResponseOptions.QuestionResponseTypeId,
                            ResponseId = x.Id,
                            ResponseNumber = x.ResponseOptions.ResponseNumber,
                            Type = x.ResponseOptions.QuestionResponseTypes.Name,
                            Value = x.Value
                        };

        public static Expression<Func<ResponseOptions, ResponseOptionInfo>> ResponseOptionInfo1Expression { get; } =
                        x => new ResponseOptionInfo()
                        {
                            Id = x.Id,
                            Description = x.Description,
                           // PatientId = x.PatientResponses.PatientVisit.PatientId,
                           // PatientResponseId = x.PatientResponseId,
                           // PatientVisitId = x.,
                            QuestionId = x.QuestionId,
                            QuestionResponseTypeId = x.QuestionResponseTypeId,
                            ResponseId = x.Id,
                            ResponseNumber = x.ResponseNumber,
                            Type = x.QuestionResponseTypes.Name,
                            //Value = x.Value
                        };


    }


}
