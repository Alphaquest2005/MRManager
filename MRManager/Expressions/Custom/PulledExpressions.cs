// <autogenerated>
//   This file was generated by T4 code generator MRManger-Expressions.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Common.DataEntites;
using EF.Entities;
using Interfaces;

namespace Entity.Expressions
{
    public static class Entities
    {
        public const string Patient = "Patient";
    }

    public static class Patient
    {
        public const string Name = "Name";
        public const string Birthdate = "BirthDate";
        public const string EntityId = "Id";
    }

    public static partial class PulledExpressions
    {

        public static Expression<Func<Patients, PatientDetailsInfo>> PatientDetailsInfoExpression { get; } =

            x => new PatientDetailsInfo()
            {
                Id = x.Id,
                IdNumber =
                    x.PatientVisit.SelectMany(x3 => x3.PatientResponses)
                        .Where(
                            x2 =>
                                x2.Questions.EntityAttributes.Entity == Entities.Patient &&
                                x2.Questions.EntityAttributes.Attribute == Patient.EntityId)
                        .SelectMany(x4 => x4.Response)
                        .Select(x5 => x5.Value)
                        .FirstOrDefault(),
                Name =
                    string.Join(" ",
                        x.PatientVisit.SelectMany(x3 => x3.PatientResponses)
                            .Where(
                                x2 =>
                                    x2.Questions.EntityAttributes.Entity == Entities.Patient &&
                                    x2.Questions.EntityAttributes.Attribute == Patient.Name)
                            .SelectMany(x4 => x4.Response)
                            .Select(x5 => x5.Value)),
                Age =
                    DateTime.Now.Year -
                    Convert.ToDateTime(
                        x.PatientVisit.SelectMany(x3 => x3.PatientResponses)
                            .Where(
                                x2 =>
                                    x2.Questions.EntityAttributes.Entity == Entities.Patient &&
                                    x2.Questions.EntityAttributes.Attribute == Patient.Birthdate)
                            .SelectMany(x4 => x4.Response)
                            .Select(x5 => x5.Value)
                            .FirstOrDefault()).Year,

            };

        public static Expression<Func<Patients, PatientInfo>> PatientInfoExpression { get; } =

            x => new PatientInfo()
            {
                Id = x.Id,
                Name =
                    string.Join(" ",
                        x.PatientVisit.SelectMany(x3 => x3.PatientResponses)
                            .Where(
                                x2 =>
                                    x2.Questions.EntityAttributes.Entity == Entities.Patient &&
                                    x2.Questions.EntityAttributes.Attribute == Patient.Name)
                            .SelectMany(x4 => x4.Response)
                            .Select(x5 => x5.Value)),
                Age =
                    DateTime.Now.Year -
                    Convert.ToDateTime(
                        x.PatientVisit.SelectMany(x3 => x3.PatientResponses)
                            .Where(
                                x2 =>
                                    x2.Questions.EntityAttributes.Entity == Entities.Patient &&
                                    x2.Questions.EntityAttributes.Attribute == Patient.Birthdate)
                            .SelectMany(x4 => x4.Response)
                            .Select(x5 => x5.Value)
                            .FirstOrDefault()).Year,
            };

        public static Expression<Func<PatientVisit, PatientVisitInfo>> PatientVistInfoExpression { get; } =
            x => new PatientVisitInfo()
            {
                Id = x.Id,
                PatientId = x.PatientId,
                DateOfVisit = x.DateOfVisit,
                Purpose = x.VisitType.Name,
                AttendingDoctor = string.Join(" ", x.Persons_Doctor.Persons.PersonNames.Select(z => z.PersonName)),
                PatientSyntoms = x.PatientSyntoms.Select(z => new PatientSyntomInfo()
                {
                    Id = z.Id,
                    Syntom = z.Syntoms.Name,
                    Priority = z.SyntomPriority.Name,
                    Status = z.SyntomStatus.Name,
                    Systems = z.Syntoms.SyntomMedicalSystems.Select(s => new SyntomMedicalSystemInfo()
                    {
                        MedicalSystemId = s.MedicalSystemId,
                        System = s.MedicalSystems.Name,
                        Interviews = s.MedicalSystems.MedicalSystemInterviews.Select(i => new InterviewInfo()
                        {
                            Id = i.InterviewId,
                            Interview = i.Interviews.Name,
                            Category = i.Interviews.MedicalCategory.Name,
                            Phase = i.Interviews.Phase.Name
                        } as IInterviewInfo).ToList()
                    } as ISyntomMedicalSystemInfo).ToList(),
                } as IPatientSyntomInfo).ToList()
            };




    }


}
