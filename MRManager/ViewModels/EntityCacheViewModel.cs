// <autogenerated>
//   This file was generated by T4 code generator Amoeba-Master.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.Linq;
using System.Reactive;
using SystemInterfaces;
using Core.Common.UI;
using Interfaces;
using Reactive.Bindings;
using ReactiveUI;
using ViewModel.Interfaces;
using ViewModelInterfaces;

namespace ViewModels
{
    //[Export(typeof(IEntityCacheViewModel<>))]
    //public class EntityCacheViewModel<TEntity> : ObservableListViewModel<TEntity>, IEntityCacheViewModel<TEntity> where TEntity : IEntity
    //{
    //    public EntityCacheViewModel() { }
       
    //    public EntityCacheViewModel(ISystemProcess process, List<IViewModelEventSubscription<IViewModel, IEvent>> eventSubscriptions, List<IViewModelEventPublication<IViewModel, IEvent>> eventPublications, List<IViewModelEventCommand<IViewModel, IEvent>> commandInfo, Type orientation) : base(eventSubscriptions, eventPublications, commandInfo, process, orientation)
    //    {
    //        this.WireEvents();
    //    }


    //}

    [Export(typeof(IEntityCacheViewModel<ISyntomPriority>))]
    public class SyntomPriorityCacheViewModel : ObservableListViewModel<ISyntomPriority>, IEntityCacheViewModel<ISyntomPriority> 
    {
        public SyntomPriorityCacheViewModel() { }

        public SyntomPriorityCacheViewModel(ISystemProcess process, IViewInfo viewInfo, List<IViewModelEventSubscription<IViewModel, IEvent>> eventSubscriptions, List<IViewModelEventPublication<IViewModel, IEvent>> eventPublications, List<IViewModelEventCommand<IViewModel, IEvent>> commandInfo, Type orientation, int priority) : base(viewInfo, eventSubscriptions, eventPublications, commandInfo, process, orientation, priority)
        {
            this.WireEvents();
        }

    }

    [Export(typeof(IEntityCacheViewModel<ISyntomStatus>))]
    public class SyntomStatusCacheViewModel : ObservableListViewModel<ISyntomStatus>, IEntityCacheViewModel<ISyntomStatus>
    {
        public SyntomStatusCacheViewModel() { }

        public SyntomStatusCacheViewModel(ISystemProcess process, IViewInfo viewInfo, List<IViewModelEventSubscription<IViewModel, IEvent>> eventSubscriptions, List<IViewModelEventPublication<IViewModel, IEvent>> eventPublications, List<IViewModelEventCommand<IViewModel, IEvent>> commandInfo, Type orientation, int priority) : base(viewInfo, eventSubscriptions, eventPublications, commandInfo, process, orientation, priority)
        {
            this.WireEvents();
        }

    }

    [Export(typeof(IEntityCacheViewModel<ISyntoms>))]
    public class SyntomCacheViewModel : ObservableListViewModel<ISyntoms>, IEntityCacheViewModel<ISyntoms>
    {
        public SyntomCacheViewModel() { }

        public SyntomCacheViewModel(ISystemProcess process, IViewInfo viewInfo, List<IViewModelEventSubscription<IViewModel, IEvent>> eventSubscriptions, List<IViewModelEventPublication<IViewModel, IEvent>> eventPublications, List<IViewModelEventCommand<IViewModel, IEvent>> commandInfo, Type orientation, int priority) : base(viewInfo, eventSubscriptions, eventPublications, commandInfo, process, orientation, priority)
        {
            this.WireEvents();
        }

    }

    [Export(typeof(IEntityCacheViewModel<IVisitType>))]
    public class VisitTypeCacheViewModel : ObservableListViewModel<IVisitType>, IEntityCacheViewModel<IVisitType>
    {
        public VisitTypeCacheViewModel() { }

        public VisitTypeCacheViewModel(ISystemProcess process, IViewInfo viewInfo, List<IViewModelEventSubscription<IViewModel, IEvent>> eventSubscriptions, List<IViewModelEventPublication<IViewModel, IEvent>> eventPublications, List<IViewModelEventCommand<IViewModel, IEvent>> commandInfo, Type orientation, int priority) : base(viewInfo, eventSubscriptions, eventPublications, commandInfo, process, orientation, priority)
        {
            this.WireEvents();
        }

    }

    [Export(typeof(IEntityCacheViewModel<IPhase>))]
    public class PhaseCacheViewModel : ObservableListViewModel<IPhase>, IEntityCacheViewModel<IPhase>
    {
        public PhaseCacheViewModel() { }

        public PhaseCacheViewModel(ISystemProcess process, IViewInfo viewInfo, List<IViewModelEventSubscription<IViewModel, IEvent>> eventSubscriptions, List<IViewModelEventPublication<IViewModel, IEvent>> eventPublications, List<IViewModelEventCommand<IViewModel, IEvent>> commandInfo, Type orientation, int priority) : base(viewInfo, eventSubscriptions, eventPublications, commandInfo, process, orientation, priority)
        {
            this.WireEvents();
        }

    }

    [Export(typeof(IEntityCacheViewModel<IMedicalCategory>))]
    public class MedicalCategoryCacheViewModel : ObservableListViewModel<IMedicalCategory>, IEntityCacheViewModel<IMedicalCategory>
    {
        public MedicalCategoryCacheViewModel() { }

        public MedicalCategoryCacheViewModel(ISystemProcess process, IViewInfo viewInfo, List<IViewModelEventSubscription<IViewModel, IEvent>> eventSubscriptions, List<IViewModelEventPublication<IViewModel, IEvent>> eventPublications, List<IViewModelEventCommand<IViewModel, IEvent>> commandInfo, Type orientation, int priority) : base(viewInfo, eventSubscriptions, eventPublications, commandInfo, process, orientation, priority)
        {
            this.WireEvents();
        }

    }

    [Export(typeof(IEntityCacheViewModel<IMedicalSystems>))]
    public class MedicalSystemsCacheViewModel : ObservableListViewModel<IMedicalSystems>, IEntityCacheViewModel<IMedicalSystems>
    {
        public MedicalSystemsCacheViewModel() { }

        public MedicalSystemsCacheViewModel(ISystemProcess process, IViewInfo viewInfo, List<IViewModelEventSubscription<IViewModel, IEvent>> eventSubscriptions, List<IViewModelEventPublication<IViewModel, IEvent>> eventPublications, List<IViewModelEventCommand<IViewModel, IEvent>> commandInfo, Type orientation, int priority) : base(viewInfo, eventSubscriptions, eventPublications, commandInfo, process, orientation, priority)
        {
            this.WireEvents();
        }

    }

    [Export(typeof(IEntityCacheViewModel<IQuestionResponseTypes>))]
    public class QuestionResponseTypeCacheViewModel : ObservableListViewModel<IQuestionResponseTypes>, IEntityCacheViewModel<IQuestionResponseTypes>
    {
        public QuestionResponseTypeCacheViewModel() { }

        public QuestionResponseTypeCacheViewModel(ISystemProcess process, IViewInfo viewInfo, List<IViewModelEventSubscription<IViewModel, IEvent>> eventSubscriptions, List<IViewModelEventPublication<IViewModel, IEvent>> eventPublications, List<IViewModelEventCommand<IViewModel, IEvent>> commandInfo, Type orientation, int priority) : base(viewInfo, eventSubscriptions, eventPublications, commandInfo, process, orientation, priority)
        {
            this.WireEvents();
        }

    }

    [Export(typeof(IEntityCacheViewModel<ISex>))]
    public class SexCacheViewModel : ObservableListViewModel<ISex>, IEntityCacheViewModel<ISex>
    {
        public SexCacheViewModel() { }

        public SexCacheViewModel(ISystemProcess process, IViewInfo viewInfo, List<IViewModelEventSubscription<IViewModel, IEvent>> eventSubscriptions, List<IViewModelEventPublication<IViewModel, IEvent>> eventPublications, List<IViewModelEventCommand<IViewModel, IEvent>> commandInfo, Type orientation, int priority) : base(viewInfo, eventSubscriptions, eventPublications, commandInfo, process, orientation, priority)
        {
            this.WireEvents();
        }

    }

}
