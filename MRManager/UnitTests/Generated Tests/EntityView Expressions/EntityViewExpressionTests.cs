// <autogenerated>
//   This file was generated by T4 code generator MRManger-UnitTests.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using EF.DBContexts;
using Entity.Expressions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTests.Expressions
{
	[TestClass]
	public class  EntityViewExpressionTests
	{
		[TestMethod]
		public void AddressInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Addresses.Select(AddressesExpressions.AddressesToAddressInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void AddressLineInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Addresses.Select(AddressesExpressions.AddressesToAddressLineInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void CountryInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Countries.Select(CountriesExpressions.CountriesToCountryInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ParishInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Parishes.Select(ParishesExpressions.ParishesToParishInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void InterviewInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.PatientResponses.Select(PatientResponsesExpressions.PatientResponsesToInterviewInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PatientVisitInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.PatientVisit.Select(PatientVisitExpressions.PatientVisitToPatientVisitInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PatientSummaryInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons.Select(PersonsExpressions.PersonsToPatientSummaryInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PersonAddressInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons.Select(PersonsExpressions.PersonsToPersonAddressInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PersonInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons.Select(PersonsExpressions.PersonsToPersonInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PersonNameInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons.Select(PersonsExpressions.PersonsToPersonNameInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ForeignAddressInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons_NonResidentPatient.Select(Persons_NonResidentPatientExpressions.Persons_NonResidentPatientToForeignAddressInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ForeignPhoneNumberInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons_NonResidentPatient.Select(Persons_NonResidentPatientExpressions.Persons_NonResidentPatientToForeignPhoneNumberInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void NonResidentPatientInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons_NonResidentPatient.Select(Persons_NonResidentPatientExpressions.Persons_NonResidentPatientToNonResidentPatientInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void AllergiesInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons_Patient.Select(Persons_PatientExpressions.Persons_PatientToAllergiesInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PatientAddressInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons_Patient.Select(Persons_PatientExpressions.Persons_PatientToPatientAddressInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PatientCountryOfResidenceExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons_Patient.Select(Persons_PatientExpressions.Persons_PatientToPatientCountryOfResidenceExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PatientInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons_Patient.Select(Persons_PatientExpressions.Persons_PatientToPatientInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PatientJobInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons_Patient.Select(Persons_PatientExpressions.Persons_PatientToPatientJobInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PatientPhoneNumbersExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Persons_Patient.Select(Persons_PatientExpressions.Persons_PatientToPatientPhoneNumbersExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PersonPhoneNumberInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.PhoneTypes.Select(PhoneTypesExpressions.PhoneTypesToPersonPhoneNumberInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void InterviewReponsesExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Questions.Select(QuestionsExpressions.QuestionsToInterviewReponsesExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PatientResponseInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Questions.Select(QuestionsExpressions.QuestionsToPatientResponseInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void ResponseOptionInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.ResponseOptions.Select(ResponseOptionsExpressions.ResponseOptionsToResponseOptionInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PatientSyntomsInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Syntoms.Select(SyntomsExpressions.SyntomsToPatientSyntomsInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void BloodPressureInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Units.Select(UnitsExpressions.UnitsToBloodPressureInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void HeightInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Units.Select(UnitsExpressions.UnitsToHeightInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void PulseInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Units.Select(UnitsExpressions.UnitsToPulseInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void RespirationInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Units.Select(UnitsExpressions.UnitsToRespirationInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void TemperatureInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Units.Select(UnitsExpressions.UnitsToTemperatureInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void WeightInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.Units.Select(UnitsExpressions.UnitsToWeightInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void VitalsHistoryInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.VitalSigns.Select(VitalSignsExpressions.VitalSignsToVitalsHistoryInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
		[TestMethod]
		public void VitalSignsInfoExpressionGetData()
		{
			var res = MRManagerDBContext.Instance.VitalSigns.Select(VitalSignsExpressions.VitalSignsToVitalSignsInfoExpression).ToList();
			if (res.Any()) Debug.Assert(true);
		}
	}
}
