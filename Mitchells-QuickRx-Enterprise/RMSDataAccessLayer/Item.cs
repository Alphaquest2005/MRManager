//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RMSDataAccessLayer
{
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel;
    using TrackableEntities;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Runtime.Serialization;
    using System.Collections.ObjectModel;

    using System;
    using System.Collections.Generic;
    using TrackableEntities.Client;
    
    public partial class Item : BaseEntity<Item>
    {
        
        public Item()
        {
            this.TransactionEntryItems = new ObservableCollection<TransactionEntryItem>();
            CustomStartup();
            CustomStartup2();
            this.PropertyChanged += UpdatePropertyChanged;
            
        }
        partial void CustomStartup();
        partial void CustomStartup2();
    
            private void UpdatePropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                if (!string.IsNullOrEmpty(e.PropertyName) && (!Environment.StackTrace.Contains("Internal.Materialization")) && TrackingState == TrackingState.Unchanged)
                {
                    TrackingState = TrackingState.Modified;
                }
            }
    
            
            ChangeTrackingCollection<Item> _changeTracker;
            [NotMapped]
            [IgnoreDataMember]
            public ChangeTrackingCollection<Item> ChangeTracker
            {
                get
                {
                    return _changeTracker;
                }
            }
            
            public new void StartTracking()
            {
                _changeTracker = new ChangeTrackingCollection<Item>(this);
            }
        [DataMember]
                    [StringLength(1000)]
    	public string Description
    	{ 
    		get { return _Description; }
    		set
    		{
    			if (Equals(value, _Description)) return;
    			_Description = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Description;
        [DataMember]
        	public Nullable<bool> ItemNotDiscountable
    	{ 
    		get { return _ItemNotDiscountable; }
    		set
    		{
    			if (Equals(value, _ItemNotDiscountable)) return;
    			_ItemNotDiscountable = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<bool> _ItemNotDiscountable;
        [DataMember]
                    [Required(ErrorMessage="ItemId is required")]
    	public int ItemId
    	{ 
    		get { return _ItemId; }
    		set
    		{
    			if (Equals(value, _ItemId)) return;
    			_ItemId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _ItemId;
        [DataMember]
                    [StringLength(1000)]
    	public string ItemLookupCode
    	{ 
    		get { return _ItemLookupCode; }
    		set
    		{
    			if (Equals(value, _ItemLookupCode)) return;
    			_ItemLookupCode = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ItemLookupCode;
        [DataMember]
                    [StringLength(255)]
    	public string Department
    	{ 
    		get { return _Department; }
    		set
    		{
    			if (Equals(value, _Department)) return;
    			_Department = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Department;
        [DataMember]
                    [StringLength(255)]
    	public string Category
    	{ 
    		get { return _Category; }
    		set
    		{
    			if (Equals(value, _Category)) return;
    			_Category = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Category;
        [DataMember]
                    [Required(ErrorMessage="Price is required")]
    	public double Price
    	{ 
    		get { return _Price; }
    		set
    		{
    			if (Equals(value, _Price)) return;
    			_Price = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _Price;
        [DataMember]
        	public Nullable<double> Cost
    	{ 
    		get { return _Cost; }
    		set
    		{
    			if (Equals(value, _Cost)) return;
    			_Cost = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _Cost;
        [DataMember]
                    [Required(ErrorMessage="Quantity is required")]
    	public double Quantity
    	{ 
    		get { return _Quantity; }
    		set
    		{
    			if (Equals(value, _Quantity)) return;
    			_Quantity = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _Quantity;
        [DataMember]
        	public string ExtendedDescription
    	{ 
    		get { return _ExtendedDescription; }
    		set
    		{
    			if (Equals(value, _ExtendedDescription)) return;
    			_ExtendedDescription = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ExtendedDescription;
        [DataMember]
        	public Nullable<bool> Inactive
    	{ 
    		get { return _Inactive; }
    		set
    		{
    			if (Equals(value, _Inactive)) return;
    			_Inactive = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<bool> _Inactive;
        [DataMember]
        	public Nullable<System.DateTime> DateCreated
    	{ 
    		get { return _DateCreated; }
    		set
    		{
    			if (Equals(value, _DateCreated)) return;
    			_DateCreated = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<System.DateTime> _DateCreated;
        [DataMember]
        	public Nullable<double> SalesTax
    	{ 
    		get { return _SalesTax; }
    		set
    		{
    			if (Equals(value, _SalesTax)) return;
    			_SalesTax = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _SalesTax;
        [DataMember]
        	public string QBItemListID
    	{ 
    		get { return _QBItemListID; }
    		set
    		{
    			if (Equals(value, _QBItemListID)) return;
    			_QBItemListID = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _QBItemListID;
        [DataMember]
                    [StringLength(50)]
    	public string UnitOfMeasure
    	{ 
    		get { return _UnitOfMeasure; }
    		set
    		{
    			if (Equals(value, _UnitOfMeasure)) return;
    			_UnitOfMeasure = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _UnitOfMeasure;
        [DataMember]
                    [StringLength(50)]
    	public string ItemName
    	{ 
    		get { return _ItemName; }
    		set
    		{
    			if (Equals(value, _ItemName)) return;
    			_ItemName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ItemName;
        [DataMember]
                    [StringLength(50)]
    	public string ItemNumber
    	{ 
    		get { return _ItemNumber; }
    		set
    		{
    			if (Equals(value, _ItemNumber)) return;
    			_ItemNumber = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ItemNumber;
        [DataMember]
                    [StringLength(50)]
    	public string Size
    	{ 
    		get { return _Size; }
    		set
    		{
    			if (Equals(value, _Size)) return;
    			_Size = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Size;
        [DataMember]
        	public byte[] EntryTimeStamp
    	{ 
    		get { return _EntryTimeStamp; }
    		set
    		{
    			if (Equals(value, _EntryTimeStamp)) return;
    			_EntryTimeStamp = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private byte[] _EntryTimeStamp;
        [DataMember]
        	public Nullable<bool> QBActive
    	{ 
    		get { return _QBActive; }
    		set
    		{
    			if (Equals(value, _QBActive)) return;
    			_QBActive = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<bool> _QBActive;
        [DataMember]
    	public QBInventoryItem QBInventoryItem
    	{
    		get { return _QBInventoryItem; }
    		set
    		{
    			if (Equals(value, _QBInventoryItem)) return;
    			_QBInventoryItem = value;
    			QBInventoryItemChangeTracker = _QBInventoryItem == null ? null
    				: new ChangeTrackingCollection<QBInventoryItem> { _QBInventoryItem };
    			NotifyPropertyChanged();
    		}
    	}
    	private QBInventoryItem _QBInventoryItem;
    	private ChangeTrackingCollection<QBInventoryItem> QBInventoryItemChangeTracker { get; set; }
        [DataMember]
    	public ObservableCollection<TransactionEntryItem> TransactionEntryItems
    	{
    		get { return _TransactionEntryItems; }
    		set
    		{
    			if (Equals(value, _TransactionEntryItems)) return;
    			_TransactionEntryItems = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private ObservableCollection<TransactionEntryItem> _TransactionEntryItems;
    }
}
